#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

&Вместо("ОбработкаПолученияПолейПредставления")
Процедура АСЦ_ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("ЭтоКорректировка");
	
КонецПроцедуры

&После("ОбработкаПолученияПредставления")
Процедура АСЦ_ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.ЭтоКорректировка Тогда
		Представление = "АСЦ Корректировка начисления КВ";
	Иначе	
		Представление = "АСЦ Плановое начисление КВ";
	КонецЕсли;
	
	Представление = Представление + " " + Данные.Номер + " от " + Формат(Данные.Дата);
	
КонецПроцедуры

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ТаблицыДляДвижений = Новый Структура;		
	ДополнительныеСвойства = Новый Структура;
	НомераТаблиц = Новый Структура;
	
	ПараметрыПроведения = Новый Структура;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Основание, ЭтоКорректировка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",           ДокументСсылка);
	Запрос.УстановитьПараметр("Основание",        Реквизиты.Основание);
	Запрос.УстановитьПараметр("ЭтоКорректировка", Реквизиты.ЭтоКорректировка);
	
	НомераТаблиц = Новый Структура;
	Запрос.Текст = ТекстЗапросаНачисленноеКВ(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		Если СтрНачинаетсяС(НомерТаблицы.Ключ, "Таблица") Тогда			
			Продолжить;
		КонецЕсли;
		ТаблицыДляДвижений.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
			
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	
	Возврат ДополнительныеСвойства;

КонецФункции

Функция ТекстЗапросаНачисленноеКВ(НомераТаблиц)

	НомераТаблиц.Вставить("АСЦ_НачисленноеКВ", НомераТаблиц.Количество());

	// Документ сторнируем только 1 раз
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Дата КАК Период,
	|	Док.ДЦ КАК ДЦ,
	|	Док.Статья КАК Статья,
	|	Док.Комитент КАК Комитент,
	|	Док.Организация КАК Организация,
	|	Док.Реализация КАК Реализация,
	|	Док.Ссылка КАК Документ,
	|	-ВЫБОР
	|		КОГДА Док.ВидОперации.ДвиженияСумма = ""Сумма""
	|			ТОГДА Док.Сумма
	|		ИНАЧЕ Док.СуммаКВ
	|	КОНЕЦ КАК Сумма,
	|	-Док.СуммаКВ КАК СуммаКВ
	|ИЗ
	|	Документ.АСЦ_ПлановоеНачислениеКВ КАК Док 
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АСЦ_НачисленноеКВ КАК Рег
	|		ПО Рег.Документ = &Основание
	|		И (Рег.Сумма < 0 ИЛИ Рег.СуммаКВ < 0)
	|		И Рег.Регистратор <> &Ссылка
	|ГДЕ
	|	Док.Ссылка = &Основание
	|	И (Док.Сумма > 0
	|			ИЛИ Док.СуммаКВ > 0)
	|	И Рег.Документ ЕСТЬ NULL
	|	И &ЭтоКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Дата,
	|	Док.ДЦ,
	|	Док.Статья,
	|	Док.Комитент,
	|	Док.Организация,
	|	Док.Реализация,
	|	Док.Ссылка,
	|	ВЫБОР
	|		КОГДА Док.ВидОперации.ДвиженияСумма = ""Сумма""
	|			ТОГДА Док.Сумма
	|		ИНАЧЕ Док.СуммаКВ
	|	КОНЕЦ,
	|	Док.СуммаКВ
	|ИЗ
	|	Документ.АСЦ_ПлановоеНачислениеКВ КАК Док
	|ГДЕ
	|	Док.Ссылка = &Ссылка
	|	И (Док.Сумма <> 0
	|			ИЛИ Док.СуммаКВ <> 0)";
	
	Возврат ТекстЗапроса;

КонецФункции

// ОБЩИЕ ФУНКЦИИ

Функция ПолучитьНепривязанныеДокументы(ДатаНач, ДатаКон, СтруктураОтбора, ОтчетПосредника) Экспорт
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Параметры.Вставить("ДатаНач",     ДатаНач);
	Запрос.Параметры.Вставить("ДатаКон",     ДатаКон);
	Запрос.Параметры.Вставить("ОтчетПосредника", ОтчетПосредника);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Документ,
	|	Док.Реализация КАК Реализация,
	|	Док.Статья КАК Статья,
	|	Док.ДЦ КАК ДЦ,
	|	Док.Сумма КАК СуммаПлан,
	|	Док.ПроцентКВ КАК ПроцентКВПлан,
	|	Док.СуммаКВ КАК СуммаКВПлан
	|ИЗ
	|	Документ.АСЦ_ПлановоеНачислениеКВ КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АСЦ_ПлановоеНачислениеКВ КАК ДокКорректировка
	|		ПО Док.Ссылка = ДокКорректировка.Основание
	|			И (НЕ ДокКорректировка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АСЦ_ОтчетПосредникаУпр.Продажи КАК ДокОтчетПосредника
	|		ПО (ДокОтчетПосредника.Документ = Док.Ссылка)
	|			И (НЕ ДокОтчетПосредника.Ссылка.ПометкаУдаления)
	|			И (ДокОтчетПосредника.Ссылка <> &ОтчетПосредника)
	|ГДЕ
	|	НЕ Док.ПометкаУдаления
	|	И Док.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДокКорректировка.Ссылка ЕСТЬ NULL
	|	И ДокОтчетПосредника.Ссылка ЕСТЬ NULL
	|	И Док.ОтчетПосредника = ЗНАЧЕНИЕ(Документ.АСЦ_ОтчетПосредникаУпр.ПустаяСсылка)
	|	И НЕ Док.ЭтоКорректировка
	|{ГДЕ
	|	Док.Организация.*,
	|	Док.Комитент.*,
	|	Док.ВидОперации.*,
	|	Док.Номенклатура.*,
	|	Док.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Док.ДЦ,
	|	Док.Статья}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата";
	
	Если СтруктураОтбора.ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.КВБанков Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Док.Дата", "Док.ДатаКредитнойСделки");
	КонецЕсли;	
	
	Для каждого КлючИЗначение из СтруктураОтбора Цикл
		
		ЭлементОтбора = Запрос.Отбор.Добавить(КлючИЗначение.Ключ);
		ЭлементОтбора.Установить(КлючИЗначение.Значение, Истина);
		
	КонецЦикла;	
	
	Запрос.Выполнить();
	Таблица = Запрос.Результат.Выгрузить();
	Возврат Таблица;
	
КонецФункции

Процедура ПересчитатьДокументы(ДатаНач, ДатаКон, Организация, Комитент, ПродавецВАвто, ПродавцыИсключения, ТипАвто, ПроцентКВ) Экспорт
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Параметры.Вставить("ДатаНач",     ДатаНач);
	Запрос.Параметры.Вставить("ДатаКон",     ДатаКон);
	Запрос.Параметры.Вставить("Комитент",    Комитент);
	Запрос.Параметры.Вставить("ПроцентКВ",   ПроцентКВ);
	Запрос.Параметры.Вставить("ВидОперации", Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.КВБанков);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ПлановоеНачислениеКВ КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АСЦ_ПлановоеНачислениеКВ КАК ДокКорректировка
	|		ПО Док.Основание = ДокКорректировка.Ссылка
	|			И (НЕ ДокКорректировка.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АСЦ_ОтчетПосредникаУпр.Продажи КАК ДокОтчетПосредника
	|		ПО (ДокОтчетПосредника.Документ = Док.Ссылка)
	|			И (НЕ ДокОтчетПосредника.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	НЕ Док.ПометкаУдаления
	|	И Док.Комитент = &Комитент
	|	И Док.ПроцентКВ <> &ПроцентКВ
	|	И Док.ДатаКредитнойСделки МЕЖДУ &ДатаНач И &ДатаКон
	|	И Док.ВидОперации = &ВидОперации
	|	И ДокКорректировка.Ссылка ЕСТЬ NULL
	|	И ДокОтчетПосредника.Ссылка ЕСТЬ NULL
	|{ГДЕ
	|	Док.РеализацияОрганизация,
	|	Док.НовыйАвто}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата";
	
	Если ЗначениеЗаполнено(ПродавецВАвто) Тогда
		
		ЭлементОтбора = Запрос.Отбор.Добавить("РеализацияОрганизация");
		ЭлементОтбора.Установить(ПродавецВАвто);
		
	ИначеЕсли ПродавцыИсключения <> Неопределено Тогда
		
		ЭлементОтбора = Запрос.Отбор.Добавить("РеализацияОрганизация");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.НеВСписке;
		ЭлементОтбора.Значение      = ПродавцыИсключения;
		ЭлементОтбора.Использование = Истина;
		
	КонецЕсли;	
	
	Если ТипАвто = 1 Тогда
		ЭлементОтбора = Запрос.Отбор.Добавить("НовыйАвто");
		ЭлементОтбора.Установить(Истина);
		
	ИначеЕсли ТипАвто = 2 Тогда
		ЭлементОтбора = Запрос.Отбор.Добавить("НовыйАвто");
		ЭлементОтбора.Установить(Ложь);
		
	КонецЕсли;	
	
	КэшБаз = Новый Соответствие;
	
	Запрос.Выполнить();
	Выборка = Запрос.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Документы, которые уже откорректированы не пересчитываем
		// Исключены в запросе
		//Корректировка = ПолучитьКорректировку(Выборка.Ссылка);
		//Если ЗначениеЗаполнено(Корректировка) Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		НачатьТранзакцию();
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПроцентКВ = ПроцентКВ;
		ДокументОбъект.СуммаКВ   = Окр(ДокументОбъект.Сумма * ПроцентКВ / 100, 2);
		ДокументОбъект.Записать();
		
		Запись = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
		Запись.Документ      = ДокументОбъект.Ссылка;
		Запись.УзелОбмена    = ПланыОбмена.Полный.ЭтотУзел();
		Запись.ДатаДокумента = ДокументОбъект.Дата;
		Запись.Записать();
		
		База = АСЦ_ПоискОбъектов.ПолучитьОсновнуюБазу(ДокументОбъект.ДЦ, КэшБаз);
		Если База <> Неопределено Тогда
			Запись = РегистрыСведений.ИзмененныеОбъектыДляВыгрузки.СоздатьМенеджерЗаписи();
			Запись.ИспользуемаяИБ        = База;
			Запись.НастройкаСоответствия = ДокументОбъект.ВидОперации.НастройкаСоотвествияВыгрузкаАстра;
			Запись.Элемент               = ДокументОбъект.Ссылка;
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокументОбъект);
		Сообщение.КлючДанных = ДокументОбъект.Ссылка;
		Сообщение.Сообщить();
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПолучитьКорректировку(ДокументСсылка, ОтчетПосредника = Неопределено) Экспорт
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Параметры.Вставить("Основание", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ПлановоеНачислениеКВ КАК Док
	|ГДЕ
	|	Док.Основание = &Основание
	|	И НЕ Док.ПометкаУдаления
	|{ГДЕ
	|	Док.ОтчетПосредника.*,
	|	Док.Реализация.*}";
	
	Если ОтчетПосредника <> Неопределено Тогда
		ЭлементОтбора = Запрос.Отбор.Добавить("ОтчетПосредника");
		ЭлементОтбора.Установить(ОтчетПосредника, Истина);
	КонецЕсли;	
	
	Запрос.Выполнить();
	Если Запрос.Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Запрос.Результат.Выгрузить()[0][0];
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоследнююКорректировку(ДокументСсылка) Экспорт
	
	Корректировка = ДокументСсылка; 
	Пока Истина Цикл
		
		Реузльтат = ПолучитьКорректировку(Корректировка);
		Если Реузльтат = Неопределено Тогда
			Возврат Корректировка;
		Иначе	
			Корректировка = Реузльтат;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецФункции	

Функция ПолучитьДокументБУ(ДокументСсылка, Корректировка = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Основание", ДокументСсылка);
	
	Если Корректировка Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК Док
		|ГДЕ
		|	Док.АСЦ_Основание = &Основание
		|	И НЕ Док.ПометкаУдаления";
	Иначе	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК Док
		|ГДЕ
		|	Док.АСЦ_Основание = &Основание
		|	И НЕ Док.ПометкаУдаления";
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьТаблицуВсехПолей() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("Реквизит");
	
	ДобавитьВТаблицу(Таблица, "ДатаКредитнойСделки");
	ДобавитьВТаблицу(Таблица, "Комитент");
	ДобавитьВТаблицу(Таблица, "ДоговорКонтрагента");
	ДобавитьВТаблицу(Таблица, "Номенклатура");
	ДобавитьВТаблицу(Таблица, "VIN");
	ДобавитьВТаблицу(Таблица, "ЦФО");
	ДобавитьВТаблицу(Таблица, "Сумма", "ГруппаСумма");
	ДобавитьВТаблицу(Таблица, "Себестоимость");
	ДобавитьВТаблицу(Таблица, "ПроцентКВ");
	ДобавитьВТаблицу(Таблица, "Контрагент");
	ДобавитьВТаблицу(Таблица, "Реализация");
	ДобавитьВТаблицу(Таблица, "РеализацияОрганизация");
	ДобавитьВТаблицу(Таблица, "ЗаполнитьОрганизацию");
	
	Возврат Таблица;
	
КонецФункции	

Функция ПолучитьНастройкиПолей(ВидОперации) Экспорт
	
	Таблица = ПолучитьТаблицуВсехПолей();
	Таблица.Колонки.Добавить("Видимость", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Заголовок");
	
	Если ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.Страховки
		ИЛИ ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.ПрямыеРасчетыССК Тогда	
		
		УстановитьВидимостьВТаблице(Таблица, "Комитент", "Страховая");
		УстановитьВидимостьВТаблице(Таблица, "Контрагент");
		УстановитьВидимостьВТаблице(Таблица, "ДоговорКонтрагента");
		УстановитьВидимостьВТаблице(Таблица, "Номенклатура");
		УстановитьВидимостьВТаблице(Таблица, "VIN");
		УстановитьВидимостьВТаблице(Таблица, "Сумма", "Сумма оплаты");
		УстановитьВидимостьВТаблице(Таблица, "ПроцентКВ");
		
	ИначеЕсли ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.ДопКВСтраховки Тогда	
		
		УстановитьВидимостьВТаблице(Таблица, "Комитент", "Страховая");
		
	ИначеЕсли ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.ОплатаВБанке Тогда	
		
		УстановитьВидимостьВТаблице(Таблица, "Комитент", "Банк");
		УстановитьВидимостьВТаблице(Таблица, "Контрагент");
		УстановитьВидимостьВТаблице(Таблица, "ДоговорКонтрагента");
		УстановитьВидимостьВТаблице(Таблица, "Номенклатура");
		УстановитьВидимостьВТаблице(Таблица, "VIN");
		УстановитьВидимостьВТаблице(Таблица, "Сумма", "Сумма оплаты");
		УстановитьВидимостьВТаблице(Таблица, "ПроцентКВ");
		
	ИначеЕсли ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.ДиагностическаяКарта Тогда	
		
		УстановитьВидимостьВТаблице(Таблица, "Комитент", "Страховая");
		УстановитьВидимостьВТаблице(Таблица, "Сумма", "Сумма оплаты");
		УстановитьВидимостьВТаблице(Таблица, "Себестоимость");
		
	ИначеЕсли ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.КВБанков Тогда	
		
		УстановитьВидимостьВТаблице(Таблица, "ДатаКредитнойСделки");
		УстановитьВидимостьВТаблице(Таблица, "Комитент", "Банк");
		УстановитьВидимостьВТаблице(Таблица, "Контрагент");
		УстановитьВидимостьВТаблице(Таблица, "Реализация", "Реализация а/м");
		УстановитьВидимостьВТаблице(Таблица, "РеализацияОрганизация", "Продавец а/м");
		УстановитьВидимостьВТаблице(Таблица, "VIN");
		УстановитьВидимостьВТаблице(Таблица, "Сумма", "Полная сумма кредита");
		УстановитьВидимостьВТаблице(Таблица, "ПроцентКВ");
		УстановитьВидимостьВТаблице(Таблица, "ЗаполнитьОрганизацию");
		
	КонецЕсли;	
		
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьВТаблицу(Таблица, Имя, Реквизит = "")
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Имя      = Имя;
	НоваяСтрока.Реквизит = Реквизит;
	
КонецПроцедуры	

Процедура УстановитьВидимостьВТаблице(Таблица, Имя, Заголовок = "")
	
	НоваяСтрока = Таблица.Найти(Имя, "Имя");
	Если НоваяСтрока <> Неопределено Тогда
		НоваяСтрока.Видимость = Истина;
		НоваяСтрока.Заголовок = Заголовок;
	Иначе
		ЗаписьЖурналаРегистрации("Ошибка открытия формы", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.АСЦ_ПлановоеНачислениеКВ,, "Не найден реквизит: " + Имя);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецЕсли

