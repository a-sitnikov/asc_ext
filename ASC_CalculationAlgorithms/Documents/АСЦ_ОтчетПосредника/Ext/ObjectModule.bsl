#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ДобавитьИзменениеОбъекта(ДокументСсылка, База)
	
	Если НЕ ЗначениеЗаполнено(База) Тогда
		Возврат;
	КонецЕсли;	
	
	Запись = РегистрыСведений.ИзмененныеОбъектыДляВыгрузки.СоздатьМенеджерЗаписи();
	Запись.ИспользуемаяИБ        = База;
	Запись.НастройкаСоответствия = "";
	Запись.Элемент               = ДокументСсылка;
	
	Запись.Записать();
	
КонецПроцедуры	

Процедура ЗаписатьДокумент(ДокументОбъект)
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Режим = РежимЗаписиДокумента.Запись;
		
	НачатьТранзакцию();
		
	ДокументОбъект.Записать(Режим);
	
	Запись = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
	Запись.Документ      = ДокументОбъект.Ссылка;
	Запись.УзелОбмена    = ПланыОбмена.Полный.ЭтотУзел();
	Запись.ДатаДокумента = ДокументОбъект.Дата;
	Запись.Записать();
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

Функция ПолучитьДанныеДокумента(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Дата КАК Дата,
	|	Док.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ЕСТЬNULL(ДокУслуги.Номенклатура, ДокАгентскиеУслуги.Номенклатура) КАК Номенклатура,
	|	Док.СуммаДокумента КАК Сумма,
	|	ДокАгентскиеУслуги.ДоговорКонтрагента КАК ДоговорСК,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Сумма, 0) КАК СуммаАгенскиеУслуги,
	|	ЕСТЬNULL(ДокУслуги.Сумма, 0) КАК СуммаУслуги
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК ДокУслуги
	|		ПО (ДокУслуги.Ссылка = Док.Ссылка)
	|			И (ДокУслуги.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ДокАгентскиеУслуги
	|		ПО (ДокАгентскиеУслуги.Ссылка = Док.Ссылка)
	|			И (ДокАгентскиеУслуги.НомерСтроки = 1)
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	ДокументИмя = ДокументСсылка.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеализацияТоваровУслуг", ДокументИмя); 
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Возврат Результат.Выгрузить()[0];
	КонецЕсли;	
	
КонецФункции	

// Функция проверяет соотвествие документа и данным строки
// Ворзвращаемое занчение: 
//    Истина - Документ соотвествует строке, перезаполнять не нужно
//    Ложь   - Документ не соответствует строке
Функция ДокументРТУСоответствуетСтроке(ДанныеДокумента, СтрокаТЧ)
	
	Если ДанныеДокумента.Сумма <> СтрокаТЧ.СуммаОплаты
		ИЛИ ДанныеДокумента.СуммаУслуги <> СтрокаТЧ.СуммаКВ Тогда
		
		Возврат Ложь;
		
	Иначе	
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьКорректировкуПоСвойству(Свойство, Значение, Основание)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Значение",  Значение); 
	Запрос.Параметры.Вставить("Свойство",  Свойство); 
	Запрос.Параметры.Вставить("Основание", Основание); 
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Рег.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК Рег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Док
	|		ПО (Док.Ссылка = Рег.Объект)
	|			И (НЕ Док.ПометкаУдаления)
	|ГДЕ
	|	Рег.Свойство = &Свойство
	|	И Рег.Значение = &Значение
	|	И Док.ДокументРеализации = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Документы.КорректировкаРеализации.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	

Процедура ЗаполнитьДокументыПоСтроке(СтрокаТЧ) Экспорт
	
	Если Ложь Тогда
		СтрокаТЧ = Продажи.Добавить();
	КонецЕсли;	
	
	СвойствоID = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Unicus");
	ЭтоКорректировка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
		СтрокаТЧ.Документ = АСЦ_ПоискОбъектов.НайтиДокументПоСвойству(СтрокаТЧ.ID, СвойствоID, "РеализацияТоваровУслуг");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
		// Ненайден документ реализации ничего не делаем
		Сообщить("Не найден документ реализации для договора " + СтрокаТЧ.ДоговорКонтрагента + ", ID: " + СтрокаТЧ.id);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Корректировка) Тогда
		СтрокаТЧ.Корректировка = АСЦ_ПоискОбъектов.НайтиДокументКорректировки(СтрокаТЧ.Документ);
	КонецЕсли;	
		
	ДанныеДокументаРТУ = ПолучитьДанныеДокумента(СтрокаТЧ.Документ);
	
	// Установим договор со страховой
	Если СтрокаТЧ.СуммаОплаты - СтрокаТЧ.СуммаКВ > 0 Тогда 
		
		Если ДанныеДокументаРТУ.ДоговорСК <> ДоговорКонтрагента Тогда
			
			ДокументОбъект = СтрокаТЧ.Документ.ПолучитьОбъект();
			ДокументОбъект.АгентскиеУслуги[0].ДоговорКонтрагента = ДоговорКонтрагента;
			ЗаписатьДокумент(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	// Проверим суммы. Если совпадают, то корректировку делать не нужно
	Если ДанныеДокументаРТУ.СуммаАгенскиеУслуги = СтрокаТЧ.СуммаОплаты - СтрокаТЧ.СуммаКВ
		ИЛИ ДанныеДокументаРТУ.СуммаУслуги = СтрокаТЧ.СуммаКВ Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Корректировка) Тогда
		СтрокаТЧ.Корректировка = ПолучитьКорректировкуПоСвойству(СвойствоID, ID_Unicus, СтрокаТЧ.Документ);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Корректировка) Тогда
		
		ДанныеДокументаКорр = ПолучитьДанныеДокумента(СтрокаТЧ.Корректировка);
		
		// Корректировка уже сформирована, исправлять не нужно
		Если ДанныеДокументаКорр.СуммаАгенскиеУслуги = СтрокаТЧ.СуммаОплаты - СтрокаТЧ.СуммаКВ
			И ДанныеДокументаКорр.СуммаУслуги = СтрокаТЧ.СуммаКВ
			И НачалоДня(ДанныеДокументаКорр.Дата) = НачалоДня(Дата)
			Тогда
			Возврат;
		Иначе	
			//Нужно отредактировать корректировку
			ДокументОбъект = СтрокаТЧ.Корректировка.ПолучитьОбъект();
		КонецЕсли;	
		
	Иначе	
		ДокументОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	КонецЕсли;	
	
	ВремяДокумента = Документы.КорректировкаРеализации.ВремяДокументаПоУмолчанию();
	
	ДокументОбъект.РучнаяКорректировка = ДанныеДокументаРТУ.РучнаяКорректировка;
	ДокументОбъект.ПометкаУдаления = Ложь;
	ДокументОбъект.Дата            = НачалоДня(Дата) + ВремяДокумента.Часы * 3600 + ВремяДокумента.Минуты * 60;
	ДокументОбъект.Заполнить(СтрокаТЧ.Документ);
	
	Если ДокументОбъект.Услуги.Количество() = 1 Тогда
		НоваяСтрока = ДокументОбъект.Услуги[0];
		НоваяСтрока.Сумма = СтрокаТЧ.СуммаКВ;
	Иначе
	КонецЕсли;	
	
	Если ДокументОбъект.АгентскиеУслуги.Количество() = 1 Тогда
		НоваяСтрока = ДокументОбъект.АгентскиеУслуги[0];
		НоваяСтрока.Сумма = СтрокаТЧ.СуммаОплаты - СтрокаТЧ.СуммаКВ;
	Иначе	
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ЗаписатьДокумент(ДокументОбъект);
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = СвойствоID;
	Запись.Значение = ID_Unicus;
	Запись.Записать();
	
	База = АСЦ_ПоискОбъектов.ПолучитьОсновнуюБазу(ДокументОбъект.ДоговорКонтрагента.ОсновнойЦФО);
	ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка, База);

	ЗафиксироватьТранзакцию();
	
	СтрокаТЧ.Корректировка = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Функция ЗаполнитьОтчетКомитенту() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОтчетКомитентуОПродажах) Тогда
		СвойствоID = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "UNICUS_ID");
		ОтчетКомитентуОПродажах = АСЦ_ПоискОбъектов.НайтиДокументПоСвойству(ID_Unicus, СвойствоID, "ОтчетКомитентуОПродажах");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетКомитентуОПродажах) Тогда
		
		ДокументОбъект = ОтчетКомитентуОПродажах.ПолучитьОбъект();
		ДокументОбъект.Товары.Очистить();
		
	Иначе
		
		ДокументОбъект = Документы.ОтчетКомитентуОПродажах.СоздатьДокумент();
		
	КонецЕсли;	
	
	ДокументОбъект.ПометкаУдаления    = Ложь;

	ДокументОбъект.Дата               = Дата;
	ДокументОбъект.ВидОперации        = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
	ДокументОбъект.Организация        = Организация;
	ДокументОбъект.Контрагент         = Контрагент;
	ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
	ДокументОбъект.ВалютаДокумента    = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДокументОбъект.Ответственный      = Пользователи.ТекущийПользователь();
	ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ДокументОбъект.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
	ДокументОбъект.СтавкаНДСВознаграждения  = Перечисления.СтавкиНДС.БезНДС;
	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1");
	ДокументОбъект.СчетДоходов                    = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1");
	
	Для каждого СтрокаТЧ из Продажи Цикл
		
		Если СтрокаТЧ.СуммаОплаты = 0 Тогда
			Продолжить;
		КонецЕсли;	
			
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеДокумента = ПолучитьДанныеДокумента(СтрокаТЧ.Документ);
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ДанныеДокумента.РучнаяКорректировка = Истина Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		НоваяСтрока.Номенклатура = ДанныеДокумента.Номенклатура;
		НоваяСтрока.Покупатель   = СтрокаТЧ.Контрагент;
		НоваяСтрока.Сумма        = СтрокаТЧ.СуммаОплаты;
		НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.ДатаРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Документ, "Дата");
		НоваяСтрока.КлючСтроки   = НоваяСтрока.НомерСтроки;
		
		ДокументОбъект.Дата = Макс(ДокументОбъект.Дата, ДанныеДокумента.Дата);
		
	КонецЦикла;	
	
	ВремяДокумента = Документы.ОтчетКомитентуОПродажах.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата = НачалоДня(ДокументОбъект.Дата) + ВремяДокумента.Часы * 3600 + ВремяДокумента.Минуты * 60 + 5;
	
	НачатьТранзакцию();
	
	ЗаписатьДокумент(ДокументОбъект);
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Unicus");
	Запись.Значение = ID_Unicus;
	Запись.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ОтчетКомитентуОПродажах = ДокументОбъект.Ссылка;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Процедура ЗаполнитьСвязанныеДокументы() Экспорт
	
	НачатьТранзакцию();
	
	Для каждого СтрокаТЧ из Продажи Цикл
		ЗаполнитьДокументыПоСтроке(СтрокаТЧ);
	КонецЦикла;	
		
	ЗаполнитьОтчетКомитенту();
	
	Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

Процедура ПровестиСвязныеДокументы(РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	Если РежимЗаписи = Неопределено Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Если РежимПроведения = Неопределено Тогда 
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;	
	
	Для каждого СтрокаТЧ из Продажи Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Корректировка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТЧ.Корректировка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписи, РежимПроведения);
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ОтчетКомитентуОПродажах) Тогда
		ДокументОбъект = ОтчетКомитентуОПродажах.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписи, РежимПроведения);
	КонецЕсли;	
	
КонецПроцедуры	

// Если дата не заполнена, установим по последней реализации
Процедура УстановитьДатуДокумента() Экспорт
	
	Для каждого СтрокаТЧ из Продажи Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаРТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.Документ, "Дата");
		Дата = Макс(Дата, ДатаРТУ);
		
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ
//

&Вместо("ПередЗаписью")
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаОплаты = Продажи.Итог("СуммаОплаты");
	СуммаКВ     = Продажи.Итог("СуммаКВ");
	
КонецПроцедуры

&Вместо("ОбработкаЗаполнения")
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

&Вместо("ПриКопировании")
Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());

КонецПроцедуры

&Вместо("ОбработкаПроведения")
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ПровестиСвязныеДокументы(РежимЗаписиДокумента.Проведение, РежимПроведения);
	
КонецПроцедуры

&Вместо("ОбработкаУдаленияПроведения")
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//ПровестиСвязныеДокументы(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

#КонецЕсли