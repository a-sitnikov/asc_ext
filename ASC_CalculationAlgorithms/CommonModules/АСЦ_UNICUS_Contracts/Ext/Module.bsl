
// Данная процедура вызываются из обработчика "Процедура заполнения" 
// правила обработки отчета
//
Процедура ЗаполнитьОтчет(ДокОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.ИспользуемаяИБ) Тогда
		
		Сообщить("Не указана внешняя ИБ");
		Возврат;
		
	КонецЕсли;	
	
	ДокОбъект.ОчиститьВсе();
	
	// Итоги пересчитаем после загрузки
	ДокОбъект.НеПересчитыватьИтоги = Истина;
	
	// Аналитика
	// Номенклатура, Контрагент, Договор, Страховая
	
	ТекстЗапроса =
	"SELECT
	|	tab.FULL_PREMIUM as FULL_PREMIUM,
	|	tab.PREMIUM_SUM as PREMIUM_SUM,
	|	tab.KV as KV,
	|	tab.KV_RUB as KV_RUB,
	|	CASE WHEN tab.INSUR_TYPE = 'пролонгация' 
	|		THEN 1
	|		ELSE 0
	|	END as Пролонгация,
	|	tab.TS_NEW as TS_NEW,
	|	tab.STORONNIY_CLIENT as STORONNIY_CLIENT,
	// Номенклатура
	|	tab.PRODUCT_NAME as Номенклатура,
	// ТС
	|	tab.VIN as VIN,
	|	tab.TRANSPORT_MARK as TRANSPORT_MARK,
	|	tab.TRANSPORT_MODEL as TRANSPORT_MODEL,
	|	TO_NUMBER(tab.TRANSPORT_OUT_DATE) as TRANSPORT_OUT_DATE,
	// Контрагент
	|	tab.SUBJECT_NAME as Контрагент,
	|	tab.INSURER_INN as КонтрагентИНН,
	|	tab.INSURER_KPP as КонтрагентКПП,
	|	tab.INSURER_DOC_SERIES as КонтрагентПаспортСерия,
	|	tab.INSURER_DOC_NUMBER as КонтрагентПаспортНомер,
	|	tab.INSURER_DATE_OUT as КонтрагентПаспортДата,
	|	tab.INSURER_PLACE_OUT as КонтрагентПаспортВыдан,
	// Договор
	|	tab.POLICY_NUMBER as Договор,
	// Даты, время отбрасываем
	|	TRUNC(tab.PAY_DATE) as Дата,
	|	TRUNC(tab.DATE_SIGN) as ДоговорДата,
	|	TRUNC(tab.ACTION_BEGIN_DATE) as ДатаНачала,
	|	TRUNC(tab.ACTION_END_DATE) as СрокДействия,
	// Страховая
	|	tab.SK_NAME as Страховая,
	|	tab.SK_INN as СтраховаяИНН,
	|	tab.SK_KPP as СтраховаяКПП,
	// Подразделение
	|	tab.DEPARTMENT_NAME as ЦФО,
	// Банк
	|	tab.BANK as Банк,
	|	tab.BANK_BIK as БанкБИК,
	// Организация
	|	tab.AGENT as Организация,
	|	tab.AGENT_INN as ОрганизацияИНН,
	// Тип: Сторонний, АМ коммерч, АМ корпор, АМ бу, АМ розница
	|	tab.TSFO as ТипПродажи,
	// Тип платежа: Наличные, Безналичный, Эквайринг, Прямые расчеты с СК
	|	tab.PAY_TYPE as ТипПлатежа,
	|	tab.PAY_AMOUNT as СуммаОплаты
	|FROM 
	|	unicusweb_release.v_asc_pay_contract tab
	|WHERE
	|	tab.PAY_DATE BETWEEN &ДатаНач AND &ДатаКон
	// Грузим только "Прямые расчеты с СК", остальное документами
	|	AND tab.PAY_TYPE = 'Прямые расчеты с СК'";
	
	ТекстЗапроса = ТекстЗапроса + "
	|	AND tab.AGENT_INN = '" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Организация, "ИНН") + "'";
	
	КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Организация, "КПП");
	Если ЗначениеЗаполнено(КПП) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.AGENT_KPP = '" + КПП + "'";
	КонецЕсли;	
	
	//Доп отбор для тестирования
	// например AND rownum <= 10  - выбираем только первые 10 записей
	Если ДокОбъект.ДополнительныеСвойства.Свойство("Тест_КоличествоСтрок")
		И ДокОбъект.ДополнительныеСвойства.Тест_КоличествоСтрок <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + " AND rownum <= " + Формат(ДокОбъект.ДополнительныеСвойства.Тест_КоличествоСтрок, "ЧГ=0");
		ЗаписьЖурналаРегистрации("Заполнение отчета UNICUS_Contracts",
			УровеньЖурналаРегистрации.Предупреждение, Метаданные.Документы.НастраиваемыйОтчет, ДокОбъект.Ссылка, "Кол-во строк: " + ДокОбъект.ДополнительныеСвойства.Тест_КоличествоСтрок);
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|ORDER BY
	|	tab.PAY_DATE, tab.SUBJECT_NAME";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДокОбъект.ПериодОтчета.ДатаНачала, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(КонецДня(ДокОбъект.ПериодОтчета.ДатаОкончания), "Oracle"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОрганизацияИНН", "'" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Организация, "ИНН") + "'");
	
	
	СтруктураЗапроса      = ПолучитьСтруктуруЗапроса(ДокОбъект);
	ТипыКолонокРезультата = ПолучитьТипыКолонокРезультата();
	ДополнительныеСвойстваИмпорта = Неопределено;
	
	ТаблицаДанных = ИнтеграцияСВнешнимиСистемамиУХ.АСЦ_ADO_ПолучитьДанныеИзЗапроса(ТекстЗапроса, СтруктураЗапроса, ТипыКолонокРезультата, ДополнительныеСвойстваИмпорта);
	
	// Можно заполнять через внутренний механизм трансформации данных,
	// но в нем нельзя делать вариативность поиска
	//ПравилаИспользованияПолей = ПолучитьПравилаИспользованияПолей(ДокОбъект.ИспользуемаяИБ.ТипБД);
	//Результат = ИнтеграцияСВнешнимиСистемамиУХ.ТрансформироватьВнешниеДанные(ДокОбъект, ТаблицаДанных, ПравилаИспользованияПолей);
	Результат = ЗаполнитьАналитику(ТаблицаДанных, ДокОбъект.Организация, ДокОбъект.ИспользуемаяИБ);
	
	// Без изменений не сохраняются данные в регистрах
	ЗаписатьИзменениеВЛог = Истина;
	
	Для каждого СтрокаТЗ из Результат Цикл
		
		СтатьяКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.СтатьяДоходов, "Код");
		
		ДокОбъект.УстановитьЗначениеПоказателя("К" + СтатьяКод + "_Колво", 1, 
			СтрокаТЗ.Аналитика1, СтрокаТЗ.Аналитика2, СтрокаТЗ.Аналитика3, СтрокаТЗ.Аналитика4, СтрокаТЗ.Аналитика5,, ЗаписатьИзменениеВЛог);
									
		// В некоторых полисах PREMIUM_SUM не заполнено
		// пример 001АТ-17/0015125
		ПолнаяСумма = СтрокаТЗ.PREMIUM_SUM;
		Если НЕ ЗначениеЗаполнено(ПолнаяСумма) Тогда
			ПолнаяСумма = СтрокаТЗ.FULL_PREMIUM;
		КонецЕсли;
		
		// Расчитаем пропорционально оплате
		СуммаВыручка  = Окр(СтрокаТЗ.СуммаОплаты * СтрокаТЗ.KV_RUB / ПолнаяСумма, 2);
		СуммаАгентсие = СтрокаТЗ.СуммаОплаты - СуммаВыручка;
		
		ДокОбъект.УстановитьЗначениеПоказателя("К" + СтатьяКод + "_СуммаОплаты", СтрокаТЗ.СуммаОплаты, 
			СтрокаТЗ.Аналитика1, СтрокаТЗ.Аналитика2, СтрокаТЗ.Аналитика3, СтрокаТЗ.Аналитика4, СтрокаТЗ.Аналитика5,, ЗаписатьИзменениеВЛог);
			
		ДокОбъект.УстановитьЗначениеПоказателя("К" + СтатьяКод + "_KV_RUB", СуммаВыручка, 
			СтрокаТЗ.Аналитика1, СтрокаТЗ.Аналитика2, СтрокаТЗ.Аналитика3, СтрокаТЗ.Аналитика4, СтрокаТЗ.Аналитика5,, ЗаписатьИзменениеВЛог);
			
		ДокОбъект.УстановитьЗначениеПоказателя("К" + СтатьяКод + "_VIN", СтрокаТЗ.VIN, 
			СтрокаТЗ.Аналитика1, СтрокаТЗ.Аналитика2, СтрокаТЗ.Аналитика3, СтрокаТЗ.Аналитика4, СтрокаТЗ.Аналитика5,, ЗаписатьИзменениеВЛог);
			
		ДокОбъект.УстановитьЗначениеПоказателя("К" + СтатьяКод + "_Дата", СтрокаТЗ.Дата, 
			СтрокаТЗ.Аналитика1, СтрокаТЗ.Аналитика2, СтрокаТЗ.Аналитика3, СтрокаТЗ.Аналитика4, СтрокаТЗ.Аналитика5,, ЗаписатьИзменениеВЛог);
			
	КонецЦикла;	
	
	ДокОбъект.НеПересчитыватьИтоги = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ВидОтчета", ДокОбъект.ВидОтчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|	И Спр.Владелец = &ВидОтчета
	|	И Спр.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)";
	
	Колонки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ДокОбъект.УстановитьИтогиПоПоказателям(Колонки);
	
КонецПроцедуры	


Функция ЗаполнитьАналитику(Таблица, Организация, База)
	
	Результат = Таблица.Скопировать();
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("НастройкаДепартаменты",  Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("DEPARTMENTS <-> Организации",,, ТипБазы));
	ДопПараметры.Вставить("НастройкаСтатьиДоходов", Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("Номенклатура <-> Статьи доходов",,, ТипБазы));
	ДопПараметры.Вставить("ПерезаполнятьДоговоры",  Ложь);
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Департамент",  Новый Соответствие);
	КэшДанных.Вставить("Страховая",    Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	КэшДанных.Вставить("СтатьиДоходов", Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",  Новый Соответствие);
	КэшСообщений.Вставить("Страховая",    Новый Соответствие);
	КэшСообщений.Вставить("Департамент",  Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура", Новый Соответствие);
	КэшСообщений.Вставить("СтатьяДоходов", Новый Соответствие);
	
	Результат.Колонки.Добавить("Аналитика1");
	Результат.Колонки.Добавить("Аналитика2");
	Результат.Колонки.Добавить("Аналитика3");
	Результат.Колонки.Добавить("Аналитика4");
	Результат.Колонки.Добавить("Аналитика5");
	Результат.Колонки.Добавить("СтатьяДоходов");
	
	Для каждого СтрокаТЗ из Результат Цикл
		
		СтруктураСсылок = Новый Структура;
		СтруктураСсылок.Вставить("Организация", Организация);
		СтруктураСсылок = ПолучитьСтруктуруСсылок(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений, СтруктураСсылок);
		
		// Аналитика
		СтрокаТЗ.Аналитика1    = СтруктураСсылок.СК;
		СтрокаТЗ.Аналитика2    = СтруктураСсылок.Договор;
		СтрокаТЗ.Аналитика3    = СтруктураСсылок.Номенклатура;
		СтрокаТЗ.Аналитика4    = СтруктураСсылок.ЦФО;
		СтрокаТЗ.СтатьяДоходов = СтруктураСсылок.СтатьяДоходов;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	


Функция ПолучитьСтруктуруСсылок(Данные, Параметры, База, КэшДанных, КэшСообщений, СтруктураСсылок = Неопределено) Экспорт
	
	Если СтруктураСсылок = Неопределено Тогда
		СтруктураСсылок = Новый Структура;
	КонецЕсли;	
	
	// Организация
	Если НЕ СтруктураСсылок.Свойство("Организация") Тогда
		СтруктураСсылок.Вставить("Организация", АСЦ_ОбщийМодуль.ПолучитьОрганизациюПоИНН(Данные.ОрганизацияИНН, Данные.ОрганизацияКПП, КэшДанных.Организация));
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СтруктураСсылок.Организация) Тогда
		
		Если КэшСообщений.Организация[Данные.ОрганизацияИНН + "/" + Данные.ОрганизацияКПП] = Неопределено Тогда
			
			ТекстОшибки = "Не  найдена организация: " + Данные.Организация + ", ИНН: " + Данные.ОрганизацияИНН + ", КПП: " + Данные.ОрганизацияКПП;
			ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
			Сообщить(ТекстОшибки);
			КэшСообщений.Организация.Вставить(Данные.ОрганизацияИНН + "/" + Данные.ОрганизацияКПП, Истина);
			
		КонецЕсли;
		
		Возврат СтруктураСсылок;
		
	КонецЕсли;	
	
	// ЦФО
	СтруктураСсылок.Вставить("ЦФО",        АСЦ_ОбщийМодуль.ПолучитьОбъектПоСоотвествию(Данные.ЦФО, Параметры.НастройкаДепартаменты, База, КэшДанных.Департамент));
	// Контрагент
	СтруктураСсылок.Вставить("Контрагент", АСЦ_ОбщийМодуль.ПолучитьКонтрагента(Данные, Параметры, Истина));
	
	// Номенклатура
	НаименованиеНоменклатуры = ПолучитьНаименованиеНоменклатуры(Данные.Номенклатура, Данные.Пролонгация, Данные.ТипПродажи, Данные.TS_NEW);
	СтруктураСсылок.Вставить("Номенклатура", ПолучитьНоменклатуру(НаименованиеНоменклатуры, Данные.Номенклатура, КэшДанных.Номенклатура));
	
	// Страховая
	ТекстОшибки = "";
	СтруктураСсылок.Вставить("СК", АСЦ_ОбщийМодуль.НайтиКонтрагента(Данные.Страховая, Данные.СтраховаяИНН, Данные.СтраховаяКПП, ТекстОшибки));
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		Если КэшСообщений.Страховая[Данные.Страховая] <> Неопределено Тогда
			
			ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				
			Сообщить(ТекстОшибки);
			КэшСообщений.Страховая.Вставить(Данные.Страховая, Истина);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	// Договор контрагента
	ДанныеДоговора = Новый Структура;
	ДанныеДоговора.Вставить("Контрагент",     СтруктураСсылок.Контрагент);
	ДанныеДоговора.Вставить("Организация",    СтруктураСсылок.Организация);
	ДанныеДоговора.Вставить("Наименование",   Данные.Договор);
	ДанныеДоговора.Вставить("ЦФО",            СтруктураСсылок.ЦФО);
	ДанныеДоговора.Вставить("ВидДоговораУХ",  Перечисления.ВидыДоговоровКонтрагентовУХ.СПокупателем);
	ДанныеДоговора.Вставить("Дата",           Данные.ДоговорДата);
	ДанныеДоговора.Вставить("ДатаНачала",     Данные.ДатаНачала);
	ДанныеДоговора.Вставить("СрокДействия",   Данные.СрокДействия);
	ДанныеДоговора.Вставить("СтатьяДДС",      Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Поступление от реализации финансовых услуг"));
	
	Если Параметры.Свойство("ДоговорДопРеквизиты") Тогда
		ДополнительныеРеквизиты = Новый Соответствие;
		ДополнительныеРеквизиты.Вставить(Параметры.ДоговорДопРеквизиты.Страховая, СтруктураСсылок.СК);
		ДополнительныеРеквизиты.Вставить(Параметры.ДоговорДопРеквизиты.Банк,      АСЦ_ОбщийМодуль.НайтиБанк(Данные.БанкБИК));
		ДанныеДоговора.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;	
	
	СтатьяДоходов = АСЦ_ОбщийМодуль.ПолучитьОбъектПоСоотвествию(НаименованиеНоменклатуры, Параметры.НастройкаСтатьиДоходов, База, КэшДанных.СтатьиДоходов);
	Если НЕ ЗначениеЗаполнено(СтатьяДоходов) Тогда
		
		Если Найти(НаименованиеНоменклатуры, ", пролонгация") > 0 Тогда
			СтатьяДоходов = Справочники.СтатьиДоходов.НайтиПоКоду("01713");  // Прочие, пролонгация
		Иначе
			СтатьяДоходов = Справочники.СтатьиДоходов.НайтиПоКоду("01715");  // Прочие
		КонецЕсли;	
		
	Иначе	
		ДанныеДоговора.Вставить("СтатьяДоходов",  СтатьяДоходов);
	КонецЕсли;	
	
	СтруктураСсылок.Вставить("СтатьяДоходов", СтатьяДоходов);
	СтруктураСсылок.Вставить("Договор", АСЦ_ОбщийМодуль.ПолучитьДоговор(ДанныеДоговора, Параметры.ПерезаполнятьДоговоры));
	
	// Договор СК
	Если ЗначениеЗаполнено(СтруктураСсылок.СК) Тогда
		
		ДанныеДоговораСК = Новый Структура;
		ДанныеДоговораСК.Вставить("Контрагент",    СтруктураСсылок.СК);
		ДанныеДоговораСК.Вставить("Организация",   СтруктураСсылок.Организация);
		ДанныеДоговораСК.Вставить("Наименование",  "Основной договор");
		ДанныеДоговораСК.Вставить("ВидДоговораУХ", Перечисления.ВидыДоговоровКонтрагентовУХ.СКомитентом);
		ДанныеДоговораСК.Вставить("СтатьяДДС",     Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплаты по страховой деятельности"));
		
		СтруктураСсылок.Вставить("ДоговорСК", АСЦ_ОбщийМодуль.ПолучитьДоговор(ДанныеДоговораСК, Параметры.ПерезаполнятьДоговоры, Истина));
		
	КонецЕсли;
	
	Возврат СтруктураСсылок;
	
КонецФункции	

Функция ПолучитьНаименованиеНоменклатуры(Наименование, Пролонгация, ТипПродажи, TS_NEW) Экспорт
	
	НаименованиеНоменклатуры = Наименование;
	Если Пролонгация = 1 Тогда
		Возврат НаименованиеНоменклатуры + ", пролонгация";
	КонецЕсли;
	
	Если ТипПродажи = "-" Тогда
		ТипПродажи = "";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ТипПродажи) Тогда
		
		Если TS_NEW = 1 Тогда
			ТипПродажи = "АМ розница";
		Иначе
			ТипПродажи = "АМ бу.";
		Конецесли;	
		
	КонецЕсли;
	
	НаименованиеНоменклатуры = НаименованиеНоменклатуры + ", " + ТипПродажи;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции	

Функция ПолучитьНоменклатуру(Наименование, НомГруппа, Кэш) Экспорт
	
	СпрСсылка = Кэш[Наименование];
	Если СпрСсылка <> Неопределено Тогда
		Возврат СпрСсылка;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Спр
	|ГДЕ
	|	НЕ Спр.ЭтоГруппа
	|	И НЕ Спр.ПометкаУдаления
	|	И Спр.Наименование = &Наименование";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СпрСсылка = Результат.Выгрузить()[0][0];
	Иначе
		
		СпрОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		СпрОбъект.Наименование    =  Наименование;
		СпрОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
		СпрОбъект.Услуга          = Истина;
		СпрОбъект.Родитель        = Справочники.Номенклатура.НайтиПоНаименованию("Страховки");
		СпрОбъект.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(НомГруппа);
		СпрОбъект.СтавкаНДС       = Перечисления.СтавкиНДС.БезНДС;
		СпрОбъект.Записать();
		
		СпрСсылка = СпрОбъект.Ссылка;
		
	КонецЕсли;	
	
	Кэш.Вставить(Наименование, СпрСсылка);
	Возврат СпрСсылка;
	
КонецФункции


Функция ПолучитьСтруктуруЗапроса(ДокОбъект) Экспорт
	
	СтрЗапрос = Новый Структура;
	СтрЗапрос.Вставить("СпособПолучения",  Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO);
	СтрЗапрос.Вставить("СтруктураЗапроса", Новый Структура);
	СтрЗапрос.Вставить("ТекстЗапроса",     "");
	СтрЗапрос.Вставить("ПравилаВычисленияПараметров", Новый ТаблицаЗначений);
	СтрЗапрос.Вставить("ПланСчетов",       Неопределено);
	
	СтруктураЗапроса = ИнтеграцияСВнешнимиСистемамиУХ.ПодготовитьСтруктуруЗапроса(ДокОбъект, СтрЗапрос);
	
	СтруктураРесурсов = Новый Структура;
	СтруктураЗапроса.Вставить("СтруктураРесурсов", СтруктураРесурсов);
	
	Возврат СтруктураЗапроса;
	
КонецФункции	

Функция ПолучитьТипыКолонокРезультата() Экспорт
	
	ТипыКолонокРезультата = Новый Соответствие;
	ТипыКолонокРезультата.Вставить(ВРег("Дата"),         Тип("Дата"));
	ТипыКолонокРезультата.Вставить(ВРег("ДоговорДата"),  Тип("Дата"));
	ТипыКолонокРезультата.Вставить(ВРег("ДатаНачала"),   Тип("Дата"));
	ТипыКолонокРезультата.Вставить(ВРег("СрокДействия"), Тип("Дата"));
	ТипыКолонокРезультата.Вставить(ВРег("КонтрагентПаспортДата"), Тип("Дата"));
	
	Возврат ТипыКолонокРезультата;
	
КонецФункции	
	
Функция ПолучитьПравилаИспользованияПолей(ТипБД) Экспорт
	
	ПравилаИспользованияПолей = Новый ТаблицаЗначений;
	ПравилаИспользованияПолей.Колонки.Добавить("АналитикаОперанда");
	ПравилаИспользованияПолей.Колонки.Добавить("ИндексАналитики");
	ПравилаИспользованияПолей.Колонки.Добавить("КодАналитики");
	ПравилаИспользованияПолей.Колонки.Добавить("СоздаватьНовые");
	ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитики");
	ПравилаИспользованияПолей.Колонки.Добавить("РеквизитАналитики");
	ПравилаИспользованияПолей.Колонки.Добавить("НеИспользоватьДляСинхронизации", Новый ОписаниеТипов("Булево"));
	ПравилаИспользованияПолей.Колонки.Добавить("РазделятьПоОрганизациям",        Новый ОписаниеТипов("Булево"));
	ПравилаИспользованияПолей.Колонки.Добавить("УровеньВложенности");
	ПравилаИспользованияПолей.Колонки.Добавить("Синоним");
	ПравилаИспользованияПолей.Колонки.Добавить("НастройкаСоответствия");
	ПравилаИспользованияПолей.Колонки.Добавить("Поле");
	ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитикиВИБ");
	ПравилаИспользованияПолей.Колонки.Добавить("НастройкаСоответствияРеквизит");
	ПравилаИспользованияПолей.Колонки.Добавить("ИспользованиеКонсолидация");
	ПравилаИспользованияПолей.Колонки.Добавить("СпособЗаполнения");
	ПравилаИспользованияПолей.Колонки.Добавить("ФиксированноеЗначение");
	ПравилаИспользованияПолей.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте", Новый ОписаниеТипов("Булево"));
	
	НастройкаСоответствия = ПолучитьНастройкуСоотвествия(ТипБД);
	
	// Аналитика 1: Контрагенты
	Субконто = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникКонтрагенты;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 1;
	НоваяСтрока.КодАналитики       = "Аналитика1";
	НоваяСтрока.СоздаватьНовые     = Ложь;
	НоваяСтрока.ТаблицаАналитики   = "Справочник.Контрагенты";
	НоваяСтрока.РеквизитАналитики  = "Наименование";
	НоваяСтрока.Синоним            = "SUBJECT_NAME";
	НоваяСтрока.УровеньВложенности = 1;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НеИспользоватьДляСинхронизации = Ложь;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 1;
	НоваяСтрока.КодАналитики       = "Аналитика1vzvЮридическоеФизическоеЛицо";
	НоваяСтрока.ТаблицаАналитики   = "Перечисление.ЮридическоеФизическоеЛицо";
	НоваяСтрока.Синоним            = "ЮрФизЛицо";
	НоваяСтрока.РеквизитАналитики  = "ЮридическоеФизическоеЛицо.EnumRefValue";
	НоваяСтрока.НеИспользоватьДляСинхронизации = Истина;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НастройкаСоответствияРеквизит  = НастройкаСоответствия;
	НоваяСтрока.УровеньВложенности = 1;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 1;
	НоваяСтрока.КодАналитики       = "Аналитика1vzvСтранаРегистрации";
	НоваяСтрока.ТаблицаАналитики   = "Справочник.СтраныМира";
	НоваяСтрока.Синоним            = "ВалютаКод";
	НоваяСтрока.РеквизитАналитики  = "СтранаРегистрации.Код";
	НоваяСтрока.НеИспользоватьДляСинхронизации = Ложь;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НастройкаСоответствияРеквизит  = НастройкаСоответствия;
	НоваяСтрока.УровеньВложенности = 1;
	
	// Аналитика 2: Договоры
	Субконто = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникДоговораКонтрагентов;
	
	СоотвествиеПолей = Новый Соответствие;
	СоотвествиеПолей.Вставить("Наименование", "POLICY_NUMBER");
	СоотвествиеПолей.Вставить("Номер",        "POLICY_NUMBER");
	СоотвествиеПолей.Вставить("Дата",         "DATE_SIGN");
	СоотвествиеПолей.Вставить("ДатаНачала",   "ACTION_BEGIN_DATE");
	СоотвествиеПолей.Вставить("СрокДействия", "ACTION_END_DATE");
	
	Для каждого КлючИЗначение из СоотвествиеПолей Цикл
		
		НоваяСтрока = ПравилаИспользованияПолей.Добавить();
		НоваяСтрока.АналитикаОперанда  = Субконто;
		НоваяСтрока.ИндексАналитики    = 2;
		НоваяСтрока.КодАналитики       = "Аналитика2";
		НоваяСтрока.СоздаватьНовые     = Ложь;
		НоваяСтрока.ТаблицаАналитики   = "Справочник.ДоговорыКонтрагентов";
		НоваяСтрока.РеквизитАналитики  = КлючИЗначение.Ключ;
		НоваяСтрока.Синоним            = КлючИЗначение.Значение;
		НоваяСтрока.УровеньВложенности = 1;
		НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
		
		Если КлючИЗначение.Ключ = "Наименование" Тогда
			НоваяСтрока.НеИспользоватьДляСинхронизации = Ложь;
		Иначе	
			НоваяСтрока.НеИспользоватьДляСинхронизации = Истина;
		КонецЕсли	
		
	КонецЦикла;	
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 2;
	НоваяСтрока.КодАналитики       = "Аналитика2vzvВидДоговора";
	НоваяСтрока.ТаблицаАналитики   = "Перечисление.ВидыДоговоровКонтрагентов";
	НоваяСтрока.Синоним            = "ВидДоговора";
	НоваяСтрока.РеквизитАналитики  = "ВидДоговора.EnumRefValue";
	НоваяСтрока.НеИспользоватьДляСинхронизации = Истина;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НастройкаСоответствияРеквизит  = НастройкаСоответствия;
	НоваяСтрока.УровеньВложенности = 2;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 2;
	НоваяСтрока.КодАналитики       = "Аналитика2vzvВидДоговораУХ";
	НоваяСтрока.ТаблицаАналитики   = "Перечисление.ВидыДоговоровКонтрагентовУХ";
	НоваяСтрока.Синоним            = "ВидДоговора";
	НоваяСтрока.РеквизитАналитики  = "ВидДоговораУХ.EnumRefValue";
	НоваяСтрока.НеИспользоватьДляСинхронизации = Истина;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НастройкаСоответствияРеквизит  = НастройкаСоответствия;
	НоваяСтрока.УровеньВложенности = 2;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 2;
	НоваяСтрока.КодАналитики       = "Аналитика2vzvВалютаВзаиморасчетов";
	НоваяСтрока.ТаблицаАналитики   = "Справочник.Валюты";
	НоваяСтрока.Синоним            = "ВалютаКод";
	НоваяСтрока.РеквизитАналитики  = "ВалютаВзаиморасчетов.Код";
	НоваяСтрока.НеИспользоватьДляСинхронизации = Ложь;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НастройкаСоответствияРеквизит  = НастройкаСоответствия;
	НоваяСтрока.УровеньВложенности = 2;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 2;
	НоваяСтрока.КодАналитики       = "Аналитика2vzvВладелец";
	НоваяСтрока.ТаблицаАналитики   = "Справочник.Контрагенты";
	НоваяСтрока.Синоним            = "SUBJECT_NAME";
	НоваяСтрока.РеквизитАналитики  = "Владелец.Наименование";
	НоваяСтрока.НеИспользоватьДляСинхронизации = Ложь;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НастройкаСоответствияРеквизит  = НастройкаСоответствия;
	НоваяСтрока.УровеньВложенности = 2;
	
	// Аналитика 3: Номенклатура
	Субконто = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникНоменклатура;
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.АналитикаОперанда  = Субконто;
	НоваяСтрока.ИндексАналитики    = 3;
	НоваяСтрока.КодАналитики       = "Аналитика3";
	НоваяСтрока.СоздаватьНовые     = Ложь;
	НоваяСтрока.ТаблицаАналитики   = "Справочник.Номенклатура";
	НоваяСтрока.РеквизитАналитики  = "Наименование";
	НоваяСтрока.Синоним            = "PRODUCT_NAME";
	НоваяСтрока.УровеньВложенности = 3;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.НеИспользоватьДляСинхронизации = Ложь;
	
	Возврат ПравилаИспользованияПолей;
	
КонецФункции

Функция ПолучитьНастройкуСоотвествия(ТипБД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ТипБД",    ТипБД);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК Спр
	|ГДЕ
	|	Спр.ОписаниеОбъектаВИБ.Владелец = &ТипБД";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.СоответствиеВнешнимИБ.ПустаяСсылка();
	Иначе	
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;
	
КонецФункции

