
// Преобразование строки в дату
//
// Параметры:
//	Парам - Строка вида 01.02.2018
//
// Возвращаемое значение: Дата
//
Функция вДату(Парам) Экспорт
	
	Попытка
		Возврат Дата(Парам + " 00:00:00");
	Исключение
		Возврат '0001-01-01';
	КонецПопытки;	
	
КонецФункции	

// Преобразование строки в число
//
// Параметры:
//	Парам - Строка вида 10000.34
//
// Возвращаемое значение: Число
//
Функция вЧисло(Знач Парам) Экспорт
	
	Парам = СтрЗаменить(Парам, " ", "");
	Парам = СтрЗаменить(Парам, ",", ".");
	
	Попытка
		Возврат Число(Парам);
	Исключение
		Возврат 0;
	КонецПопытки;	
	
КонецФункции	

Функция ВернутьНаименованиеТипа(КодТипа, Размерность, Длина, Точность) Экспорт
	
	Если КодТипа = 20 Тогда
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность); //"adBigInt"
	ИначеЕсли КодТипа = 128 Тогда //"adBinary"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 11 Тогда //"adBoolean"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	ИначеЕсли КодТипа = 8 Тогда //"adBSTR"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 136 Тогда //"adChapter"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 129 Тогда //adChar
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 6 Тогда //"adCurrency"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 7 Тогда //"adDate"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	ИначеЕсли КодТипа = 133 Тогда //"adDBDate"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	ИначеЕсли КодТипа = 134 Тогда //"adDBTime"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	ИначеЕсли КодТипа = 135 Тогда //"adDBTimeStamp"
		//АСЦ Ситников++
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
		//Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Время);
		//АСЦ Ситников--
	ИначеЕсли КодТипа = 14 Тогда //"adDecimal"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 5 Тогда //"adDouble"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 0 Тогда //"adEmpty"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 10 Тогда //"adError"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 64 Тогда //"adFileTime"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 72 Тогда //"adGUID"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 9 Тогда //"adIDispatch"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 3 Тогда //"adInteger"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 13 Тогда //"adIUnknown"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 205 Тогда //"adLongVarBinary"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 201 Тогда //"adLongVarChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 203 Тогда //"adLongVarWChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 131 Тогда //"adNumeric"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 138 Тогда //"adPropVariant"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 4 Тогда //"adSingle"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 2 Тогда //"adSmallInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 16 Тогда //"adTinyInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 21 Тогда //"adUnsignedBigInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 19 Тогда //"adUnsignedInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 18 Тогда //"adUnsignedSmallInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 17 Тогда //"adUnsignedTinyInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 132 Тогда //"adUserDefined"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 204 Тогда //"adVarBinary"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 200 Тогда //"adVarChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 12 Тогда //"adVariant"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 139 Тогда //"adVarNumeric"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 202 Тогда //"adVarWChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 130 Тогда //"adWChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Выполняет запрос к базе данных
//
// Параметры:
//	Соединение   - COM объект ADO.Connection
//	ТекстЗапроса - Строка
//
// Возвращаемое значение: ТаблицаЗначений
//
Функция ВыполнитьЗапросADO(Соединение, ТекстЗапроса) Экспорт
	
	НаборЗаписей = Соединение.Execute(ТекстЗапроса);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Счетчик = 0 По НаборЗаписей.Fields.Count - 1 Цикл
		
		Поле = НаборЗаписей.Fields(Счетчик);
		ТипКолонки = ВернутьНаименованиеТипа(Поле.Type, Поле.DefinedSize, 18, 5);
		ТаблицаДанных.Колонки.Добавить(Поле.Name, ТипКолонки);
		
	КонецЦикла;	
	
	Если НЕ НаборЗаписей.EOF Тогда		

		НаборЗаписей.MoveFirst();
		Пока НЕ НаборЗаписей.EOF Цикл
			
			НоваяЗапись = ТаблицаДанных.Добавить();
			Для каждого Колонка из ТаблицаДанных.Колонки Цикл
				НоваяЗапись[Колонка.Имя] = НаборЗаписей.Fields(Колонка.Имя).Value;
			КонецЦикла;	

			НаборЗаписей.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Close();
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Вычисляет значение З1*К1 + З2*К2 + ... + Зn*Кn в разрезе аналитик
// Аналитики показателей должны быть одинаковы
// Аналог функции СУММАПРОИЗВ() из Excel
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.НастраиваемыйОтчет
//	КодПоказателяЗначение - Строка
//	КодПоказателяКоличество - Строка
//	ИтогоКоличество - Число, куда возвращается сумма по показателю КодПоказателяКоличество
//
// Возвращаемое значение: Число
//
Функция СуммаПроизведение(ДокументОбъект, КодПоказателяЗначение, КодПоказателяКоличество, ИтогоКоличество = 0) Экспорт
	
	ТаблицаЗначение = ДокументОбъект.ТаблицаТекущихЗначенийПоказателей(КодПоказателяЗначение);
	ТаблицаКоличество = ДокументОбъект.ТаблицаТекущихЗначенийПоказателей(КодПоказателяКоличество);
	
	СтруктураОтбора = Новый Структура("Аналитика1, Аналитика2, Аналитика3");
	
	ИтогоСумма      = 0;
	ИтогоКоличество = 0;
	Для каждого СтрокаЗначение из ТаблицаЗначение Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаЗначение);

		НайденныеСтроки = ТаблицаКоличество.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаКоличество = НайденныеСтроки[0];
 		ИтогоСумма      = ИтогоСумма      + СтрокаЗначение.Значение * СтрокаКоличество.Значение;
		ИтогоКоличество = ИтогоКоличество + СтрокаКоличество.Значение;
		
	КонецЦикла;

	Возврат ИтогоСумма;
	
КонецФункции

// Вычисляет значение (З1*К1 + З2*К2 + ... + Зn*Кn)/(К1 + ... + Кn) в разрезе аналитик
// Аналитики показателей должны быть одинаковы
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.НастраиваемыйОтчет
//	КодПоказателяЗначение - Строка
//	КодПоказателяКоличество - Строка
//
// Возвращаемое значение: Число
//
Функция Средневзвешанное(ДокументОбъект, КодПоказателяЗначение, КодПоказателяКоличество) Экспорт
	
	ИтогоКоличество = 0;
	ИтогоСумма = СуммаПроизведение(ДокументОбъект, КодПоказателяЗначение, КодПоказателяКоличество, ИтогоКоличество);
	
	ТаблицаЗначение = ДокументОбъект.ТаблицаТекущихЗначенийПоказателей(КодПоказателяЗначение);
	ТаблицаКоличество = ДокументОбъект.ТаблицаТекущихЗначенийПоказателей(КодПоказателяКоличество);
	
	Если ИтогоКоличество = 0 Тогда
		Возврат 0;
	Иначе	
		Возврат ИтогоСумма / ИтогоКоличество;
	КонецЕсли;	
	
КонецФункции	
