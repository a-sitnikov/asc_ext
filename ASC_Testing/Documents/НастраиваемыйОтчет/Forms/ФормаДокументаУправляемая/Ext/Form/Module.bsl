
&НаКлиенте
Процедура тестВключитьРедактирование() Экспорт
	
	ДействияФормыРедактирование(Неопределено);
	
КонецПроцедуры	

&НаКлиенте
Процедура тестУстановитьЗначениеОбласти(ИмяОбласти, Значение) Экспорт
	
	Область = ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	Область.Значение = Значение;
	
	Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = Область;
	
	ПолеТабличногоДокументаМакетПриИзмененииСодержимогоОбласти(Элементы.ПолеТабличногоДокументаМакет, Область);
	
КонецПроцедуры	

&НаКлиенте
Процедура тестПересчитатьВычисляемыеПоказатели() Экспорт
	
	ПересчитатьВычисляемыеПоказатели();
	
КонецПроцедуры	

&НаКлиенте
Процедура тестПоказатьТабДок(Команда)
	
	ТабДок = тестТабДоксПоказателямиСервер();
	ТабДок.Показать();	
	
КонецПроцедуры

&НаКлиенте
Функция тестТабДокСПоказателями() Экспорт
	
	Возврат тестТабДокСПоказателямиСервер();
	
КонецФункции

&НаСервере
Функция тестТабДокСПоказателямиСервер()
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(ПолеТабличногоДокументаМакет);
	
	Для Счетчик1 = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Для Счетчик2 = 1 По ТабДок.ШиринаТаблицы Цикл
			
			ТекОбласть = ТабДок.Область(Счетчик1, Счетчик2, Счетчик1, Счетчик2);
			Если НЕ ТекОбласть.СодержитЗначение Тогда
				Продолжить;
			КонецЕсли;	
			
			ТекЗначение = ТекОбласть.Значение;
			ТекОбласть.СодержитЗначение = Ложь;
			ТекОбласть.Текст = Формат(ТекЗначение, "ЧРД=.; ЧГ=0; ДФ=dd.MM.yyyy");
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура тестЗаполнитьДокументПоМакету(ТабДок, НомерКолонки, ТипАналитики = Неопределено) Экспорт
	
	КэшАналитики = Новый Соответствие;
	ЦветЖелтый = Новый Цвет(255, 255, 192);
	
	ИмяПоказателя = Неопределено;
	Для Счетчик = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Область = ТабДок.Область(Счетчик, НомерКолонки, Счетчик, НомерКолонки);
		Имя = Область.Имя;
		Если Найти(Имя, "_Показатель_") = 0 Тогда
			ИмяПоказателя = Имя;
		КонецЕсли;	
		
		Если Область.ЦветФона <> ЦветЖелтый Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Найти(Имя, "_Показатель_") = 0 Тогда
			тестУстановитьЗначениеОбласти(Имя, Область.Текст);
		Иначе
			
			ОбластьАналитика = ТабДок.Область(Счетчик, 1, Счетчик, 1);
			
			ОбластьПоказатель = ПолеТабличногоДокументаМакет.Область(ИмяПоказателя);
			Элементы.ПолеТабличногоДокументаМакет.ТекущаяОбласть = ОбластьПоказатель;
			
			ФормаВводаАналитики = Неопределено;
			тестОбработкаСтрокиРаскрытия("ВставкаСтрокиАналитики", Ложь, ФормаВводаАналитики);
			
			Показатель = тестПолучитьПоказатель(ИмяПоказателя, Объект.ВидОтчета);
			ФормаВводаАналитики.Аналитика1 = тестПолучитьСсылкуАналитики(ОбластьАналитика.Текст, Показатель, КэшАналитики);
			ФормаВводаАналитики[ИмяПоказателя] = Область.Текст;
			
			ФормаВводаАналитики.тестКомандаОК();
			
		КонецЕсли;	
		
	КонецЦикла;	
		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция тестПолучитьПоказатель(ИмяПоказателя, ВидОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Код",       ИмяПоказателя);
	Запрос.Параметры.Вставить("ВидОтчета", ВидОтчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка,
	|	Спр.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	Спр.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	|	Спр.ГруппаРаскрытия.ВидАналитики1.ТипЗначения КАК ВидАналитики1ТипЗначения
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК Спр
	|ГДЕ
	|	Спр.Код = &Код
	|	И Спр.Владелец = &ВидОтчета";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		СтрокаТЗ = Результат.Выгрузить()[0];
		
		Структура = Новый Структура;
		Для каждого Колонка из СтрокаТЗ.Владелец().Колонки Цикл
			Структура.Вставить(Колонка.Имя, СтрокаТЗ[Колонка.Имя]);
		КонецЦикла;
		
		Возврат Структура;
		
	КонецЕсли;	
	
КонецФункции	
	
&НаСервереБезКонтекста
Функция тестПолучитьСсылкуАналитики(Текст, Показатель, КэшАналитики);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Показатель.ВидАналитики1ТипЗначения.Типы()[0]);
	ТипАналитики = ОбъектМетаданных.ПолноеИмя();
	
	Имя = ТипАналитики + "_" + Текст;
	Значение = КэшАналитики[Имя];
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Наименование", Текст);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Спр
	|ГДЕ
	|	Спр.Наименование = &Наименование";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Валюты", ТипАналитики);
	
	Если ТипАналитики = "Справочник.ПроизвольныйКлассификаторУХ" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И Спр.Владелец = &ВидАналитики";
		Запрос.Параметры.Вставить("ВидАналитики", Показатель.ВидАналитики1);
	КонецЕсли;	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Значение = Неопределено;
	Иначе
		Значение = Результат.Выгрузить()[0][0];
	КонецЕсли;	
	
	КэшАналитики.Вставить(Имя, Значение);
	Возврат Значение;
	
Конецфункции

&НаКлиенте
Процедура тестУстановитьСтатус(Статус) Экспорт
	
	ИзменитьСостояниеЗаявкиКлиент(ПредопределенноеЗначение("Перечисление.СостоянияОтчетов.Подготовлен"));
	
КонецПроцедуры	

&НаКлиенте
Процедура тестДействияФормыРаскрытиеВБланке() Экспорт
	
	Если НЕ Элементы.ДействияФормыРаскрытиеВБланке.Пометка Тогда
		ДействияФормыРаскрытиеВБланке(Неопределено);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Функция тестОбработкаСтрокиРаскрытия(ТипОбработки, ВывестиСообщение = Истина, ОткрытаяФорма) Экспорт
	
	Если Не Элементы.Редактирование.Пометка Тогда
		ТекстСообщения = НСтр("ru = 'Для редактирования состава группы аналитики требуется перейти в режим редактирования'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
		
	ПоложениеПервойКолонкиПриРаскрытии=1;
	
	Если ТекДанныеЯчейки=Неопределено Тогда
	
		Если СтрНайти(Объект.СпособВывода,"Дерево")>0 Тогда
			
			ИндексКолонки=Элементы.ТабДерево.ПодчиненныеЭлементы.Индекс(Элементы.ТабДерево.ТекущийЭлемент)+1;
			
			Если ИндексКолонки>1 И ИндексКолонки<ПерваяКолонка Тогда
				ИндексКолонки=ПерваяКолонка;
			КонецЕсли;
			
			ДанныеРасшифровки=ПолучитьРасшифровкуЯчейки(ПолучитьСтруктуруДанныхФормы(),Элементы.ТабДерево.ТекущиеДанные.НомерСтроки,ИндексКолонки);
			
		Иначе
			
			ДанныеРасшифровки=ПолучитьДанныеЯчейкиТаблица();
			
		КонецЕсли;
		
		Если ДанныеРасшифровки=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекДанныеЯчейки	= ДанныеРасшифровки.ТекРасшифровка;;
		
	КонецЕсли;
	
	Если НЕ (ТипЗнч(ТекДанныеЯчейки)=Тип("Структура") И ТекДанныеЯчейки.Свойство("Строка")) Тогда
		
		Если ВывестиСообщение Тогда
			Сообщить("Не указана строка аналитических раскрытий",СтатусСообщения.Информация);
		КонецЕсли;
		Возврат Ложь;
		
	КонецЕсли;
	
	Если (ТипОбработки="УдалениеСтрокиАналитики" ИЛИ ТипОбработки="ИзменениеАналитики") Тогда
		
		ТекстСообщения="";
		
		Если НЕ ТекДанныеЯчейки.Раскрытие Тогда
			
			ТекстСообщения="Выбранная строка не содержит аналитических раскрытий.";
			
		ИначеЕсли ТекДанныеЯчейки.ЗначениеЗаблокировано>1 Тогда 
			
			ТекстСообщения="Выбранная строка аналитического раскрытия заблокирована.";
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			
			Если ВывестиСообщение Тогда
				ПоказатьПредупреждение(,ТекстСообщения);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли; 
		
	ИначеЕсли ТекДанныеЯчейки.ЗначениеЗаблокировано>1 Тогда
		
		ТекстСообщения="Выбранный показатель заблокирован от изменений.";
		
		Если ВывестиСообщение Тогда
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаОтчета=ТекДанныеЯчейки.Строка;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",	Объект.Организация);
	ПараметрыОбработки.Вставить("Проект",		Объект.Проект);
	ПараметрыОбработки.Вставить("ИдентификаторРодителя",ЭтаФорма.УникальныйИдентификатор);
	
	Если ТипОбработки="УдалениеСтрокиАналитики" Тогда 
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Удаление");	
		ПараметрыОбработки.Вставить("НоваяАналитика", 	ТекДанныеЯчейки);	

		ОбработатьИзменениеРаскрытия(ПараметрыОбработки);
		
		Возврат Истина;

	ИначеЕсли ТипОбработки="ВставкаСтрокиАналитики" Тогда 
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Добавление");	
				
	ИначеЕсли ТипОбработки="КопированиеСтрокиАналитики" Тогда 
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Копирование");	
								
	ИначеЕсли ТипОбработки="ИзменениеАналитики" Тогда
		
		ПараметрыОбработки.Вставить("ТекущаяАналитика", ТекДанныеЯчейки);	
		ПараметрыОбработки.Вставить("Операция", 		"Изменение");	
				
	КонецЕсли;	
	
	ОткрытаяФорма = ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаВводаАналитикиУправляемаяДляБланка",ПараметрыОбработки);
	
	Возврат Истина;
	
КонецФункции // ОбработкаСтрокиРаскрытия()

&НаКлиенте
Функция тестЗаполнитьПоУмолчанию() Экспорт
	
	ЗаполнитьПоУмолчанию(Неопределено);
	
КонецФункции	

&НаСервере
Процедура тестПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	НовыйРеквизит = Новый РеквизитФормы("Тест_КоличествоСтрок", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	НовыйРеквизит.Заголовок = "Колво строк";
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Группа = ЭтаФорма.Элементы.Вставить("тестГруппа", Тип("ГруппаФормы"), , ЭтаФорма.Элементы.ГруппаПодвал);
	Группа.Вид          = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Заголовок    = "Тестирование";
	Группа.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	Группа.Поведение    = ПоведениеОбычнойГруппы.Свертываемая;
	Группа.Отображение  = ОтображениеОбычнойГруппы.СильноеВыделение;
	Группа.ОтображатьОтступСлева = Истина;
	Группа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка; 

	Элемент = Элементы.Вставить("Тест_КоличествоСтрок", Тип("ПолеФормы"), Группа, );
   	Элемент.Вид         = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Тест_КоличествоСтрок";
	Элемент.Ширина      = 8;
	Элемент.КнопкаОчистки = Истина;
	Элемент.Подсказка   = "При заполнении отчета по внешней базе будет 
	                      |заполнено только данное количество строк";
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;

	Если Параметры.Свойство("Тест_КоличествоСтрок") Тогда
		ЭтаФорма.Тест_КоличествоСтрок = Параметры.Тест_КоличествоСтрок;
	Иначе	
		ЭтаФорма.Тест_КоличествоСтрок = 50;
	КонецЕсли;	
	
	
	Команда = ЭтаФорма.Команды.Добавить("тестПоказатьТабДок");
	Команда.Действие = "тестПоказатьТабДок";
	Команда.Заголовок = "Показать таб док" ;
	
	Кнопка = ЭтаФорма.Элементы.Вставить("тестПоказатьТабДок", Тип("КнопкаФормы"), Группа, );
	Кнопка.ИмяКоманды = "тестПоказатьТабДок";

КонецПроцедуры

&НаСервере
&Вместо("ПолучитьРабочийОбъект")
Функция тестПолучитьРабочийОбъект()
	
	РабочийОбъект = ПродолжитьВызов();
	
	Попытка
		РабочийОбъект.ДополнительныеСвойства.Вставить("Тест_КоличествоСтрок", ЭтаФорма.Тест_КоличествоСтрок);
	Исключение
	КонецПопытки;	
	
	Возврат РабочийОбъект;
	
КонецФункции
