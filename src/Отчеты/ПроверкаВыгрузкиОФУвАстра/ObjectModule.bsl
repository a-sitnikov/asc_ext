
#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	
	// HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ADODB.Connection
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("ADODB.Connection", "{00000514-0000-0010-8000-00AA006D2EA4}");
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.Информация = Метаданные().Представление();
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление();
	НоваяКоманда.Идентификатор = Метаданные().Имя;
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;

КонецФункции

#КонецОбласти

Функция ГУИД(Знач ГУИДСтр)
	
	ГУИДСтр = СтрЗаменить(ГУИДСтр, "{", "");
	ГУИДСтр = СтрЗаменить(ГУИДСтр, "}", "");
	
	Возврат Новый УникальныйИдентификатор(ГУИДСтр);
	
КонецФункции	

Функция ПолучитьДанныеАстра(База, Параметры)
	
	ТипДокументы = Новый Массив;
	ТипДокументы.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипДокументы.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Дата",         Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Организация",  Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Статья",       Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходовИРасходов"));
	ТаблицаДанных.Колонки.Добавить("ДЦ",           Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Страховая",    Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("Договор",      Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Документ",     Новый ОписаниеТипов(ТипДокументы));
	ТаблицаДанных.Колонки.Добавить("СуммаАстра",   Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("СуммаКВАстра", Новый ОписаниеТипов("Число"));
	
	ТекстЗапроса =
	"SELECT
	|	[CurrentDocument_ID]
	|	,[Project_ID]
	|	,[Center_ID]
	|	,[BusinessTransaction_DocSubType_ID]
	|	,[Firm_ID]
	|	,[SupplierINN]
	|	,[SupplierKPP]
	|	,[PoliceNumber]
	|	,[FCArticle_ID]
	|	,[SaleInsuranceDate]
	|	,[SummaSalel]
	|	,[SummaKV]
	|	,[DocumentStateName]
	|FROM 
	|	[Cash_Flow_Update].[uho].[UHSaleInsurance]
	|WHERE
	|	[SaleInsuranceDate] BETWEEN &Дата1 AND &Дата2";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата1", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(Параметры.Дата1, "SQLOLEDB"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата2", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(Параметры.Дата2, "SQLOLEDB"));
	
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	НаборЗаписей = Соединение.Execute(ТекстЗапроса);
	Если НЕ НаборЗаписей.EOF Тогда		

		НаборЗаписей.MoveFirst();
		Пока НЕ НаборЗаписей.EOF Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.Дата = НаборЗаписей.Fields("SaleInsuranceDate").Value;
			
			ОрганизацияГУИД = НаборЗаписей.Fields("Firm_ID").Value;
			НоваяСтрока.Организация = Справочники.Организации.ПолучитьСсылку(ГУИД(ОрганизацияГУИД));

			ДЦГУИД = НаборЗаписей.Fields("Center_ID").Value;
			НоваяСтрока.ДЦ = Справочники.Организации.ПолучитьСсылку(ГУИД(ДЦГУИД));
			
			СтатьяГУИД = НаборЗаписей.Fields("FCArticle_ID").Value;
			НоваяСтрока.Статья = Справочники.СтатьиДоходовИРасходов.ПолучитьСсылку(ГУИД(СтатьяГУИД));
			
			ДокументГУИД = ГУИД(НаборЗаписей.Fields("CurrentDocument_ID").Value);
			ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(ДокументГУИД);
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
				ДокументСсылка = Документы.КорректировкаРеализации.ПолучитьСсылку(ДокументГУИД);
			КонецЕсли;	
			
			НоваяСтрока.Документ     = ДокументСсылка;
			
			НоваяСтрока.Договор      = НаборЗаписей.Fields("PoliceNumber").Value;
			НоваяСтрока.СуммаАстра   = НаборЗаписей.Fields("SummaSalel").Value;
			НоваяСтрока.СуммаКВАстра = НаборЗаписей.Fields("SummaKV").Value;
			
			НаборЗаписей.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Close();
	
	ТекстЗапроса =
	"SELECT
	|	tab1.UH_ID, 
	|	tab2.ErrorMes 
	|FROM (
	|	SELECT
	|		MAX(InsDate) as InsDate,
	|		tab.UH_ID as UH_ID
	|	FROM  
	|		uho.VW_UHSaleInsurance_ErrLog as tab
	|	WHERE
	|		tab.DocumentDate BETWEEN &Дата1 AND &Дата2
	|	GROUP BY 
	|		tab.UH_ID) as tab1
	|	INNER JOIN uho.VW_UHSaleInsurance_ErrLog as tab2
	|	ON tab1.UH_ID = tab2.UH_ID
	|		AND tab1.InsDate = tab2.InsDate";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата1", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(Параметры.Дата1, "SQLOLEDB"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата2", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(Параметры.Дата2, "SQLOLEDB"));
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Документ",    Новый ОписаниеТипов(ТипДокументы));
	ТаблицаОшибок.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	НаборЗаписей = Соединение.Execute(ТекстЗапроса);
	Если НЕ НаборЗаписей.EOF Тогда		

		НаборЗаписей.MoveFirst();
		Пока НЕ НаборЗаписей.EOF Цикл
			
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.ТекстОшибки = НаборЗаписей.Fields("ErrorMes").Value;
			
			ДокументГУИД = ГУИД(НаборЗаписей.Fields("UH_ID").Value);
			ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(ДокументГУИД);
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
				ДокументСсылка = Документы.КорректировкаРеализации.ПолучитьСсылку(ДокументГУИД);
			КонецЕсли;	
			
			НоваяСтрока.Документ = ДокументСсылка;
			
			НаборЗаписей.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Close();
		
	Результат = Новый Структура;
	Результат.Вставить("Данные", ТаблицаДанных);
	Результат.Вставить("Ошибки", ТаблицаОшибок);
	
	Возврат Результат;
	
КонецФункции	


Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	База   = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("База")).Значение;
	Период = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")).Значение;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Дата1", Период.ДатаНачала);
	Параметры.Вставить("Дата2", Период.ДатаОкончания);
	
	ВнешниеНаборыДанных = ПолучитьДанныеАстра(База, Параметры);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки,);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры
