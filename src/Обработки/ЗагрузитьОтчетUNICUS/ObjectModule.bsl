
Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Информация = "Загрузка данных из UNICUS в экземпляр отчета за текущий месяц по всем организациям";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить отчет UNICUS Contracts";
	НоваяКоманда.Идентификатор = "ЗагрузитьОтчетUNICUS_Contracts";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить отчет UNICUS Acts";
	НоваяКоманда.Идентификатор = "ЗагрузитьОтчетUNICUS_Acts";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	ВИБ = ХранилищеОбщихНастроек.Загрузить("ЗагрузитьОтчетUNICUS", "ВИБ");
	Если НЕ ЗначениеЗаполнено(ВИБ) Тогда
		ВИБ    = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию("Юникус");
	КонецЕсли;
	
	Период = ПолучитьТекущийПериод();
	
	//ЗаписьЖурналаРегистрации("Загрузка отчета UNICUS",
	//	УровеньЖурналаРегистрации.Предупреждение,,, "Параметры: " + вСтроку(ПараметрыКоманды));
	
	Если ИдентификаторКоманды = "ЗагрузитьОтчетUNICUS_Contracts" Тогда
		ЗагрузитьContracts();
	ИначеЕсли ИдентификаторКоманды = "ЗагрузитьОтчетUNICUS_Acts" Тогда
		ЗагрузитьActs();
	КонецЕсли;	
	
КонецПроцедуры	

Функция вСтроку(ПараметрыКоманды)
	
	Если ПараметрыКоманды = Неопределено Тогда
		Возврат "";
	ИначеЕсли ТипЗнч(ПараметрыКоманды) = Тип("Структура")
		ИЛИ ТипЗнч(ПараметрыКоманды) = Тип("Соответствие") Тогда
		
		Рез = "";
		Для каждого КлючИЗначение из ПараметрыКоманды Цикл
			Рез = Рез + Символы.ПС + Строка(КлючИЗначение.Ключ) + ": " + вСтроку(КлючИЗначение.Значение);
		КонецЦикла;	
		
		Возврат Рез;
		
	Иначе
		Возврат Строка(ПараметрыКоманды);
	КонецЕсли;	
	
КонецФункции	

Процедура ЗагрузитьContracts() Экспорт
	
	// Если соединение уже закрыто, но ссылка на него осталась
	ОбновитьПовторноИспользуемыеЗначения();
	
	ПараметрыПодключения = Новый Структура;
	Соединение = УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(ВИБ,ПараметрыПодключения);
	
	// Выберем все встречающиеся организации и для каждой сформируем документ
	ТекстЗапроса =
	"SELECT DISTINCT
	|	V_ASC_CONTRACT.AGENT
	|FROM 
	|	V_ASC_CONTRACT
	|WHERE
	|	V_ASC_CONTRACT.PAY_DATE >= &ДатаНач
	|	AND V_ASC_CONTRACT.PAY_DATE <= &ДатаКон";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND V_ASC_CONTRACT.AGENT = &Организация";
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "НаименованиеUNICUS");
		ОрганизацияНаименование = УправлениеСвойствами.ЗначениеСвойства(Организация, Свойство);
		Если НЕ ЗначениеЗаполнено(ОрганизацияНаименование) Тогда
			ОрганизацияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Наименование");
		КонецЕсли;	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", "'" + ОрганизацияНаименование + "'");
		
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(Период.ДатаНачала, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(КонецДня(Период.ДатаОкончания), "Oracle"));
	
	
	ВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду("UNICUS_Contracts");
	Сценарий  = Справочники.Сценарии.Факт;
	
	Таблица = ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
	ОшибкиОрганизация = "";
	
	Для каждого СтрокаТЗ из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.AGENT) Тогда
			Продолжить;
		КонецЕсли;	
		
		текОрганизация = ПолучитьОрганизацию(СтрокаТЗ.AGENT);
		Если Не ЗначениеЗаполнено(текОрганизация) Тогда
			ОшибкиОрганизация = ОшибкиОрганизация + Символы.ПС + СтрокаТЗ.AGENT;
			Продолжить;
		КонецЕсли;	
		
		СоздатьИЗаполнитьДокумент(текОрганизация, ВидОтчета, Сценарий);
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ОшибкиОрганизация) Тогда
		Сообщить("Не найдена организация: " + ОшибкиОрганизация);
		ЗаписьЖурналаРегистрации("Загрузка отчета UNICUS_Contracts",
			УровеньЖурналаРегистрации.Предупреждение,,, "Не найдена организация: " + ОшибкиОрганизация);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗагрузитьActs() Экспорт
	
	// Если соединение уже закрыто, но ссылка на него осталась
	ОбновитьПовторноИспользуемыеЗначения();
	
	ПараметрыПодключения = Новый Структура;
	Соединение = УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(ВИБ,ПараметрыПодключения);
	
	// Выберем все встречающиеся организации и для каждой сформируем документ
	ТекстЗапроса =
	"SELECT DISTINCT
	|    tab.AGENT_INN,    
	|    tab.AGENT_KPP    
	|FROM
	|	(SELECT 
	|   	ACT_ID 
	|	FROM v_asc_act
	|	WHERE
	|		COL1 is NOT NULL
	|		AND TO_DATE(COL3, 'DD.MM.YYYY') BETWEEN &ДатаНач AND &ДатаКон) head
	|	LEFT JOIN v_asc_act tab 
	|		ON tab.act_id = head.act_id
	|WHERE
	|	tab.COL1 IS NULL";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.AGENT_INN = &ОрганизацияИНН";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОрганизацияИНН", "'" + Организация.ИНН + "'");
		
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(Период.ДатаНачала, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(КонецДня(Период.ДатаОкончания), "Oracle"));
	
	ВидОтчета = Справочники.ВидыОтчетов.НайтиПоКоду("UNICUS_Acts");
	Сценарий  = Справочники.Сценарии.Факт;
	
	Таблица = ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
	ОшибкиОрганизация = "";
	
	Для каждого СтрокаТЗ из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЗ.AGENT_INN) Тогда
			Продолжить;
		КонецЕсли;	
		
		текОрганизация = ПолучитьОрганизацию("", СтрокаТЗ.AGENT_INN);
		Если Не ЗначениеЗаполнено(текОрганизация) Тогда
			ОшибкиОрганизация = ОшибкиОрганизация + Символы.ПС + "ИНН: " + СтрокаТЗ.AGENT_INN;
			Продолжить;
		КонецЕсли;	
		
		СоздатьИЗаполнитьДокумент(текОрганизация, ВидОтчета, Сценарий);
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ОшибкиОрганизация) Тогда
		Сообщить("Не найдена организация: " + ОшибкиОрганизация);
		ЗаписьЖурналаРегистрации("Загрузка отчета UNICUS_Acts",
			УровеньЖурналаРегистрации.Предупреждение,,, "Не найдена организация: " + ОшибкиОрганизация);
	КонецЕсли;
	
КонецПроцедуры	

Процедура СоздатьИЗаполнитьДокумент(текОрганизация, ВидОтчета, Сценарий)
	
	ДокументСсылка = ПолучитьЭкземплярОтчета(текОрганизация, ВидОтчета, Сценарий);
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
	Иначе
		ДокументОбъект = Документы.НастраиваемыйОтчет.СоздатьДокумент();
		ДокументОбъект.ПериодОтчета = Период;
		ДокументОбъект.Организация  = текОрганизация;
		ДокументОбъект.ВидОтчета    = ВидОтчета;
		ДокументОбъект.Сценарий     = Сценарий;
		ДокументОбъект.ОсновнаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ДокументОбъект.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки;
	КонецЕсли;	
	
	БланкОтчета = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, ВидОтчета, Сценарий, Организация, Период);
	ДокументОбъект.ПравилоОбработки = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчета, Сценарий, Организация, Период);
	ДокументОбъект.ПравилоПроверки  = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки, ВидОтчета, Сценарий, Организация, Период);
	ДокументОбъект.ИспользуемаяИБ   = ВИБ;
	ДокументОбъект.СпособВывода     = "Бланк";
	ДокументОбъект.ШаблонОтчета     = БланкОтчета;
	ДокументОбъект.УровеньТочности  = 2;
	
	ДокументОбъект.ИнициализироватьКонтекст();
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ДокументОбъект.ОчиститьРегистры();
	КонецЕсли;	
	
	Если Отладка Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("Тест_КоличествоСтрок", 10);
	КонецЕсли;
	
	ДокументОбъект.ЗаполнитьОтчетПоУмолчанию();
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("Загрузка отчета " + ВидОтчета,
			УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	КонецПопытки;	
	
КонецПроцедуры	

Функция ВыполнитьЗапросADO(Соединение, ТекстЗапроса)
	
	НаборЗаписей = Соединение.Execute(ТекстЗапроса);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Счетчик = 0 По НаборЗаписей.Fields.Count - 1 Цикл
		ТаблицаДанных.Колонки.Добавить(НаборЗаписей.Fields(Счетчик).Name);
	КонецЦикла;	
	
	Если НЕ НаборЗаписей.EOF Тогда		

		НаборЗаписей.MoveFirst();
		Пока НЕ НаборЗаписей.EOF Цикл
			
			НоваяЗапись = ТаблицаДанных.Добавить();
			Для каждого Колонка из ТаблицаДанных.Колонки Цикл
				НоваяЗапись[Колонка.Имя] = НаборЗаписей.Fields(Колонка.Имя).Value;
			КонецЦикла;	

			НаборЗаписей.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Close();
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПолучитьОрганизацию(Наименование, ИНН = "")
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Наименование", Наименование);
	Запрос.Параметры.Вставить("ИНН",          ИНН);
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Спр.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Спр
		|ГДЕ
		|	Спр.ИНН = &ИНН";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат Справочники.Организации.ПустаяСсылка();
		Иначе
			Возврат Результат.Выгрузить()[0][0];
		КонецЕсли;	
		
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рег.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК Рег
	|ГДЕ
	|	Рег.Свойство.Имя = ""НаименованиеUNICUS""
	|	И Рег.Значение = &Наименование";
		
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Спр
	|ГДЕ
	|	Спр.Наименование = &Наименование";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	Иначе
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьЭкземплярОтчета(текОрганизация, ВидОтчета, Сценарий)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация",  текОрганизация);
	Запрос.Параметры.Вставить("ПериодОтчета", Период);
	Запрос.Параметры.Вставить("ВидОтчета",    ВидОтчета);
	Запрос.Параметры.Вставить("Сценарий",     Сценарий);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК Док
	|ГДЕ
	|	Док.ПериодОтчета = &ПериодОтчета
	|	И Док.Организация = &Организация
	|	И Док.ВидОтчета = &ВидОтчета
	|	И Док.Сценарий = &Сценарий";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьТекущийПериод()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	Запрос.Параметры.Вставить("ДатаНачала",    НачалоМесяца(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Спр
	|ГДЕ
	|	Спр.Периодичность = &Периодичность
	|	И Спр.ДатаНачала = &ДатаНачала";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции	