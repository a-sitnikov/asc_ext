#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	
	// Запуск через фоновое не работает в режиме разрешений
	// Каталог не обнаружен 'e1cib\tempstorage\dee284a6-d234-4482-b97c-3ab694a1d1dd'
	//ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	//
	//// HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ADODB.Connection
	//Разрешение = РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("ADODB.Connection", "{00000514-0000-0010-8000-00AA006D2EA4}");
	//ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.Информация = "Загрузка документов из UNICUS";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить реализации";
	НоваяКоманда.Идентификатор = "ЗагрузитьРеализации";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить отчеты посредника";
	НоваяКоманда.Идентификатор = "ЗагрузитьОтчеты";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	
	База = ХранилищеОбщихНастроек.Загрузить("ЗагрузитьДокументыИзUnicus", "База",, "ЗагрузитьДокументыИзUnicus");
	Если НЕ ЗначениеЗаполнено(База) Тогда
		База = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию("Юникус");
	КонецЕсли;
	
	Параметры.Вставить("База",        База);
	Параметры.Вставить("ДатаНач",     ХранилищеОбщихНастроек.Загрузить("ЗагрузкаДокументовИзUnicus", "ДатаПоследнегоДокумента",, "ЗагрузитьДокументыИзUnicus"));
	Параметры.Вставить("ДатаКон",     '2100-01-01');
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ПерезаполнятьДокументы",   Ложь);
	Параметры.Вставить("ПерезаполнятьДоговоры",    Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("ЗагружатьДокументыОплаты", Истина);
	//ЗаписьЖурналаРегистрации("Загрузка отчета UNICUS",
	//	УровеньЖурналаРегистрации.Предупреждение,,, "Параметры: " + вСтроку(ПараметрыКоманды));
	
	Если ИдентификаторКоманды = "ЗагрузитьРеализации" Тогда
		ЗагрузитьРеализации(Параметры);
		
	ИначеЕсли ИдентификаторКоманды = "ЗагрузитьОтчеты" Тогда
		ЗагрузитьОтчеты(Параметры);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеФункции

Функция ЕстьNULL(Парам, Значение)
	Возврат ?(ЗначениеЗаполнено(Парам), Парам, Значение);
КонецФункции	

Функция вДату(Парам)
	
	Массив = СтрРазделить(Парам, ".");
	Возврат Дата(Число(Массив[2]), Число(Массив[1]), Число(Массив[0]));
	
КонецФункции	

Функция ЗаписатьДокумент(ДокОбъект, Режим, Сообщать = Истина)
	
	Результат = Истина;	
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;	
	
	Попытка
		ДокОбъект.Записать(Режим);
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("Загрузка документов UNICUS",
			УровеньЖурналаРегистрации.Ошибка, ДокОбъект.Метаданные(), ДокОбъект.Ссылка, ОписаниеОшибки);
			
		Результат = Ложь;	
		
	КонецПопытки;	
	
	Если Сообщать Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект);
		Сообщение.КлючДанных = ДокОбъект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ЗначенияОтличаются(Структруа1, Структура2)
	
	Для каждого КлючИЗначение Из Структруа1 Цикл
		
		Если КлючИЗначение.Значение <> Структура2[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ДобавитьИзменениеОбъекта(ДокументСсылка)
	
	НаборЗаписей = РегистрыСведений.ИзмененныеОбъектыДляВыгрузки.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	Запись.ИспользуемаяИБ        = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию("Астра 1");
	Запись.НастройкаСоответствия = "";
	Запись.Элемент               = ДокументСсылка;
	
	НаборЗаписей.Записать();
	
КонецФункции	

Функция ПолучитьДатуЗапретаИзменения(Организация, Кэш)
	
	ДатаЗапрета = Кэш[Организация];
	Если ДатаЗапрета <> Неопределено Тогда
		Возврат ДатаЗапрета;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Объект = &Организация
	|	И ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ДатыЗапретаИзменения.ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Объект = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
	|	И ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДатаЗапрета = '0001-01-01';
	Иначе
		ДатаЗапрета = Результат.Выгрузить()[0].ДатаЗапрета;
	КонецЕсли;	
	
	Кэш.Вставить(Организация, ДатаЗапрета);
	Возврат ДатаЗапрета;
	
КонецФункции

Процедура СохранитьДатуПослденегоДокумента(ДатаИзменения)
	
	ХранилищеОбщихНастроек.Сохранить("ЗагрузкаДокументовИзUnicus", "ДатаПоследнегоДокумента", ДатаИзменения,, "ЗагрузитьДокументыИзUnicus");
	
КонецПроцедуры	

#КонецОбласти

#Область ПоискДанных

Функция ПолучитьВидОплаты(Данные, Параметры, СтруктураСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", СтруктураСсылок.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|	И Спр.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;
	
	СпрОбъект = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
	СпрОбъект.Наименование = "Эквайринг";
	СпрОбъект.Организация  = СтруктураСсылок.Организация;
	СпрОбъект.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;          //57.03
	СпрОбъект.Контрагент   = АСЦ_ОбщийМодуль.НайтиКонтрагента("", "7734202860", "770801001"); //МКБ
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

Функция НайтиДокументКорректировки(ДокументРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументРеализации", ДокументРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокументРеализации
	|	И НЕ Док.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументСсылка = Результат.Выгрузить()[0][0];
	Иначе
		ДокументСсылка = Неопределено;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции	

Функция НайтиДокументСторно(ДокументРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументРеализации", ДокументРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК Док
	|ГДЕ
	|	Док.СторнируемыйДокумент = &ДокументРеализации
	|	И НЕ Док.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументСсылка = Результат.Выгрузить()[0][0];
	Иначе
		ДокументСсылка = Неопределено;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции	

#КонецОбласти

#Область РеализацииОбщие

Функция ПолучитьДанныеДокументаРТУ(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.ОсновнойЦФО КАК ЦФО,
	|	Док.СуммаДокумента КАК Сумма,
	|	ДокАгентскиеУслуги.Номенклатура КАК НоменклатураАгенскиеУслуги,
	|	ДокАгентскиеУслуги.Контрагент КАК Страховая,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Сумма, 0) КАК СуммаАгенскиеУслуги,
	|	ДокУслуги.Номенклатура КАК НоменклатураУслуги,
	|	ЕСТЬNULL(ДокУслуги.Сумма, 0) КАК СуммаУслуги
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК ДокУслуги
	|		ПО (ДокУслуги.Ссылка = Док.Ссылка)
	|			И (ДокУслуги.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ДокАгентскиеУслуги
	|		ПО (ДокАгентскиеУслуги.Ссылка = Док.Ссылка)
	|			И (ДокАгентскиеУслуги.НомерСтроки = 1)
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции	

Функция ПолучитьДанныеДокументаКорректировка(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.ОсновнойЦФО КАК ЦФО,
	|	Док.СуммаДокумента КАК Сумма,
	|	ДокАгентскиеУслуги.Номенклатура КАК НоменклатураАгенскиеУслуги,
	|	ДокАгентскиеУслуги.Контрагент КАК Страховая,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Сумма, 0) КАК СуммаАгенскиеУслуги,
	|	ДокУслуги.Номенклатура КАК НоменклатураУслуги,
	|	ЕСТЬNULL(ДокУслуги.Сумма, 0) КАК СуммаУслуги
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Услуги КАК ДокУслуги
	|		ПО (ДокУслуги.Ссылка = Док.Ссылка)
	|			И (ДокУслуги.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.АгентскиеУслуги КАК ДокАгентскиеУслуги
	|		ПО (ДокАгентскиеУслуги.Ссылка = Док.Ссылка)
	|			И (ДокАгентскиеУслуги.НомерСтроки = 1)
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции

Функция ПолучитьСуммыЮникус(Данные)
	
	// Возьмем КВ пропорционально оплате
	Результат = Новый Структура;
	
	// В некоторых полисах PREMIUM_SUM не заполнено
	// пример 001АТ-17/0015125
	Результат.Вставить("ПолнаяСумма", Данные.PREMIUM_SUM);
	Если НЕ ЗначениеЗаполнено(Результат.ПолнаяСумма) Тогда
		Результат.ПолнаяСумма = Данные.FULL_PREMIUM;
	КонецЕсли;	
	
	// Расчитаем пропорционально оплате
	Результат.Вставить("СуммаВыручка",  Окр(Данные.СуммаОплаты * Данные.KV_RUB / Результат.ПолнаяСумма, 2));
	Результат.Вставить("СуммаАгентсие", Данные.СуммаОплаты - Результат.СуммаВыручка);
	
	Возврат Результат;
	
КонецФункции	

Функция ИзменилисьСуммы(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
	
	// Корректировку можно делать только по суммам
	Если Данные.СуммаОплаты <> ДанныеДокумента.Сумма Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ДанныеСуммы.СуммаВыручка <> ДанныеДокумента.СуммаУслуги Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ИзменилисьРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
	
	Если СтруктураСсылок.Договор <> ДанныеДокумента.Договор Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если СтруктураСсылок.Организация <> ДанныеДокумента.Организация Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ИзменитьЦФО(ДокументСсылка, Договор, ЦФО)
	
	НачатьТранзакцию();
	
	ДоговорОбъект = Договор.ПолучитьОбъект();
	ДоговорОбъект.ОсновнойЦФО = ЦФО;
	ДоговорОбъект.Записать();
	
	ДобавитьИзменениеОбъекта(ДокументСсылка);
	
	ЗафиксироватьТранзакцию();
	
КонецФункции	

#КонецОбласти

#Область Реализации

Функция ПолучитьТаблицуДанныхРеализации(База, ДатаНач, ДатаКон, Организация = Неопределено, Тест_КоличествоСтрок = Неопределено, Тест_Договор = Неопределено, Тест_VIN = Неопределено)
	
	ТекстЗапроса =
	"SELECT
	|	tab.FULL_PREMIUM as FULL_PREMIUM,
	|	tab.PREMIUM_SUM as PREMIUM_SUM,
	|	tab.KV as KV,
	|	tab.KV_RUB as KV_RUB,
	|	CASE WHEN tab.INSUR_TYPE = 'пролонгация' 
	|		THEN 1
	|		ELSE 0
	|	END as Пролонгация,
	|	tab.TS_NEW as TS_NEW,
	|	tab.STORONNIY_CLIENT as STORONNIY_CLIENT,
	// Номенклатура
	|	tab.PRODUCT_NAME as Номенклатура,
	// ТС
	|	tab.VIN as VIN,
	|	tab.TRANSPORT_MARK as TRANSPORT_MARK,
	|	tab.TRANSPORT_MODEL as TRANSPORT_MODEL,
	|	TO_NUMBER(tab.TRANSPORT_OUT_DATE) as TRANSPORT_OUT_DATE,
	// Контрагент
	|	tab.EKB_ID_C as КонтрагентГУИД,
	|	tab.SUBJECT_NAME as Контрагент,
	|	tab.INSURER_INN as КонтрагентИНН,
	|	tab.INSURER_KPP as КонтрагентКПП,
	|	tab.INSURER_DOC_SERIES as КонтрагентПаспортСерия,
	|	tab.INSURER_DOC_NUMBER as КонтрагентПаспортНомер,
	|	tab.INSURER_DATE_OUT as КонтрагентПаспортДата,
	|	tab.INSURER_PLACE_OUT as КонтрагентПаспортВыдан,
	// Договор
	|	tab.POLICY_NUMBER as Договор,
	// Даты, время отбрасываем
	|	TRUNC(tab.PAY_DATE) as Дата,
	|	TRUNC(tab.DATE_SIGN) as ДоговорДата,
	|	TRUNC(tab.ACTION_BEGIN_DATE) as ДатаНачала,
	|	TRUNC(tab.ACTION_END_DATE) as СрокДействия,
	// Страховая
	|	tab.SK_NAME as Страховая,
	|	tab.SK_INN as СтраховаяИНН,
	|	tab.SK_KPP as СтраховаяКПП,
	// Подразделение
	|	tab.DEPARTMENT_NAME as ЦФО,
	// Банк
	|	tab.BANK as Банк,
	|	tab.BANK_BIK as БанкБИК,
	// Организация
	|	tab.AGENT as Организация,
	|	tab.AGENT_INN as ОрганизацияИНН,
	|	tab.AGENT_KPP as ОрганизацияКПП,
	// Тип: Сторонний, АМ коммерч, АМ корпор, АМ бу, АМ розница
	|	tab.TSFO as ТипПродажи,
	// Тип платежа: Наличные, Безналичный, Эквайринг, Прямые расчеты с СК
	|	tab.PAY_TYPE as ТипПлатежа,
	|	tab.PAY_AMOUNT as СуммаОплаты,
	|	NVL(tab.DATE_UPDATE, tab.PAY_DATE) as ДатаИзменения,
	|	TO_CHAR(tab.PAY_ID) as ID
	|FROM 
	|	unicusweb_release.v_asc_pay_contract tab
	|WHERE
	|	NVL(tab.DATE_UPDATE, tab.PAY_DATE) BETWEEN &ДатаНач AND &ДатаКон
	// Прямые расчеты с СК будем грузить отдельно
	|	AND tab.PAY_TYPE <> 'Прямые расчеты с СК'";
	
	Если ЗначениеЗаполнено(Тест_Договор) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.POLICY_NUMBER = '" + СокрЛП(Тест_Договор) + "'";
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Тест_VIN) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.VIN = '" + СокрЛП(Тест_VIN) + "'";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.AGENT_INN = '" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН") + "'";
		
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
		Если ЗначениеЗаполнено(КПП) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	AND tab.AGENT_KPP = '" + КПП + "'";
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ORDER BY
	|	NVL(tab.DATE_UPDATE, tab.PAY_DATE), СуммаОплаты";
	
	// Отладочные отборы
	//Доп отбор для тестирования
	// например AND rownum <= 10  - выбираем только первые 10 записей
	Если ЗначениеЗаполнено(Тест_КоличествоСтрок) Тогда
		
		ТекстЗапроса =  
		"SELECT
		| *
		|FROM (
		|" + ТекстЗапроса + "
		|)
		|WHERE
		|	rownum <= " + Формат(Тест_КоличествоСтрок, "ЧГ=0");
		
	КонецЕсли;	
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "Oracle"));
	
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	Возврат АСЦ_ОбщийМодуль.ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
Конецфункции	

Функция ПолучитьТаблицуДанныхРеализацииТест()
	
	// Для тестирования разных ситуаций подготовим таблицу вручную
	Макет = ПолучитьМакет("ТестовыеДанные");
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Счетчик = 2 По Макет.ШиринаТаблицы Цикл
		
		Тип = Макет.Область(1, Счетчик).Текст;
		Имя = Макет.Область(2, Счетчик).Текст;
		Если Тип = "Дата" Тогда
			Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ИначеЕсли Тип = "Число" Тогда	
			Тип = Новый ОписаниеТипов("Число");
		Иначе
			Тип = Неопределено;
		КонецЕсли;
		
		ТаблицаЗначений.Колонки.Добавить(Имя, Тип);
		
	КонецЦикла;	
	
	Для СчетчикСтрок = 3 По Макет.ВысотаТаблицы Цикл
		
		// В первой колонке пометка
		Пометка = Макет.Область(СчетчикСтрок, 1).Текст;
		Если НЕ ЗначениеЗаполнено(Пометка) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		Для каждого Колонка из ТаблицаЗначений.Колонки Цикл
			
			СчетчикКолонок = ТаблицаЗначений.Колонки.Индекс(Колонка) + 2;
			Значение = Макет.Область(СчетчикСтрок, СчетчикКолонок).Текст;
			
			Если ТипЗнч(НоваяСтрока[Колонка.Имя]) = Тип("Дата") Тогда
				НоваяСтрока[Колонка.Имя] = Дата(Значение);
			ИначеЕсли ТипЗнч(НоваяСтрока[Колонка.Имя]) = Тип("Число") Тогда
				НоваяСтрока[Колонка.Имя] = Число(Значение);
			Иначе
				НоваяСтрока[Колонка.Имя] = Значение;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТаблицаЗначений;
	
Конецфункции	

Процедура ЗагрузитьРеализации(Параметры, АдресРезультата = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
		ДатаНач = '2018-01-01';
	КонецЕсли;	
	ДатаКон     = Параметры.ДатаКон;
	Организация = Параметры.Организация;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	ПерезаполнятьДоговоры  = Параметры.ПерезаполнятьДоговоры;
	ВыводитьСообщения      = Параметры.ВыводитьСообщения;
	ЗагружатьДокументыОплаты = Параметры.ЗагружатьДокументыОплаты;
	
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);
	
	Тест_Договор = "";
	Параметры.Свойство("Тест_Договор", Тест_Договор);
	
	Тест_VIN = "";
	Параметры.Свойство("Тест_VIN", Тест_VIN);
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("НастройкаДепартаменты",  Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("DEPARTMENTS <-> Организации",,, ТипБазы));
	ДопПараметры.Вставить("НастройкаСтатьиДоходов", Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("Номенклатура <-> Статьи доходов",,, ТипБазы));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	ДопПараметры.Вставить("ПерезаполнятьДоговоры",  ПерезаполнятьДоговоры);
	ДопПараметры.Вставить("ВыводитьСообщения",      ВыводитьСообщения);
	
	ДопПараметры.Вставить("СвойствоID", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Unicus"));
	ДопПараметры.Вставить("СвойствоДЦ", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ДЦ"));
	
	ДоговорДопРеквизиты = Новый Структура;
	ДоговорДопРеквизиты.Вставить("Страховая", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Страховая"));
	ДоговорДопРеквизиты.Вставить("Банк",      ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Банк"));
	
	ДопПараметры.Вставить("ДоговорДопРеквизиты", ДоговорДопРеквизиты);
	
	ТаблицаДанных = ПолучитьТаблицуДанныхРеализации(База, ДатаНач, ДатаКон, Организация, Тест_КоличествоСтрок, Тест_Договор, Тест_VIN);
	// Заранее подготовленные данные, для отладки создания документов
	//ТаблицаДанных = ПолучитьТаблицуДанныхРеализацииТест();
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Департамент",  Новый Соответствие);
	КэшДанных.Вставить("Страховая",    Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	КэшДанных.Вставить("СведенияОНоменклатуре", Новый Соответствие);
	КэшДанных.Вставить("СтатьиДоходов", Новый Соответствие);
	КэшДанных.Вставить("ДатыЗапрета",   Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",   Новый Соответствие);
	КэшСообщений.Вставить("Страховая",     Новый Соответствие);
	КэшСообщений.Вставить("Департамент",   Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура",  Новый Соответствие);
	КэшСообщений.Вставить("СтатьяДоходов", Новый Соответствие);
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		СтруктураСсылок = АСЦ_UNICUS_Contracts.ПолучитьСтруктуруСсылок(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений);
		Если НЕ ЗначениеЗаполнено(СтруктураСсылок.Организация) Тогда
			Продолжить;
		КонецЕсли;	
		
		ДокРТУ = СоздатьДокументРТУ_Корректировка_Сторно(СтрокаТЗ, ДопПараметры, СтруктураСсылок, КэшДанных);
		
		//Если ЗагружатьДокументыОплаты = Истина Тогда
		//	СоздатьДокументОплаты(СтрокаТЗ, ДопПараметры, СтруктураСсылок, ДокРТУ);
		//КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "Загружено " + Счетчик + " из " + Всего);
			
	КонецЦикла;	
	
КонецПроцедуры	

Функция СоздатьДокументРТУ_Корректировка_Сторно(Данные, Параметры, СтруктураСсылок, КэшДанных)
	
	ДокументСсылка = АСЦ_ОбщийМодуль.НайтиДокументПоСвойству(Данные.ID, Параметры.СвойствоID, "РеализацияТоваровУслуг");
	ДатаЗапрета = ПолучитьДатуЗапретаИзменения(СтруктураСсылок.Организация, КэшДанных.ДатыЗапрета);
	ЭтоКорректировка = Ложь;
	
	Если Данные.Дата <= ДатаЗапрета Тогда
		
		Если Данные.ДатаИзменения > ДатаЗапрета Тогда
			// документ до даты изменения, корректировка после
			//Корректировка реализации
			ЭтоКорректировка = Истина;
		Иначе
			// и документ и корректировка до даты изменения
			// что делать не известно 
			// ???
			ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
				УровеньЖурналаРегистрации.Ошибка, , ДокументСсылка, "Не загружен документ: " + Данные.ID + ", дата изменения : " + Данные.ДатаИзменения + " меньше даты запрета: " + ДатаЗапрета);
			Возврат ДокументСсылка;
		КонецЕсли;	
			
	КонецЕсли;
	
	// Отвязали оплату
	Если Данные.СуммаОплаты = 0 Тогда
		
		ДокументСсылка = ЗаполнитьДокументСторно(ДокументСсылка, Данные, Параметры, СтруктураСсылок)
		
	Иначе
		
		Если ЭтоКорректировка Тогда
			ДокументСсылка = ЗаполнитьДокументКорректировка(ДокументСсылка, Данные, Параметры, СтруктураСсылок);
		Иначе	
			ДокументСсылка = ЗаполнитьДокументРТУ(ДокументСсылка, Данные, Параметры, СтруктураСсылок);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция ЗаполнитьДокументРТУ(ДокументСсылка, Данные, Параметры, СтруктураСсылок)
	
	ДанныеСуммы = ПолучитьСуммыЮникус(Данные);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДанныеДокумента = ПолучитьДанныеДокументаРТУ(ДокументСсылка);
	
		// Изменилось ЦФО,
		// тк ЦФО в договоре, то меняем сразу и помечаем к выгрузке
		Если ДанныеДокумента.ЦФО <> СтруктураСсылок.ЦФО Тогда
			ИзменитьЦФО(ДокументСсылка, СтруктураСсылок.Договор, СтруктураСсылок.ЦФО)	
		КонецЕсли;
		
		Если ИзменилисьСуммы(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
			ИЛИ ИзменилисьРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок) Тогда
			
			// Редактирование документа
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
		// документ не изменился
		Иначе
		
			Если Параметры.ПерезаполнятьДокументы Тогда
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Иначе	
				Возврат ДокументСсылка;
			КонецЕсли;	
			
		КонецЕсли;	
		
	Иначе
		
		// Новый документ
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		
	КонецЕсли;	
	
	ВремяДокумента = Документы.РеализацияТоваровУслуг.ВремяДокументаПоУмолчанию();
	
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	ДокументОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = СтруктураСсылок.Договор;
	
	ДокументОбъект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДокументОбъект.ВидОперации     = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками; //76.05
	ДокументОбъект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.АгентскиеУслуги.Очистить();
	
	Содержание = Данные.VIN + ", " + Данные.TRANSPORT_MARK + " " + Данные.TRANSPORT_MODEL;

	// Услуги
	Если ДанныеСуммы.СуммаВыручка <> 0 Тогда
		
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = СтруктураСсылок.Номенклатура;
		НоваяСтрока.Содержание   = Содержание;		
		НоваяСтрока.Сумма        = ДанныеСуммы.СуммаВыручка;
		НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.СчетДоходов  = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;             //90.01.1
		НоваяСтрока.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; //90.02.1
		НоваяСтрока.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;   //90.03
		НоваяСтрока.Субконто     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
		
	КонецЕсли;
	
	
	// АгентскиеУслуги
	Если ДанныеСуммы.СуммаАгентсие <> 0 Тогда
		
		НоваяСтрока = ДокументОбъект.АгентскиеУслуги.Добавить();
		НоваяСтрока.Номенклатура = СтруктураСсылок.Номенклатура;
		НоваяСтрока.Содержание   = Содержание;
		НоваяСтрока.Сумма        = ДанныеСуммы.СуммаАгентсие;
		НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.Контрагент   = СтруктураСсылок.СК;
		НоваяСтрока.ДоговорКонтрагента = СтруктураСсылок.ДоговорСК;
		НоваяСтрока.СчетРасчетов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1");
	
	КонецЕсли;
	
	НачатьТранзакцию();
	Если ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение, Параметры.ВыводитьСообщения) Тогда				
	
		Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		Запись.Объект   = ДокументОбъект.Ссылка;
		Запись.Свойство = Параметры.СвойствоID;
		Запись.Значение = Данные.ID;
		Запись.Записать();
		
		ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		СохранитьДатуПослденегоДокумента(Данные.ДатаИзменения);
		
	Иначе	
		ОтменитьТранзакцию();
		
		// Если не смогли записать документ, 
		// тогда нужно сохранить ID для дальнейше обработки
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Ошибка, , ДокументСсылка, "Не загружен документ корректировки: " + Данные.ID);
		
	КонецЕсли;
	
КонецФункции	

Функция ЗаполнитьДокументКорректировка(ДокументРТУ, Данные, Параметры, СтруктураСсылок)
	
	Если НЕ ЗначениеЗаполнено(ДокументРТУ) Тогда
		// Нет документа основания. редактируется документ, 
		//которого нет в базе. 
		// Не известны его первоначальные параметры, поэтому создавать ничего не будем
		Возврат Документы.КорректировкаРеализации.ПустаяСсылка();
	КонецЕсли;	
	
	ДанныеСуммы = ПолучитьСуммыЮникус(Данные);
	
	ДокументСсылка = НайтиДокументКорректировки(ДокументРТУ);
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДанныеДокумента = ПолучитьДанныеДокументаКорректировка(ДокументСсылка);
	
		// Изменилось ЦФО,
		// тк ЦФО в договоре, то меняем сразу и помечаем к выгрузке
		Если ДанныеДокумента.ЦФО <> СтруктураСсылок.ЦФО Тогда
			ИзменитьЦФО(ДокументСсылка, СтруктураСсылок.Договор, СтруктураСсылок.ЦФО)	
		КонецЕсли;
		
		// Изменился 1 из значимых показателей
		Если ИзменилисьСуммы(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок) Тогда
			
			// Редактирование документа
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
		// Необходимо делать сторно и новую реализацию
		ИначеЕсли ИзменилисьРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок) Тогда
			
		
		// документ не изменился
		Иначе
		
			Если Параметры.ПерезаполнятьДокументы Тогда
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Иначе	
				Возврат ДокументСсылка;
			КонецЕсли;	
			
		КонецЕсли;	
		
	Иначе
		
		// Новый документ
		ДокументОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
		ДокументОбъект.ДокументРеализации = ДокументРТУ;
		
	КонецЕсли;	
	
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.АгентскиеУслуги.Очистить();
	
	ДокументОбъект.Заполнить(ДокументРТУ);
	
	ВремяДокумента = Документы.КорректировкаРеализации.ВремяДокументаПоУмолчанию();
	
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.Дата        = Данные.ДатаИзменения + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	ДокументОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = СтруктураСсылок.Договор;
	
	Если ДокументОбъект.Услуги.Количество() > 0 Тогда
		
		СтрокаТЧ = ДокументОбъект.Услуги[0];
		СтрокаТЧ.Сумма = ДанныеСуммы.СуммаВыручка;
		
	КонецЕсли;	
	
	Если ДокументОбъект.АгентскиеУслуги.Количество() > 0 Тогда
		
		СтрокаТЧ = ДокументОбъект.АгентскиеУслуги[0];
		СтрокаТЧ.Сумма = ДанныеСуммы.СуммаАгентсие;
		
	КонецЕсли;	
	
	ДокументОбъект.Проведен = Истина;
	
	НачатьТранзакцию();
	Если ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение, Параметры.ВыводитьСообщения) Тогда				
	
		ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		СохранитьДатуПослденегоДокумента(Данные.ДатаИзменения);
		
	Иначе	
		ОтменитьТранзакцию();
		
		// Если не смогли записать документ, 
		// тогда нужно сохранить ID для дальнейше обработки
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Ошибка, , ДокументРТУ, "Не загружен документ корректировки");
		
	КонецЕсли;
	
КонецФункции	

Функция ЗаполнитьДокументСторно(ДокументРТУ, Данные, Параметры, СтруктураСсылок)
	
	Если НЕ ЗначениеЗаполнено(ДокументРТУ) Тогда
		// Нет документа основания.
		// сторнировать нечего
		Возврат Документы.ОперацияБух.ПустаяСсылка();
	КонецЕсли;	
	
	ДокументСсылка = НайтиДокументСторно(ДокументРТУ);
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		// уже все отсторнировано;
		Возврат ДокументСсылка;
	КонецЕсли;	                                                                
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРТУ, "Организация, СуммаДокумента");
	
	ДокументОбъект = Документы.Операциябух.СоздатьДокумент();
	ДокументОбъект.Дата                 = Данные.ДатаИзменения;
	ДокументОбъект.Организация          = РеквизитыДокумента.Организация;
	ДокументОбъект.СуммаОперации        = -РеквизитыДокумента.СуммаДокумента;
	ДокументОбъект.СторнируемыйДокумент = ДокументРТУ;
	ДокументОбъект.СпособЗаполнения     = "Сторно";
	ДокументОбъект.Содержание = "Сторно документа """ + Строка(ДокументОбъект.СторнируемыйДокумент) + """";
	
	Для каждого Регистр из ДокументОбъект.СторнируемыйДокумент.Метаданные().Движения Цикл
		
		Если НЕ Метаданные.РегистрыНакопления.Содержит(Регистр) Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборЗаписей = РегистрыНакопления[Регистр.Имя].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.СторнируемыйДокумент);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
		
			НоваяСтрока = ДокументОбъект.ТаблицаРегистровНакопления.Добавить();
			НоваяСтрока.Имя = Регистр.Имя;
			
			НаборЗаписейНовый = ДокументОбъект.Движения[Регистр.Имя]; 
			НаборЗаписейНовый.Записывать = Истина;
			Для каждого Запись из НаборЗаписей Цикл
				
				ЗаписьНовая = НаборЗаписейНовый.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНовая, Запись);
				
				Для каждого Ресурс из Регистр.Ресурсы Цикл
					ЗаписьНовая[Ресурс.Имя] = -Запись[Ресурс.Имя];
				КонецЦикла;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.СторнируемыйДокумент);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
	
		НаборЗаписейНовый = ДокументОбъект.Движения.Хозрасчетный;
		НаборЗаписейНовый.Записывать = Истина;
		НаборЗаписейНовый.Загрузить(НаборЗаписей.Выгрузить());
		
		Для каждого Запись из НаборЗаписейНовый Цикл
			
			Для каждого Ресурс из Метаданные.РегистрыБухгалтерии.Хозрасчетный.Ресурсы Цикл
				
				Если Ресурс.Балансовый Тогда
					Если ЗначениеЗаполнено(Запись[Ресурс.Имя]) Тогда
						Запись[Ресурс.Имя] = -Запись[Ресурс.Имя];
					КонецЕсли;	
				Иначе	
					
					Если ЗначениеЗаполнено(Запись[Ресурс.Имя + "Дт"]) Тогда
						Запись[Ресурс.Имя + "Дт"] = -Запись[Ресурс.Имя + "Дт"];
					КонецЕсли;	
					Если ЗначениеЗаполнено(Запись[Ресурс.Имя + "Кт"]) Тогда
						Запись[Ресурс.Имя + "Кт"] = -Запись[Ресурс.Имя + "Кт"];
					КонецЕсли;	
					
				КонецЕсли	
				
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	НачатьТранзакцию();
	Если ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись, Параметры.ВыводитьСообщения) Тогда				
	
		ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		
		СохранитьДатуПослденегоДокумента(Данные.ДатаИзменения);
		
	Иначе	
		ОтменитьТранзакцию();
		
		// Если не смогли записать документ, 
		// тогда нужно сохранить ID для дальнейше обработки
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Ошибка, , ДокументРТУ, "Не загружен документ сторно");
		
	КонецЕсли;
	
КонецФункции	

#КонецОбласти

#Область Оплаты

Функция СоздатьДокументОплаты(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Если Данные.ТипПлатежа = "Наличные" Тогда
		СоздатьПКО(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	ИначеЕсли Данные.ТипПлатежа = "Эквайринг" Тогда	
		СоздатьОплатуКартой(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	КонецЕсли;	
	
	// Загружают из клиент банка
	//СоздатьПоступлениеНаРС(Данные, Параметры, СтруктураСсылок, ДокРТУ);
	
КонецФункции	

Функция СоздатьПКО(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	Для каждого СтрокаТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ОсновнаяСтатьяДвиженияДенежныхСредств, ОсновнойЦФО");
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаТЧ.ЦФО = РеквизитыДоговора.ОсновнойЦФО;
	КонецЦикла;	
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьОплатуКартой(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ОплатаПлатежнойКартой.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	ДокументОбъект.ВидОплаты = ПолучитьВидОплаты(Данные, Параметры, СтруктураСсылок);
	Если ЗначениеЗаполнено(ДокументОбъект.ВидОплаты) Тогда
	
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
		ДокументОбъект.Эквайер = СтруктураРеквизитов.Контрагент;
		ДокументОбъект.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорКонтрагента;
		
	КонецЕсли;	
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьПоступлениеНаРС(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ПоступлениеНаРасчетныйСчет.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	Для каждого СтрокаТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ОсновнаяСтатьяДвиженияДенежныхСредств, ОсновнойЦФО");
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаТЧ.ЦФО = РеквизитыДоговора.ОсновнойЦФО;
	КонецЦикла;	
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

#КонецОбласти

#Область Отчеты

Процедура ЗагрузитьОтчеты(Параметры, АдресРезультата = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	ДатаКон     = Параметры.ДатаКон;
	Организация = Параметры.Организация;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	
	ТекстЗапроса =
	"SELECT 
	|    TO_CHAR(head.act_id) as ИД,    
	|    head.НомерДок,    
	|    head.ДатаДок,    
	|    head.СК,  
	|    head.СК_Договор,  
	|    tab.SK_INN as СК_ИНН,
	|    tab.SK_KPP as СК_КПП,
	|    TO_NUMBER(tab.COL2) as НомерСтроки,
	|	 tab.AGENT_INN as ОрганизацияИНН,
	|    tab.COL3 as Контрагент,
	|    tab.COL10 as КонтрагентИНН,
	|    tab.COL11 as КонтрагентКПП,
	|    tab.COL4 as Серия,
	|    tab.COL5 as Номер,
	|    TO_NUMBER(tab.COL6, '999999999999.99') as СтраховаяПремия,
	|    tab.COL7 as КВ_руб,
	|    tab.COL8 as КВ,
	|    tab.COL9 as СуммаКПеречислению,
    |	(SELECT 
	|        contract.PRODUCT_NAME
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS PRODUCT_NAME,
    |	(SELECT 
	|		 CASE WHEN contract.INSUR_TYPE = 'пролонгация' 
	|		 	THEN 1
	|			ELSE 0
	|		 END as Пролонгация,
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS Пролонгация,
    |	(SELECT 
	|        contract.TS_NEW
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS TS_NEW,
   	|	(SELECT 
	|        contract.TSFO
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS ТипПродажи
	|FROM
	|	(SELECT 
	|   	ACT_ID, 
	|	    COL2 as НомерДок, 
	|   	TO_DATE(COL3, 'DD.MM.YYYY') as  ДатаДок,
	|	    COL4 as СК,
	|	    COL6 as СК_Договор
	|	FROM v_asc_act
	|	WHERE
	|		COL1 is NOT NULL
	|		AND TO_DATE(COL3, 'DD.MM.YYYY') BETWEEN &ДатаНач AND &ДатаКон) head
	|	LEFT JOIN v_asc_act tab 
	|		ON tab.act_id = head.act_id
	|WHERE
	|	tab.COL1 IS NULL";
	
	//Доп отбор для тестирования
	// например AND rownum <= 10  - выбираем только первые 10 записей
	Если ЗначениеЗаполнено(Тест_КоличествоСтрок) Тогда
		ТекстЗапроса = ТекстЗапроса + " AND rownum <= " + Формат(Тест_КоличествоСтрок, "ЧГ=0");
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Предупреждение, Метаданные(), , "Кол-во строк: " + Тест_КоличествоСтрок);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.AGENT_INN = '" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН") + "'";
		
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
		Если ЗначениеЗаполнено(КПП) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	AND tab.AGENT_KPP = '" + КПП + "'";
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	ТекстЗапроса = ТекстЗапроса + "
	|ORDER BY
	|	ДатаДок, ИД, НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "Oracle"));
	
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	ТаблицаДанных = АСЦ_ОбщийМодуль.ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",  Новый Соответствие);
	КэшСообщений.Вставить("Департамент",  Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура", Новый Соответствие);
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	ПредЗначения = Новый Структура("ИД");
	ДокОбъект    = Неопределено;
	
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		Если ЗначенияОтличаются(ПредЗначения, СтрокаТЗ) Тогда
			
			ЗаполнитьЗначенияСвойств(ПредЗначения, СтрокаТЗ);
			
			
			ЗаписатьДокумент(ДокОбъект, РежимЗаписиДокумента.Запись);
			//ЗаполнитьСвязанныеДокументыОтчетПосредника(ДокОбъект);
			
			ДокОбъект = СоздатьДокументОтчетПосредника(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений);
			
			Если Ложь Тогда
				ДокОбъект = Документы.АСЦ_ОтчетПосредника.СоздатьДокумент();
			КонецЕсли;	
			
			// Неопределено когда документ не перезаполняем
			Если ДокОбъект <> Неопределено Тогда
				
				ДокОбъект.Дата        = СтрокаТЗ.ДатаДок;
				ДокОбъект.Организация = АСЦ_ОбщийМодуль.ПолучитьОрганизациюПоИНН(СтрокаТЗ.ОрганизацияИНН, КэшДанных.Организация);
				
				ТекстОшибки = "";
				ДокОбъект.Контрагент  = АСЦ_ОбщийМодуль.НайтиКонтрагента("", СтрокаТЗ.СК_ИНН, СтрокаТЗ.СК_КПП, ТекстОшибки);
				Если ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда
				
					ДанныеДоговора = Новый Структура;
					ДанныеДоговора.Вставить("Контрагент",    ДокОбъект.Контрагент);
					ДанныеДоговора.Вставить("Организация",   ДокОбъект.Организация);
					ДанныеДоговора.Вставить("Наименование",  СтрокаТЗ.СК_Договор);
					ДанныеДоговора.Вставить("ЦФО",           Неопределено);
					ДанныеДоговора.Вставить("ВидДоговораУХ", Перечисления.ВидыДоговоровКонтрагентовУХ.СКомитентом);
					ДанныеДоговора.Вставить("Дата",          "");
					ДанныеДоговора.Вставить("ДатаНачала",    "");
					ДанныеДоговора.Вставить("СрокДействия",  "");
					ДанныеДоговора.Вставить("СтатьяДДС",     Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплаты по страховой деятельности"));
	
					ДокОбъект.ДоговорКонтрагента = АСЦ_ОбщийМодуль.ПолучитьДоговор(ДанныеДоговора, Ложь);
					
				КонецЕсли;
				
				ДокОбъект.ID_Unicus   = СтрокаТЗ.ИД;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "" + Организация + ": " + Счетчик + " из " + Всего);
		
		Если ДокОбъект <> Неопределено Тогда
			
			// Тут заполнение таб. части
			НоваяСтрока = ДокОбъект.Продажи.Добавить();
			НоваяСтрока.Контрагент         = АСЦ_ОбщийМодуль.НайтиКонтрагента(СтрокаТЗ.Контрагент, СтрокаТЗ.КонтрагентИНН, СтрокаТЗ.КонтрагентКПП, ТекстОшибки);
			Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.ДоговорКонтрагента = АСЦ_ОбщийМодуль.НайтиДоговор(НоваяСтрока.Контрагент, ДокОбъект.Организация, СтрокаТЗ.Серия + СтрокаТЗ.Номер, Перечисления.ВидыДоговоровКонтрагентовУХ.СПокупателем);
			КонецЕсли;	
			
			НаименованиеНоменклатуры = АСЦ_UNICUS_Contracts.ПолучитьНаименованиеноменклатуры(СтрокаТЗ.PRODUCT_NAME, СтрокаТЗ.Пролонгация, СтрокаТЗ.ТипПродажи, СтрокаТЗ.TS_NEW);
			НоваяСтрока.Номенклатура = АСЦ_UNICUS_Contracts.ПолучитьНоменклатуру(НаименованиеНоменклатуры, СтрокаТЗ.PRODUCT_NAME, КэшДанных.Номенклатура);
			НоваяСтрока.СуммаОплаты  = СтрокаТЗ.СтраховаяПремия;
			НоваяСтрока.СуммаКВ      = СтрокаТЗ.КВ_руб;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ДокОбъект.ЗаполнитьСвязанныеДокументы();
	ЗаписатьДокумент(ДокОбъект, РежимЗаписиДокумента.Запись);
		
КонецПроцедуры	

Функция СоздатьДокументОтчетПосредника(Данные, Параметры, База, КэшДанных, КэшСообщений)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИД", Данные.ИД); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ОтчетПосредника КАК Док
	|ГДЕ
	|	Док.ID_Unicus = &ИД";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Продажи.Очистить();
			ДокументОбъект.Проведен = Ложь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.АСЦ_ОтчетПосредника.СоздатьДокумент();
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции	

#КонецОбласти

