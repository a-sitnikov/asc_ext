#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	//ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	//ПараметрыРегистрации.БезопасныйРежим = Истина;
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("http", "hlsapp3.ascgroup.local");
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса("http", "hlsapp4.ascgroup.local");
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.Информация = "Загрузка платежей из РИС";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить платежи из РИС";
	НоваяКоманда.Идентификатор = "ЗагрузитьПлатежи";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Конвертировать платежи РИС";
	НоваяКоманда.Идентификатор = "КонвертироватьПлатежи";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаКон",     ТекущаяДата());
	Параметры.Вставить("ДатаНач",     НачалоДня(ТекущаяДата() - 86400));
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ПерезаполнятьДокументы",   Ложь);
	Параметры.Вставить("ПерезаполнятьДоговоры",    Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("Тест_КодСтатьиДДС", "110007"); // Поступление от реализации финансовых услуг
	
	Если ИдентификаторКоманды = "ЗагрузитьПлатежи" Тогда
		ЗагрузитьПлатежи(Параметры);
		
	ИначеЕсли ИдентификаторКоманды = "КонвертироватьПлатежи" Тогда
		КонвертироватьПлатежи(Параметры);
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

Процедура ЗагрузитьПлатежи(Параметры, АдресРезультата = Неопределено) Экспорт
	
	WSПрокси = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(Параметры.База, "");
	Если WSПрокси = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СчетчикДокументов = 0;
	
	текДата = Параметры.ДатаНач;
	Пока текДата < Параметры.ДатаКон Цикл
	
		КолвоДокументов = ЗагрузитьПлатежиПоБазеУПП("АСЦ", WSПрокси, текДата, КонецДня(текДата), Параметры);
		СчетчикДокументов = СчетчикДокументов + КолвоДокументов;
		
		КолвоДокументов = ЗагрузитьПлатежиПоБазеУПП("ЭЛА", WSПрокси, текДата, КонецДня(текДата), Параметры);
		СчетчикДокументов = СчетчикДокументов + КолвоДокументов;
		
		текДата = текДата + 86400;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СчетчикДокументов, АдресРезультата);
	
КонецПроцедуры

Функция ЗагрузитьПлатежиПоБазеУПП(ИмяБазыУПП, WSПрокси, ДатаНач, ДатаКон, Параметры) Экспорт
	
	Организация = Параметры.Организация;
	
	ПолученныеВыписки = Неопределено;
	ТаблицаДокументов = Неопределено;
	ТекстОшибки = "";
	
	ДлительныеОперации.СообщитьПрогресс(0,  ИмябазыУПП + " " + Формат(ДатаНач, "ДФ=dd.MM.yyyy") + ", получение данных");
	
	Ответ = WSПрокси.InvoiceGet(" ",
		ИмяБазыУПП,
		ДатаНач,
		ДатаКон,
		Истина,
		Неопределено,
		Неопределено,
		ТаблицаДокументов,
		ТекстОшибки,
		ПолученныеВыписки);
		
		
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);

	Тест_КодСтатьиДДС = "";
	Параметры.Свойство("Тест_КодСтатьиДДС", Тест_КодСтатьиДДС);
	
	Тест_ВидДокумента = "";
	Параметры.Свойство("Тест_ВидДокумента", Тест_ВидДокумента);
	
	Тест_Договор = "";
	Параметры.Свойство("Тест_Договор", Тест_Договор);
	
	Счетчик = 0;
	СчетчикДокументов = 0;
	
	Если ТаблицаДокументов = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Всего = ТаблицаДокументов.Платеж.Количество();
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация", Новый Соответствие);
	
	Для каждого СтрПлатеж Из ТаблицаДокументов.Платеж Цикл
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ИмябазыУПП + " " + Формат(ДатаНач, "ДФ=dd.MM.yyyy") + ", обработано " + Счетчик + " из " + Всего);
		
		Если СтрПлатеж.ВидПлатежногоДокумента = "ПКО" Тогда
			
			//Если оплата прошла по оперкассе, то не создается документ «Оплата от покупателя платежной картой», 
			//но на следующий день, после разнесения выписки банка, из РИС будет загружен документ «Платежное поручение входящее». 			
			Если СтрПлатеж.ТочкаОплаты = "Оперкасса" Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрПлатеж.ТочкаОплаты) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		//// Платежи без договора не относятся к ОФУ
		//Если НЕ ЗначениеЗаполнено(СтрПлатеж.Договор) Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		СтруктураСсылок = Новый Структура;
		СтруктураСсылок.Вставить("Организация", АСЦ_ПоискОбъектов.ПолучитьОрганизациюПоИНН(СтрПлатеж.ИННОрганизации, СтрПлатеж.КППОрганизации, КэшДанных.Организация));
		Если ЗначениеЗаполнено(Организация) Тогда
			Если Организация <> СтруктураСсылок.Организация Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Тест_Договор) Тогда
			Если Тест_Договор <> СтрПлатеж.Договор Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Тест_КодСтатьиДДС) Тогда
			Если Тест_КодСтатьиДДС <> СтрПлатеж.КодСтатьиДДС Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрПлатеж.ВидПлатежногоДокумента = "ПКО" Тогда
			
			Если СтрПлатеж.СпособПлатежа = "Банковская карта" Тогда
				ВидДокумента = "Оплата картой";
			Иначе
				ВидДокумента = "ПКО";
			КонецЕсли;
			
		ИначеЕсли СтрПлатеж.ВидПлатежногоДокумента = "ППВ" Тогда 
			ВидДокумента = "Поступление ДС";
			
		Иначе	
			ВидДокумента = "ххх";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Тест_ВидДокумента) Тогда
			
			Если ВидДокумента <> Тест_ВидДокумента Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;	
		
		ИД = ПолучитьГУИД(СтрПлатеж.ИДДокумента);
		Если ЗначениеЗаполнено(ИД) Тогда
			ДокументСсылка = Документы.АСЦ_Платеж.ПолучитьСсылку(ИД);
		Иначе	
			ДокументСсылка = Неопределено;
		КонецЕсли;	
		
		ЗаполнитьДокументПлатеж(ДокументСсылка, СтрПлатеж, WSПрокси, СтруктураСсылок, Параметры);
		
		СчетчикДокументов = СчетчикДокументов + 1;
		
	КонецЦикла; 
	
	Возврат СчетчикДокументов;
	
КонецФункции

Процедура КонвертироватьПлатежи(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Организация = Параметры.Организация;
	
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);
	
	Тест_ВидДокумента = "";
	Параметры.Свойство("Тест_ВидДокумента", Тест_ВидДокумента);
	
	//Если оплата прошла по оперкассе, то не создается документ «Оплата от покупателя платежной картой», 
	//но на следующий день, после разнесения выписки банка, из РИС  будет загружен документ «Платежное поручение входящее». 
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Параметры.Вставить("Оперкасса", "Оперкасса");
	Запрос.Параметры.Вставить("ПКО",       "ПКО");
	ТекстЗапроса =
	"ВЫБРАТЬ //ПЕРВЫЕ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_Платеж КАК Док
	|ГДЕ
	|	Док.СозданныйДокументВБазе = НЕОПРЕДЕЛЕНО
	|	И НЕ(Док.ТочкаОплаты = &Оперкасса
	|				И Док.ВидПлатежногоДокумента = &ПКО)
	|{ГДЕ
	|	Док.Организация.*,
	|	Док.ВидПлатежногоДокумента}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата";
	
	Если ЗначениеЗаполнено(Тест_КоличествоСтрок) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ", "ПЕРВЫЕ " + Формат(Тест_КоличествоСтрок, "ЧГ=0"));	
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ", "");	
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ЭлементОтбора = Запрос.Отбор.Добавить("Организация");
		ЭлементОтбора.Установить(Организация, Истина);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	Выборка = Запрос.Результат.Выбрать();
	
	Всего = Выборка.Количество();
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Параметры.ВыводитьСообщения Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Строка(Выборка.Ссылка);
			Сообщение.КлючДанных = Выборка.Ссылка;
			Сообщение.Сообщить();
			
		КонецЕсли;
			
		Попытка
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СконвертироватьДокумент();
			
		Исключение
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Сообщить(ТекстОшибки);
			ЗаписьЖурналаРегистрации("Загрузка документов РИС",
				УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), ДокументОбъект.Ссылка, ТекстОшибки);
				
		КонецПопытки;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "Сконвертировано " + Счетчик + " из " + Всего);
		
		Если ЗначениеЗаполнено(Тест_КоличествоСтрок)
			И Счетчик >= Тест_КоличествоСтрок Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьГУИД(Парам)
	
	Если НЕ ЗначениеЗаполнено(Парам) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	// "{"#",54b442b6-253a-4c8b-b790-6236a2ab5425,176:a1250cc47a57b16f11e70a0b2b2a6af1}"
	Парам = СтрЗаменить(Парам,"#","");
	Парам = СтрЗаменить(Парам,"{","");
	Парам = СтрЗаменить(Парам,"}","");
	Парам = СтрЗаменить(Парам,",","");
	Парам = СтрЗаменить(Парам,"""","");
		
	Возврат Новый УникальныйИдентификатор(Парам);
	
КонецФункции	

Функция ПолучитьБанковскийСчет(Данные, Организация)
	
	Если Данные = Неопределено Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("НомерСчета",  Данные.НомерСчета);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК Спр
	|ГДЕ
	|	Спр.НомерСчета = &НомерСчета
	|	И Спр.Владелец = &Организация
	|	И НЕ Спр.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		
		СпрОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СпрОбъект.Владелец   = Организация;
		СпрОбъект.НомерСчета = Данные.НомерСчета;
		СпрОбъект.Банк       = АСЦ_ПоискОбъектов.НайтиБанк(Данные.БИК);
		СпрОбъект.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		СпрОбъект.Наименование = СпрОбъект.НомерСчета;
		СпрОбъект.Записать();
		
		Возврат СпрОбъект.Ссылка;
		
	КонецЕсли;	
	
КонецФункции	

Функция ЗаполнитьДокументПлатеж(ДокументСсылка, СтрПлатеж, WSПрокси, СтруктураСсылок, Параметры)
	
	Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
		
		Если Параметры.ПерезаполнятьДокументы Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Иначе	
			Возврат ДокументСсылка;
		КонецЕсли;	
		
	Иначе
		
		// Новый документ
		ДокументОбъект = Документы.АСЦ_Платеж.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
		
	КонецЕсли;
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку();
	WSПрокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СтрПлатеж); 
	СтрокаXML = ЗаписьXML.Закрыть();
		
	ДокументОбъект.Дата  = СтрПлатеж.Дата;
	ДокументОбъект.НомерВЦентральнойБазе = СтрПлатеж.Номер;
	
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.ИННОрганизации = СтрПлатеж.ИННОрганизации;
	ДокументОбъект.КППОрганизации = СтрПлатеж.КППОрганизации;
	ДокументОбъект.ОрганизацияСсылка = СтрПлатеж.ОрганизацияСсылка;
	
	ДокументОбъект.СтрокаXML   = СтрокаXML; 
	ДокументОбъект.ИДДокумента = СтрПлатеж.ИДДокумента;
	ДокументОбъект.ДатаВходящегоДокумента  = СтрПлатеж.ДатаВходящегоДокумента;
	ДокументОбъект.НомерВходящегоДокумента = СтрПлатеж.НомерВходящегоДокумента;
	ДокументОбъект.БанковскийСчет          = ПолучитьБанковскийСчет(СтрПлатеж.БанковскийСчет, ДокументОбъект.Организация);
	ДокументОбъект.ВидБанковскогоДокумента = СтрПлатеж.ВидБанковскогоДокумента;
	
	ДокументОбъект.КонтрагентГУИД = СтрПлатеж.Контрагент;
	ДокументОбъект.НаименованиеКонтрагента = СтрПлатеж.НаименованиеКонтрагента;
	ДокументОбъект.ИННКонтрагента = СтрПлатеж.ИННКонтрагента;
	ДокументОбъект.КППКонтрагента = СтрПлатеж.КППКонтрагента;
	
	ДокументОбъект.ДоговорНомер  = СтрПлатеж.Договор;
	
	ДокументОбъект.СпособПлатежа = СтрПлатеж.СпособПлатежа;
	ДокументОбъект.ВидКассы      = СтрПлатеж.ВидКассы;
	ДокументОбъект.pay_tool      = СтрПлатеж.pay_tool;
	ДокументОбъект.ТочкаОплаты   = СтрПлатеж.ТочкаОплаты;
	ДокументОбъект.ВидПлатежногоДокумента = СтрПлатеж.ВидПлатежногоДокумента;
	
	Если ЗначениеЗаполнено(ДокументОбъект.pay_tool) Тогда
		 ДокументОбъект.ВидПлатежаЭквайринга = Перечисления.АСЦ_ВидыПлатежаЭквайринга.Терминал;
	Иначе
		 ДокументОбъект.ВидПлатежаЭквайринга = Перечисления.АСЦ_ВидыПлатежаЭквайринга.Касса;
	КонецЕсли;
	
	ДокументОбъект.КодВалюты    = СтрПлатеж.КодВалюты;
	ДокументОбъект.КодСтатьиДДС = СтрПлатеж.КодСтатьиДДС;
	ДокументОбъект.КодЦФО       = СтрПлатеж.КодЦФО;
	ДокументОбъект.СсылкаСч     = СтрПлатеж.СсылкаСч;
	ДокументОбъект.СчетВзаиморасчетов = СтрПлатеж.СчетВзаиморасчетов;
	ДокументОбъект.ДокументОснование  = СтрПлатеж.ДокументОснование;
	
	ДокументОбъект.СуммаДокумента    = СтрПлатеж.СуммаДокумента;
	ДокументОбъект.НазначениеПлатежа = СтрПлатеж.НазначениеПлатежа;
	ДокументОбъект.Комментарий       = СтрПлатеж.Комментарий;
	
	Для каждого СтрокаТЧ из СтрПлатеж.РасшифровкаПлатежа Цикл
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДокументСсылка = СтрокаТЧ.ДокументСсылка;
		НоваяСтрока.СсылкаСч       = СтрокаТЧ.СсылкаСч;
		НоваяСтрока.Сумма          = СтрокаТЧ.Сумма;
		НоваяСтрока.СтавкаНДС      = СтрокаТЧ.СтавкаНДС;
		НоваяСтрока.СуммаНДС       = СтрокаТЧ.СуммаНДС;
		НоваяСтрока.Договор        = СтрокаТЧ.Договор;
		НоваяСтрока.СчетВзаиморасчетов = СтрокаТЧ.СчетВзаиморасчетов;
		
	КонецЦикла;
	
	ДокументОбъект.Записать();
	
	Возврат ДокументОбъект.Ссылка;
		
КонецФункции	

