#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	//ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	//ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	
	// HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ADODB.Connection
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("ADODB.Connection", "{00000514-0000-0010-8000-00AA006D2EA4}");
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.Информация = "Загрузка документов Реализация из UNICUS";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить реализации";
	НоваяКоманда.Идентификатор = "ЗагрузитьРеализации";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	
	База = ХранилищеОбщихНастроек.Загрузить("ЗагрузкаДокументовИзUnicus", "База",, "ЗагрузкаДокументовИзUnicus");
	Если НЕ ЗначениеЗаполнено(База) Тогда
		База = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию("Юникус");
	КонецЕсли;
	
	Параметры.Вставить("База",        База);
	Параметры.Вставить("ДатаНач",     ХранилищеОбщихНастроек.Загрузить("ЗагрузкаДокументовИзUnicus", "ДатаПоследнегоДокумента",, "ЗагрузкаДокументовИзUnicus"));
	Параметры.Вставить("ДатаКон",     '2100-01-01');
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ПерезаполнятьДокументы",   Ложь);
	Параметры.Вставить("ПерезаполнятьДоговоры",    Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("ОтложенноеПроведение",     Истина);
	Параметры.Вставить("ЗагружатьДокументыОплаты", Ложь);
	Параметры.Вставить("ВариантЗагрузки",          "ОтПоследнейДаты");
	
	ЗагрузитьРеализации(Параметры);
	
КонецПроцедуры	

#КонецОбласти

#Область ПолучениеДанных

Функция ПолучитьТекстЗапроса(ДатаНач, ДатаКон, Параметры) Экспорт
	
	ТекстЗапроса =
	"SELECT * FROM (
	|SELECT
	|	tab.FULL_PREMIUM as FULL_PREMIUM,
	|	tab.PREMIUM_SUM as PREMIUM_SUM,
	|	tab.KV as KV,
	|	tab.KV_RUB as KV_RUB,
	|	CASE WHEN tab.INSUR_TYPE = 'пролонгация' 
	|		THEN 1
	|		ELSE 0
	|	END as Пролонгация,
	|	tab.TS_NEW as TS_NEW,
	|	tab.STORONNIY_CLIENT as STORONNIY_CLIENT,
	// Номенклатура
	|	tab.PRODUCT_NAME as Номенклатура,
	// ТС
	|	TRIM(tab.VIN) as VIN,
	|	tab.TRANSPORT_MARK as TRANSPORT_MARK,
	|	tab.TRANSPORT_MODEL as TRANSPORT_MODEL,
	|	TO_NUMBER(tab.TRANSPORT_OUT_DATE) as TRANSPORT_OUT_DATE,
	// Контрагент
	|	tab.EKB_ID_C as КонтрагентГУИД,
	|	tab.SUBJECT_NAME as Контрагент,
	|	TRIM(tab.INSURER_INN) as КонтрагентИНН,
	|	SUBSTR(tab.INSURER_KPP, 1, 9) as КонтрагентКПП,
	|	tab.INSURER_DOC_SERIES as КонтрагентПаспортСерия,
	|	tab.INSURER_DOC_NUMBER as КонтрагентПаспортНомер,
	|	tab.INSURER_DATE_OUT as КонтрагентПаспортДата,
	|	tab.INSURER_PLACE_OUT as КонтрагентПаспортВыдан,
	// Договор, удалим все пробелы
	// Если договор начинается не с серии, то добавляем к наименованию
	|	tab.POLICY_NUMBER as Договор,
	//|	CASE WHEN tab.POLICY_NUMBER LIKE tab.POLICY_SERIA || '%'
	//|		THEN REPLACE(tab.POLICY_NUMBER, ' ', '')
	//|		ELSE REPLACE(tab.POLICY_SERIA, ' ', '') || REPLACE(tab.POLICY_NUMBER, ' ', '')
	//|	END as Договор,
	// Даты, время отбрасываем
	// Для оплат в банке нет даты оплаты, тк нет и самой оплаты
	|	CASE WHEN tab.PAY_TYPE_CONTRACT = 'Оплата в Банке' 
	|		THEN TRUNC(tab.DATE_SIGN)
	|		ELSE TRUNC(tab.PAY_DATE)
	|	END as Дата,
	|	TRUNC(tab.DATE_SIGN) as ДоговорДата,
	|	TRUNC(tab.ACTION_BEGIN_DATE) as ДатаНачала,
	|	TRUNC(tab.ACTION_END_DATE) as СрокДействия,
	// Страховая
	|	TRIM(tab.SK_NAME) as Страховая,
	|	TRIM(tab.SK_INN) as СтраховаяИНН,
	|	SUBSTR(tab.SK_KPP, 1, 9) as СтраховаяКПП,
	// Подразделение
	|	tab.DEPARTMENT_NAME as ЦФО,
	// Банк
	|	tab.BANK as Банк,
	|	tab.BANK_BIK as БанкБИК,
	// Организация
	|	tab.AGENT as Организация,
	|	TRIM(tab.AGENT_INN) as ОрганизацияИНН,
	|	SUBSTR(tab.AGENT_KPP, 1, 9) as ОрганизацияКПП,
	|	tab.JP_ACCOUNT_PERS as СчетОрганизации,
	// Тип: Сторонний, АМ коммерч, АМ корпор, АМ бу, АМ розница
	|	tab.TSFO as ТипПродажи,
	// Тип платежа: Наличные, Безналичный, Эквайринг, Прямые расчеты с СК, Оплата в Банке
	|	CASE WHEN tab.PAY_TYPE_CONTRACT = 'Оплата в Банке' 
	|		THEN tab.PAY_TYPE_CONTRACT
	|		ELSE tab.PAY_TYPE
	|	END as ТипПлатежа,
	|	tab.PAY_AMOUNT as СуммаОплаты,
	|	CASE WHEN tab.PAY_TYPE_CONTRACT = 'Оплата в Банке' 
	|		THEN NVL(tab.DATE_UPDATE, tab.DATE_SIGN)
	|		ELSE NVL(tab.DATE_UPDATE, tab.PAY_DATE)
	|	END as ДатаИзменения,
	|	tab.PAY_ID as ID,
	|	tab.DIRECTION_CODE as IDПроекта,
	|	tab.INVOICE_ID as IDСчета
	|FROM 
	|	unicusweb.v_asc_pay_contract_hist tab
	|) tab
	|WHERE 
	|	tab.Дата IS NOT NULL
	|	AND tab.Дата >= &МинДата";
	
	Если Параметры.ВариантЗагрузки = "ПериодОплаты" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.Дата BETWEEN &ДатаНач AND &ДатаКон";
		
	ИначеЕсли Параметры.ВариантЗагрузки = "ПериодИзменений" Тогда	
		ТекстЗапроса = ТекстЗапроса + "
		|	AND NVL(tab.ДатаИзменения, tab.Дата) BETWEEN &ДатаНач AND &ДатаКон";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	AND (tab.ДатаИзменения BETWEEN &ДатаНач AND &ДатаКон 
		|     OR tab.Дата BETWEEN &ДатаНач AND &ДатаКон)";
	КонецЕсли;	
		
	Если Параметры.Свойство("ОтборДоговор") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND UPPER(tab.Договор) = '" + ВРег(СокрЛП(Параметры.ОтборДоговор)) + "'";
	КонецЕсли;	
		
	Если Параметры.Свойство("ОтборVIN") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND UPPER(tab.VIN) = '" + ВРег(СокрЛП(Параметры.ОтборVIN)) + "'";
	КонецЕсли;	
	
	Если Параметры.Свойство("ОтборID") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.ID = " + Формат(Параметры.ОтборID, "ЧГ=0") + "";
	КонецЕсли;	
	
	Если Параметры.Свойство("ОтборТипПлатежа") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.ТипПлатежа = '" + Параметры.ОтборТипПлатежа + "'";
	КонецЕсли;	
	
	Если Параметры.Свойство("ОтборОрганизация") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ОтборОрганизация, "ИНН,КПП");
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.ОрганизацияИНН = '" + Реквизиты.ИНН + "'";
		
		Если ЗначениеЗаполнено(Реквизиты.КПП) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	AND tab.ОрганизацияКПП = '" + Реквизиты.КПП + "'";
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если Параметры.Свойство("ИмяТаблицы") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "unicusweb.v_asc_pay_contract_hist", Параметры.ИмяТаблицы);
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ORDER BY
	|	ДатаИзменения, СуммаОплаты";
	
	// Отладочные отборы
	//Доп отбор для тестирования
	// например AND rownum <= 10  - выбираем только первые 10 записей
	Если Параметры.Свойство("Тест_КоличествоСтрок") Тогда
		
		ТекстЗапроса =  
		"SELECT
		| *
		|FROM (
		|" + ТекстЗапроса + "
		|)
		|WHERE
		|	rownum <= " + Формат(Параметры.Тест_КоличествоСтрок, "ЧГ=0");
		
	КонецЕсли;	
	
	МинДата = '2018-01-01';
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МинДата", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(МинДата, "Oracle"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "Oracle"));
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьТаблицуДанныхРеализации(База, ДатаНач, ДатаКон, Параметры ) Экспорт
	
	ТекстЗапроса = ПолучитьТекстЗапроса(ДатаНач, ДатаКон, Параметры);
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	Возврат АСЦ_ОбщийМодуль.ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
Конецфункции	

Функция ПолучитьТаблицуДанныхРеализацииТест(Знач Макет = Неопределено) Экспорт
	
	// Для тестирования разных ситуаций подготовим таблицу вручную
	Если Макет = Неопределено Тогда
		Макет = ПолучитьМакет("ТестовыеДанные");
	КонецЕсли;	
	
	ТипыКолонок = Новый Соответствие;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Счетчик = 2 По Макет.ШиринаТаблицы Цикл
		
		ТипСтр = Макет.Область(1, Счетчик).Текст;
		Имя = Макет.Область(2, Счетчик).Текст;
		Если ТипСтр = "Дата" Тогда
			Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ИначеЕсли ТипСтр = "Число" Тогда	
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Null"));
			Массив.Добавить(Тип("Число"));
			
			Тип = Новый ОписаниеТипов(Массив);
			
		Иначе
			Тип = Неопределено;
		КонецЕсли;
		
		ТипыКолонок.Вставить(Имя, ТипСтр);
		
		ТаблицаЗначений.Колонки.Добавить(Имя, Тип);
		
	КонецЦикла;	
	
	Для СчетчикСтрок = 3 По Макет.ВысотаТаблицы Цикл
		
		// В первой колонке пометка
		Пометка = Макет.Область(СчетчикСтрок, 1).Текст;
		Если НЕ ЗначениеЗаполнено(Пометка) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		Для каждого Колонка из ТаблицаЗначений.Колонки Цикл
			
			СчетчикКолонок = ТаблицаЗначений.Колонки.Индекс(Колонка) + 2;
			Значение = Макет.Область(СчетчикСтрок, СчетчикКолонок).Текст;
			
			Если ТипыКолонок[Колонка.Имя] = "Дата" Тогда
				НоваяСтрока[Колонка.Имя] = Дата(Значение);
				
			ИначеЕсли ТипыКолонок[Колонка.Имя] = "Число" Тогда
				
				Если ЗначениеЗаполнено(Значение) Тогда
					НоваяСтрока[Колонка.Имя] = Число(Значение);
				Иначе	
					НоваяСтрока[Колонка.Имя] = Null;
				КонецЕсли;	
				
			Иначе
				НоваяСтрока[Колонка.Имя] = Значение;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТаблицаЗначений;
	
Конецфункции	

#КонецОбласти

#Область СлужебныеФункции

Функция ЕстьNULL(Парам, Значение)
	Возврат ?(ЗначениеЗаполнено(Парам), Парам, Значение);
КонецФункции	

Функция вДату(Парам)
	
	Массив = СтрРазделить(Парам, ".");
	Возврат Дата(Число(Массив[2]), Число(Массив[1]), Число(Массив[0]));
	
КонецФункции	

Функция ЗаписатьДокумент(ДокОбъект, Режим, Сообщать = Истина, ОтложенноеПроведение = Ложь)
	
	Результат = Истина;	
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;	
	
	// тк некуда записывать пропущенные документы, то будем просто останавливать обработку
	Если ОтложенноеПроведение Тогда
		
		НачатьТранзакцию();
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Запись = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
		Запись.Документ      = ДокОбъект.Ссылка;
		Запись.УзелОбмена    = ПланыОбмена.Полный.ЭтотУзел();
		Запись.ДатаДокумента = ДокОбъект.Дата;
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Иначе	
		ДокОбъект.Записать(Режим);
	КонецЕсли;	
	
	Если Сообщать Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект);
		Сообщение.КлючДанных = ДокОбъект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ЗначенияОтличаются(Структруа1, Структура2)
	
	Для каждого КлючИЗначение Из Структруа1 Цикл
		
		Если КлючИЗначение.Значение <> Структура2[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Процедура ДобавитьИзменениеОбъекта(ДокументСсылка, База)
	
	Если НЕ ЗначениеЗаполнено(База) Тогда
		Возврат;
	КонецЕсли;	
	
	Запись = РегистрыСведений.ИзмененныеОбъектыДляВыгрузки.СоздатьМенеджерЗаписи();
	Запись.ИспользуемаяИБ        = База;
	Запись.НастройкаСоответствия = "";
	Запись.Элемент               = ДокументСсылка;
	
	Запись.Записать();
	
КонецПроцедуры	

Функция ПолучитьДатуЗапретаИзменения(Организация, Кэш)
	
	ДатаЗапрета = Кэш[Организация];
	Если ДатаЗапрета <> Неопределено Тогда
		Возврат ДатаЗапрета;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК Порядок,
	|	КОНЕЦПЕРИОДА(ДатыЗапретаИзменения.ДатаЗапрета, ДЕНЬ) КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Объект = &Организация
	|	И ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	КОНЕЦПЕРИОДА(ДатыЗапретаИзменения.ДатаЗапрета, ДЕНЬ)
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Объект = ЗНАЧЕНИЕ(ПланВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка)
	|	И ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДатаЗапрета = '0001-01-01';
	Иначе
		ДатаЗапрета = Результат.Выгрузить()[0].ДатаЗапрета;
	КонецЕсли;	
	
	Кэш.Вставить(Организация, ДатаЗапрета);
	Возврат ДатаЗапрета;
	
КонецФункции

Процедура СохранитьДатуПоследнегоДокумента(ДатаИзменения, ТипПлатежа)
	
	Если ТипПлатежа = "Оплата в Банке" Тогда
		Возврат;
	КонецЕсли;	
	
	ХранилищеОбщихНастроек.Сохранить("ЗагрузкаДокументовИзUnicus", "ДатаПоследнегоДокумента", ДатаИзменения,, "ЗагрузкаДокументовИзUnicus");
	
КонецПроцедуры	

Функция ДействиеПоДатеЗапрета(Дата, ДатаИзменения, Организация, Кэш)
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаЗапрета", ПолучитьДатуЗапретаИзменения(Организация, Кэш));
	
	Если Дата > Результат.ДатаЗапрета Тогда
		//_____[ДЗ]____Д___ДИ___
		Результат.Вставить("Имя", "Редактирование");
	Иначе	
	
		Если ДатаИзменения > Результат.ДатаЗапрета Тогда
			//_____Д____[ДЗ]___ДИ___
			Результат.Вставить("Имя", "Корректировка");
		Иначе
			//_____Д____ДИ___[ДЗ]___
			Результат.Вставить("Имя", "ИзменениеЗакрытогоПериода");
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти

#Область ПоискДанных

// Сторно - это документ корректировки, у которго суммы = 0
Функция НайтиДокументСторно(ДокументРТУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументРеализации", ДокументРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокументРеализации
	|	И Док.СуммаДокумента = 0
	|	И НЕ Док.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументСсылка = Результат.Выгрузить()[0][0];
	Иначе
		ДокументСсылка = Неопределено;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции	

// Корректировка - это документ корректировки, у которго суммы <> 0
Функция НайтиДокументКорректировки(ДокументРТУ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументРеализации", ДокументРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|ГДЕ
	|	Док.ДокументРеализации = &ДокументРеализации
	|	И Док.СуммаДокумента <> 0
	|	И НЕ Док.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументСсылка = Результат.Выгрузить()[0][0];
	Иначе
		ДокументСсылка = Неопределено;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция НайтиДокументРТУПоДоговору(Договор)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", Договор);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументСсылка = Результат.Выгрузить()[0][0];
	Иначе
		ДокументСсылка = Неопределено;
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции	

Функция ПолучитьСуммы(Данные)
	
	// Возьмем КВ пропорционально оплате
	Результат = Новый Структура;
	
	// В некоторых полисах PREMIUM_SUM не заполнено
	// пример 001АТ-17/0015125
	Результат.Вставить("ПолнаяСумма", Данные.PREMIUM_SUM);
	Если НЕ ЗначениеЗаполнено(Результат.ПолнаяСумма) Тогда
		Результат.ПолнаяСумма = Данные.FULL_PREMIUM;
	КонецЕсли;	
	
	Данные.KV_RUB      = ЕстьNULL(Данные.KV_RUB, 0);
	Данные.СуммаОплаты = ЕстьNULL(Данные.СуммаОплаты, 0);
	
	Если Данные.ТипПлатежа = "Оплата в Банке" Тогда
		Данные.СуммаОплаты = Результат.ПолнаяСумма;
	КонецЕсли;	
			
	// Расчитаем пропорционально оплате
	//Результат.Вставить("СуммаВыручка",  Окр(Данные.СуммаОплаты * Данные.KV_RUB / Результат.ПолнаяСумма, 2));
	
	// Сумма КВ уже расчитана
	Результат.Вставить("СуммаВыручка",  Мин(Данные.KV_RUB, Данные.СуммаОплаты));
	Результат.Вставить("СуммаАгентсие", Данные.СуммаОплаты - Результат.СуммаВыручка);
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьСтруктуруСсылок(Данные, Параметры, База, КэшДанных, КэшСообщений) Экспорт
	
	СтруктураСсылок = Новый Структура;
	
	// Организация
	Данные.ОрганизацияИНН = ЕстьNULL(Данные.ОрганизацияИНН, "");
	Данные.ОрганизацияКПП = ЕстьNULL(Данные.ОрганизацияКПП, "");
	
	СтруктураСсылок.Вставить("Организация", АСЦ_ПоискОбъектов.ПолучитьОрганизациюПоИНН(Данные.ОрганизацияИНН, Данные.ОрганизацияКПП, КэшДанных.Организация));
	
	Если НЕ ЗначениеЗаполнено(СтруктураСсылок.Организация) Тогда
		
		Если КэшСообщений.Организация[Данные.ОрганизацияИНН + "/" + Данные.ОрганизацияКПП] = Неопределено Тогда
			
			ТекстОшибки = "Не найдена организация: " + ЕстьNULL(Данные.Организация, "") + ", ИНН: " + Данные.ОрганизацияИНН + ", КПП: " + Данные.ОрганизацияКПП + ", id: " + Данные.id;
			ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
			Сообщить(ТекстОшибки);
			КэшСообщений.Организация.Вставить(Данные.ОрганизацияИНН + "/" + Данные.ОрганизацияКПП, Истина);
			
		КонецЕсли;
		
		Возврат СтруктураСсылок;
		
	КонецЕсли;	
	
	// ЦФО
	СтруктураСсылок.Вставить("ЦФО",        АСЦ_ПоискОбъектов.ПолучитьОбъектПоСоотвествию(Данные.ЦФО, Параметры.НастройкаДепартаменты, База, КэшДанных.Департамент));
	СтруктураСсылок.Вставить("БазаАстра",  АСЦ_ПоискОбъектов.ПолучитьОсновнуюБазу(СтруктураСсылок.ЦФО, КэшДанных.БазаАстра));
	
	// Контрагент
	СтруктураСсылок.Вставить("Контрагент", АСЦ_ПоискОбъектов.ПолучитьКонтрагента(Данные, Параметры, Ложь));
	
	// Номенклатура
	НаименованиеНоменклатуры = ПолучитьНаименованиеНоменклатуры(Данные.Номенклатура, Данные.Пролонгация, Данные.ТипПродажи, Данные.TS_NEW);
	СтруктураСсылок.Вставить("Номенклатура", ПолучитьНоменклатуру(НаименованиеНоменклатуры, Данные.Номенклатура, КэшДанных.Номенклатура));
	
	// Страховая
	ТекстОшибки = "";
	СтруктураСсылок.Вставить("СК", АСЦ_ПоискОбъектов.НайтиКонтрагента(Данные.Страховая, Данные.СтраховаяИНН, Данные.СтраховаяКПП, ТекстОшибки));
	Если НЕ ЗначениеЗаполнено(СтруктураСсылок.СК) Тогда
		
		СпрОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		СпрОбъект.Родитель     = Справочники.Контрагенты.НайтиПоНаименованию("Страховые");
		СпрОбъект.Наименование = Данные.Страховая;
		СпрОбъект.ИНН          = Данные.СтраховаяИНН;
		СпрОбъект.КПП          = Данные.СтраховаяКПП;
		СпрОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		СпрОбъект.СтранаРегистрации         = Справочники.СтраныМира.Россия;
		СпрОбъект.Записать();
		
		СтруктураСсылок.СК = СпрОбъект.Ссылка;
		
		Текст = "Создана СК: " + Данные.Страховая + ", ИНН: " + Данные.СтраховаяИНН + ", КПП: " + Данные.СтраховаяКПП;
		
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Информация, , , Текст);
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.Договор) Тогда
		Данные.Договор = "б/н";
	КонецЕсли;	
	
	// Договор контрагента
	ДанныеДоговора = Новый Структура;
	ДанныеДоговора.Вставить("Контрагент",     СтруктураСсылок.Контрагент);
	ДанныеДоговора.Вставить("Организация",    СтруктураСсылок.Организация);
	
	ДанныеДоговора.Вставить("Наименование",   СтрЗаменить(СокрЛП(Данные.Договор), Символы.НПП, " "));
	ДанныеДоговора.Вставить("ЦФО",            СтруктураСсылок.ЦФО);
	ДанныеДоговора.Вставить("ВидДоговораУХ",  Перечисления.ВидыДоговоровКонтрагентовУХ.СПокупателем);
	ДанныеДоговора.Вставить("Дата",           Данные.ДоговорДата);
	ДанныеДоговора.Вставить("ДатаНачала",     Данные.ДатаНачала);
	ДанныеДоговора.Вставить("СрокДействия",   Данные.СрокДействия);
	ДанныеДоговора.Вставить("СтатьяДДС",      Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Поступление от реализации финансовых услуг"));
	
	Если Параметры.Свойство("ДоговорДопРеквизиты") Тогда
		ДополнительныеРеквизиты = Новый Соответствие;
		ДополнительныеРеквизиты.Вставить(Параметры.ДоговорДопРеквизиты.Страховая, СтруктураСсылок.СК);
		ДополнительныеРеквизиты.Вставить(Параметры.ДоговорДопРеквизиты.Банк,      АСЦ_ПоискОбъектов.НайтиБанк(Данные.БанкБИК));
		ДанныеДоговора.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;	
	
	СтатьяДоходов = АСЦ_ПоискОбъектов.ПолучитьОбъектПоСоотвествию(НаименованиеНоменклатуры, Параметры.НастройкаСтатьиДоходов, База, КэшДанных.СтатьиДоходов);
	Если НЕ ЗначениеЗаполнено(СтатьяДоходов) Тогда
		
		Если Найти(НаименованиеНоменклатуры, ", пролонгация") > 0 Тогда
			СтатьяДоходов = Справочники.СтатьиДоходов.НайтиПоКоду("01713");  // Прочие, пролонгация
		Иначе
			СтатьяДоходов = Справочники.СтатьиДоходов.НайтиПоКоду("01715");  // Прочие
		КонецЕсли;	
		
	Иначе	
		ДанныеДоговора.Вставить("СтатьяДоходов",  СтатьяДоходов);
	КонецЕсли;	
	
	СтруктураСсылок.Вставить("СтатьяДоходов", СтатьяДоходов);
	СтруктураСсылок.Вставить("Договор", АСЦ_ПоискОбъектов.ПолучитьДоговор(ДанныеДоговора, Параметры.ПерезаполнятьДоговоры));
	
	// Договор СК
	Если ЗначениеЗаполнено(СтруктураСсылок.СК) Тогда
		
		ДанныеДоговораСК = Новый Структура;
		ДанныеДоговораСК.Вставить("Контрагент",    СтруктураСсылок.СК);
		ДанныеДоговораСК.Вставить("Организация",   СтруктураСсылок.Организация);
		ДанныеДоговораСК.Вставить("Наименование",  "Основной договор");
		ДанныеДоговораСК.Вставить("ВидДоговораУХ", Перечисления.ВидыДоговоровКонтрагентовУХ.СКомитентом);
		ДанныеДоговораСК.Вставить("СтатьяДДС",     Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплаты по страховой деятельности"));
		
		СтруктураСсылок.Вставить("ДоговорСК", АСЦ_ПоискОбъектов.ПолучитьДоговор(ДанныеДоговораСК, Параметры.ПерезаполнятьДоговоры, Истина));
		
	КонецЕсли;
	
	СтруктураСсылок.Вставить("ТипПлатежа", Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Данные.ТипПлатежа, Истина,, Параметры.СвойствоТипПлатежа));
	
	Возврат СтруктураСсылок;
	
КонецФункции	

Функция ПолучитьНаименованиеНоменклатуры(Наименование, Пролонгация, ТипПродажи, TS_NEW)
	
	НаименованиеНоменклатуры = Наименование;
	Если Пролонгация = 1 Тогда
		Возврат НаименованиеНоменклатуры + ", пролонгация";
	КонецЕсли;
	
	Если ТипПродажи = "-" Тогда
		ТипПродажи = "";
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ТипПродажи) Тогда
		
		Если TS_NEW = 1 Тогда
			ТипПродажи = "АМ розница";
		Иначе
			ТипПродажи = "АМ бу.";
		Конецесли;	
		
	КонецЕсли;
	
	НаименованиеНоменклатуры = НаименованиеНоменклатуры + ", " + ТипПродажи;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции	

Функция ПолучитьНоменклатуру(Наименование, НомГруппа, Кэш)
	
	СпрСсылка = Кэш[Наименование];
	Если СпрСсылка <> Неопределено Тогда
		Возврат СпрСсылка;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Наименование", Наименование);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Спр
	|ГДЕ
	|	НЕ Спр.ЭтоГруппа
	|	И НЕ Спр.ПометкаУдаления
	|	И Спр.Наименование = &Наименование";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		СпрСсылка = Результат.Выгрузить()[0][0];
	Иначе
		
		СпрОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		СпрОбъект.Наименование    =  Наименование;
		СпрОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги");
		СпрОбъект.Услуга          = Истина;
		СпрОбъект.Родитель        = Справочники.Номенклатура.НайтиПоНаименованию("Страховки");
		СпрОбъект.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(НомГруппа);
		СпрОбъект.СтавкаНДС       = Перечисления.СтавкиНДС.БезНДС;
		СпрОбъект.Записать();
		
		СпрСсылка = СпрОбъект.Ссылка;
		
	КонецЕсли;	
	
	Кэш.Вставить(Наименование, СпрСсылка);
	Возврат СпрСсылка;
	
КонецФункции

Функция ПолучитьВидОплаты(Данные, Параметры, СтруктрураСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", СтруктрураСсылок.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|	И Спр.Организация = &Организация";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе	
		
		СпрОбъект = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
		СпрОбъект.Наименование = "Оплата картой";
		СпрОбъект.Организация  = СтруктрураСсылок.Организация;
		СпрОбъект.ТипОплаты    = Перечисления.ТипыОплат.ПлатежнаяКарта;
		СпрОбъект.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;          //57.03
		СпрОбъект.Контрагент   = АСЦ_ПоискОбъектов.НайтиКонтрагента("", "7734202860", "770801001"); //МКБ
		
		ДанныеДоговора = Новый Структура;
		ДанныеДоговора.Вставить("Организация",   СтруктрураСсылок.Организация);
		ДанныеДоговора.Вставить("Контрагент",    СпрОбъект.Контрагент);
		ДанныеДоговора.Вставить("Наименование",  "Договор эквайринга");
		ДанныеДоговора.Вставить("ВидДоговораУХ", Перечисления.ВидыДоговоровКонтрагентовУХ.Прочее);
		
		СпрОбъект.ДоговорКонтрагента = АСЦ_ПоискОбъектов.ПолучитьДоговор(ДанныеДоговора, Ложь, Ложь, Ложь);
		СпрОбъект.Записать();
		
		Возврат СпрОбъект.Ссылка;
		
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьСчетОрганизации(Организация, НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("НомерСчета",  НомерСчета);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК Спр
	|ГДЕ
	|	Спр.НомерСчета = &НомерСчета
	|	И Спр.Владелец = &Организация
	|	И НЕ Спр.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтчетПосредника(ДокументСсылка)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Документы.АСЦ_ОтчетПосредника.ПустаяСсылка();
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Документ", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ОтчетПосредника.Продажи КАК Док
	|ГДЕ
	|	Док.Документ = &Документ
	|	И Док.Ссылка.Проведен";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Документы.АСЦ_ОтчетПосредника.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РеализацииОбщие

Функция ПолучитьДанныеДокументаРТУ(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.ОсновнойЦФО КАК ЦФО,
	|	Док.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Номенклатура, ДокУслуги.Номенклатура) КАК Номенклатура,
	|	ДокАгентскиеУслуги.Номенклатура КАК НоменклатураАгентскиеУслуги,
	|	ДокАгентскиеУслуги.Контрагент КАК Страховая,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Сумма, 0) КАК СуммаАгенскиеУслуги,
	|	ДокУслуги.Номенклатура КАК НоменклатураУслуги,
	|	ЕСТЬNULL(ДокУслуги.Сумма, 0) КАК СуммаУслуги,
	|	ДопСведенияТипПлатежа.Значение КАК ТипПлатежа
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК ДокУслуги
	|		ПО (ДокУслуги.Ссылка = Док.Ссылка)
	|			И (ДокУслуги.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК ДокАгентскиеУслуги
	|		ПО (ДокАгентскиеУслуги.Ссылка = Док.Ссылка)
	|			И (ДокАгентскиеУслуги.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведенияТипПлатежа
	|		ПО Док.Ссылка = ДопСведенияТипПлатежа.Объект
	|			И (ДопСведенияТипПлатежа.Свойство.Имя = ""ТипПлатежа"")
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции	

Функция ПолучитьДанныеДокументаКорректировка(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.ОсновнойЦФО КАК ЦФО,
	|	Док.СуммаДокумента КАК Сумма,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Номенклатура, ДокУслуги.Номенклатура) КАК Номенклатура,
	|	ДокАгентскиеУслуги.Номенклатура КАК НоменклатураАгенскиеУслуги,
	|	ДокАгентскиеУслуги.Контрагент КАК Страховая,
	|	ЕСТЬNULL(ДокАгентскиеУслуги.Сумма, 0) КАК СуммаАгенскиеУслуги,
	|	ДокУслуги.Номенклатура КАК НоменклатураУслуги,
	|	ЕСТЬNULL(ДокУслуги.Сумма, 0) КАК СуммаУслуги
	|ИЗ
	|	Документ.КорректировкаРеализации КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Услуги КАК ДокУслуги
	|		ПО (ДокУслуги.Ссылка = Док.Ссылка)
	|			И (ДокУслуги.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.АгентскиеУслуги КАК ДокАгентскиеУслуги
	|		ПО (ДокАгентскиеУслуги.Ссылка = Док.Ссылка)
	|			И (ДокАгентскиеУслуги.НомерСтроки = 1)
	|ГДЕ
	|	Док.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции

Функция ИзменилисьСуммы(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
	
	// Корректировку можно делать только по суммам
	Если Данные.СуммаОплаты <> ДанныеДокумента.Сумма Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ДанныеСуммы.СуммаВыручка <> ДанныеДокумента.СуммаУслуги Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ИзменилисьРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
	
	Если СтруктураСсылок.Договор <> ДанныеДокумента.Договор Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если СтруктураСсылок.Организация <> ДанныеДокумента.Организация Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если СтруктураСсылок.ЦФО <> ДанныеДокумента.ЦФО Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураСсылок.Номенклатура <> ДанныеДокумента.Номенклатура Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если СтруктураСсылок.ТипПлатежа <> ДанныеДокумента.ТипПлатежа Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ИзменилисьПрочиеРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.НоменклатураУслуги)
		И СтруктураСсылок.Номенклатура <> ДанныеДокумента.НоменклатураУслуги Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеДокумента.НоменклатураАгентскиеУслуги)
		И СтруктураСсылок.Номенклатура <> ДанныеДокумента.НоменклатураАгентскиеУслуги Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ИзменитьЦФО(ДокументСсылка, СтруктураСсылок, Параметры)
	
	НачатьТранзакцию();
	
	ДоговорОбъект = СтруктураСсылок.Договор.ПолучитьОбъект();
	СтараяБазаАстра = АСЦ_ПоискОбъектов.ПолучитьОсновнуюБазу(ДоговорОбъект.ОсновнойЦФО);
	
	ДоговорОбъект.ОсновнойЦФО = СтруктураСсылок.ЦФО;
	ДоговорОбъект.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументСсылка;
	Запись.Свойство = Параметры.СвойствоДЦ;
	Запись.Значение = СтруктураСсылок.ЦФО;
	Запись.Записать();
	
	ДобавитьИзменениеОбъекта(ДокументСсылка, СтруктураСсылок.БазаАстра);
	
	// Для удаления в старой базе
	Если СтараяБазаАстра <> СтруктураСсылок.БазаАстра Тогда
		ДобавитьИзменениеОбъекта(ДокументСсылка, СтараяБазаАстра);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецФункции	

#КонецОбласти

#Область Реализации

Процедура ЗагрузитьРеализации(Параметры, АдресРезультата = Неопределено, Знач ТаблицаДанных = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	Если НЕ ЗначениеЗаполнено(ДатаНач) Тогда
		ДатаНач = '2018-01-01';
	КонецЕсли;	
	ДатаКон     = Параметры.ДатаКон;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	ПерезаполнятьДоговоры  = Параметры.ПерезаполнятьДоговоры;
	ВыводитьСообщения      = Параметры.ВыводитьСообщения;
	ОтложенноеПроведение   = Параметры.ОтложенноеПроведение;
	ЗагружатьДокументыОплаты = Параметры.ЗагружатьДокументыОплаты;
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("База",                   База);
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("НастройкаДепартаменты",  Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("DEPARTMENTS <-> Организации",,, ТипБазы));
	ДопПараметры.Вставить("НастройкаСтатьиДоходов", Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("Номенклатура <-> Статьи доходов",,, ТипБазы));
	ДопПараметры.Вставить("НастройкаКонтрагенты",   Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("EKB_ID_C <-> Контрагенты",,, ТипБазы));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	ДопПараметры.Вставить("ПерезаполнятьДоговоры",  ПерезаполнятьДоговоры);
	ДопПараметры.Вставить("ВыводитьСообщения",      ВыводитьСообщения);
	ДопПараметры.Вставить("ОтложенноеПроведение",   ОтложенноеПроведение);
	ДопПараметры.Вставить("ЗагружатьДокументыОплаты", ЗагружатьДокументыОплаты);
	
	ДопПараметры.Вставить("СвойствоID",           ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Unicus"));
	ДопПараметры.Вставить("СвойствоДЦ",           ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ДЦ"));
	ДопПараметры.Вставить("СвойствоIDПроекта",    ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Проекта"));
	ДопПараметры.Вставить("СвойствоIDСчета",      ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Счета"));
	ДопПараметры.Вставить("СвойствоVIN",          ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "VIN"));
	ДопПараметры.Вставить("СвойствоНоменклатура", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Номенклатура"));
	ДопПараметры.Вставить("СвойствоТипПлатежа",   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ТипПлатежа"));
	
	ДоговорДопРеквизиты = Новый Структура;
	ДоговорДопРеквизиты.Вставить("Страховая", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Страховая"));
	ДоговорДопРеквизиты.Вставить("Банк",      ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "Банк"));
	
	ДопПараметры.Вставить("ДоговорДопРеквизиты", ДоговорДопРеквизиты);
	ДлительныеОперации.СообщитьПрогресс(0, "Получение данных из Unicus");
	
	Если ТаблицаДанных = Неопределено Тогда
		ТаблицаДанных = ПолучитьТаблицуДанныхРеализации(База, ДатаНач, ДатаКон, Параметры);
		// Заранее подготовленные данные, для отладки создания документов
		//ТаблицаДанных = ПолучитьТаблицуДанныхРеализацииТест();
	КонецЕсли;	
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Департамент",  Новый Соответствие);
	КэшДанных.Вставить("Страховая",    Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	КэшДанных.Вставить("СведенияОНоменклатуре", Новый Соответствие);
	КэшДанных.Вставить("СтатьиДоходов", Новый Соответствие);
	КэшДанных.Вставить("ДатыЗапрета",   Новый Соответствие);
	КэшДанных.Вставить("БазаАстра",     Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",   Новый Соответствие);
	КэшСообщений.Вставить("Страховая",     Новый Соответствие);
	КэшСообщений.Вставить("Департамент",   Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура",  Новый Соответствие);
	КэшСообщений.Вставить("СтатьяДоходов", Новый Соответствие);
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		СтруктураСсылок = ПолучитьСтруктуруСсылок(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений);
		Если НЕ ЗначениеЗаполнено(СтруктураСсылок.Организация) Тогда
			Продолжить;
		КонецЕсли;	
		
		ДокРТУ = СоздатьДокументРТУ_Корректировка_Сторно(СтрокаТЗ, ДопПараметры, СтруктураСсылок, КэшДанных);
		
		Если ЗагружатьДокументыОплаты = Истина Тогда
			СоздатьДокументОплаты(СтрокаТЗ, ДопПараметры, СтруктураСсылок, ДокРТУ);
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "Загружено " + Счетчик + " из " + Всего);
			
	КонецЦикла;	
	
КонецПроцедуры	

Функция СоздатьДокументРТУ_Корректировка_Сторно(Данные, Параметры, СтруктураСсылок, КэшДанных) Экспорт
	
	Если ЗначениеЗаполнено(Данные.ID) Тогда
		ДокументРТУ = АСЦ_ПоискОбъектов.НайтиДокументПоСвойству(Данные.ID, Параметры.СвойствоID, "РеализацияТоваровУслуг");
	Иначе
		ДокументРТУ = НайтиДокументРТУПоДоговору(СтруктураСсылок.Договор);
	КонецЕсли;	
	ОтчетПосредника = ПолучитьОтчетПосредника(ДокументРТУ);
	
	// Уже сформирован отчет поредника, не редактируем
	Если ЗначениеЗаполнено(ОтчетПосредника) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументРТУ) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРТУ, "Дата");
		Данные.Дата = Реквизиты.Дата;
		
	КонецЕсли;	
	
	Действие = ДействиеПоДатеЗапрета(Данные.Дата, Данные.ДатаИзменения, СтруктураСсылок.Организация, КэшДанных.ДатыЗапрета);
	// В закрытом периоде уже ничего сделать не можем
	Если Действие.Имя = "ИзменениеЗакрытогоПериода" Тогда
		
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Ошибка, , ДокументРТУ, "Не загружен документ: " + Данные.ID + ", дата изменения : " + Данные.ДатаИзменения + " меньше даты запрета: " + Действие.ДатаЗапрета);
		Возврат Неопределено;	
		
	КонецЕсли;		
	
	Если Действие.Имя = "Редактирование" Тогда	
		
		// В открытом периоде сторно не делаем,
		// просто редактируем документ
		ДокументСсылка = ЗаполнитьДокументРТУ(ДокументРТУ, Данные, Параметры, СтруктураСсылок);
		
	ИначеЕсли Действие.Имя = "Корректировка" Тогда
		
		// Документа основания нет
		Если НЕ ЗначениеЗаполнено(ДокументРТУ) Тогда
			ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
				УровеньЖурналаРегистрации.Ошибка, , ДокументРТУ, "Не загружен документ: " + Данные.ID + ", дата изменения : " + Данные.ДатаИзменения + 
				Символы.ПС + "Попытка откорректировать документ, который не был загружен в закрытом преиоде");
			Возврат Неопределено;
		Иначе	
			
			ДокументКорректировки = НайтиДокументКорректировки(ДокументРТУ);
			Если ЗначениеЗаполнено(ДокументКорректировки) Тогда
				//TODO: Обновить корректиировку, если задан параметр
			Иначе
				
				ДанныеДокументаРТУ = ПолучитьДанныеДокументаРТУ(ДокументРТУ);
				ДанныеСуммы = ПолучитьСуммы(Данные);
				Если НЕ ЗначениеЗаполнено(Данные.СуммаОплаты) Тогда
					
					// Если дата изменения меньше даты РТУ, то значит этот документ сторно
					// уже создан, а также создан новый корректировочный РТУ
					Если Данные.ДатаИзменения > КонецДня(ДокументРТУ.Дата) Тогда
						ДокументСсылка = ЗаполнитьДокументСторно(ДокументРТУ, Данные, Параметры, СтруктураСсылок);
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
				Иначе	
				
					// Сторно + Новая РТУ
					Если ИзменилисьРеквизиты(ДанныеДокументаРТУ, Данные, ДанныеСуммы, СтруктураСсылок)
					// Для сумм тоже будем делать Строно+РТУ, чтобы не менять алгороитм Отчета посредника
					ИЛИ ИзменилисьСуммы(ДанныеДокументаРТУ, Данные, ДанныеСуммы, СтруктураСсылок)
					Тогда
					
						// Если уже был создан документ сторно, то второй не будет создан
						ДокКорректировка = ЗаполнитьДокументСторно(ДокументРТУ, Данные, Параметры, СтруктураСсылок);
						
						Данные.Дата = Данные.ДатаИзменения;
						ДокументСсылка = ЗаполнитьДокументРТУ(Неопределено, Данные, Параметры, СтруктураСсылок, ДокументРТУ);
						
					//// Корректировка
					//ИначеЕсли ИзменилисьСуммы(ДанныеДокументаРТУ, Данные, ДанныеСуммы, СтруктураСсылок) Тогда
					//	
					//	ДокументСсылка = ЗаполнитьДокументКорректировка(ДокументРТУ, Данные, ДанныеСуммы, Параметры, СтруктураСсылок);
					//	
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			
		КонецЕсли;	
			
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция ЗаполнитьДокументРТУ(ДокументСсылка, Данные, Параметры, СтруктураСсылок, Основание = Неопределено)
	
	ДанныеСуммы = ПолучитьСуммы(Данные);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДанныеДокумента = ПолучитьДанныеДокументаРТУ(ДокументСсылка);
	
		// Изменилось ЦФО,
		// тк ЦФО в договоре, то меняем сразу и помечаем к выгрузке
		Если ДанныеДокумента.ЦФО <> СтруктураСсылок.ЦФО Тогда
			ИзменитьЦФО(ДокументСсылка, СтруктураСсылок, Параметры);	
		КонецЕсли;
		
		Если ИзменилисьСуммы(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
			ИЛИ ИзменилисьРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок)
			ИЛИ ИзменилисьПрочиеРеквизиты(ДанныеДокумента, Данные, ДанныеСуммы, СтруктураСсылок) Тогда
			
			// Редактирование документа
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			
		// документ не изменился
		Иначе
		
			Если Параметры.ПерезаполнятьДокументы Тогда
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Иначе	
				Возврат ДокументСсылка;
			КонецЕсли;	
			
		КонецЕсли;	
		
	Иначе
		
		// Новый документ
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		
	КонецЕсли;	
	
	ВремяДокумента = Документы.РеализацияТоваровУслуг.ВремяДокументаПоУмолчанию();
	Если Основание <> Неопределено Тогда
		ДокументОбъект.ДокументОснование = Основание;
	КонецЕсли;	
	
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.Дата        = НачалоДня(Данные.Дата) + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	ДокументОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = СтруктураСсылок.Договор;
	
	ДокументОбъект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДокументОбъект.ВидОперации     = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками; //76.05
	ДокументОбъект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.АгентскиеУслуги.Очистить();
	
	Содержание = ЕстьNULL(Данные.VIN, "") + ", " + ЕстьNULL(Данные.TRANSPORT_MARK, "") + " " + ЕстьNULL(Данные.TRANSPORT_MODEL, "");

	// При прямх расчетах деньги проходят мимо нас, 
	// поэтому проводок никаких не должно быть
	Если Данные.ТипПлатежа = "Прямые расчеты с СК"
		ИЛИ Данные.ТипПлатежа = "Оплата в Банке"
		Тогда
		ДокументОбъект.РучнаяКорректировка = Истина;	
	Иначе	
		ДокументОбъект.РучнаяКорректировка = Ложь;	
	КонецЕсли;	
	
	// Услуги
	Если ДанныеСуммы.СуммаВыручка <> 0 Тогда
		
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = СтруктураСсылок.Номенклатура;
		НоваяСтрока.Содержание   = Содержание;		
		НоваяСтрока.Сумма        = ДанныеСуммы.СуммаВыручка;
		НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.СчетДоходов  = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;             //90.01.1
		НоваяСтрока.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; //90.02.1
		НоваяСтрока.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;   //90.03
		НоваяСтрока.Субконто     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
		
	КонецЕсли;
	
	
	Если НЕ ДокументОбъект.РучнаяКорректировка Тогда
		
		// АгентскиеУслуги
		Если ДанныеСуммы.СуммаАгентсие <> 0 Тогда
			
			НоваяСтрока = ДокументОбъект.АгентскиеУслуги.Добавить();
			НоваяСтрока.Номенклатура = СтруктураСсылок.Номенклатура;
			НоваяСтрока.Содержание   = Содержание;
			НоваяСтрока.Сумма        = ДанныеСуммы.СуммаАгентсие;
			НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
			НоваяСтрока.Контрагент   = СтруктураСсылок.СК;
			НоваяСтрока.ДоговорКонтрагента = СтруктураСсылок.ДоговорСК;
			НоваяСтрока.СчетРасчетов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1");
		
		КонецЕсли;
	
	КонецЕсли;
	
	НачатьТранзакцию();
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение, Параметры.ВыводитьСообщения, Параметры.ОтложенноеПроведение);		
		
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоID;
	Запись.Значение = Данные.ID;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоДЦ;
	Запись.Значение = СтруктураСсылок.ЦФО;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоIDПроекта;
	Запись.Значение = Данные.IDпроекта;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоIDСчета;
	Запись.Значение = Данные.IDСчета;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоVIN;
	Запись.Значение = Данные.VIN;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоНоменклатура;
	Запись.Значение = СтруктураСсылок.Номенклатура;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокументОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоТипПлатежа;
	Запись.Значение = СтруктураСсылок.ТипПлатежа;
	Запись.Записать();
	
	ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка, СтруктураСсылок.БазаАстра);
	
	ЗафиксироватьТранзакцию();
	
	СохранитьДатуПоследнегоДокумента(Данные.ДатаИзменения, Данные.ТипПлатежа);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция ЗаполнитьДокументКорректировка(ДокументРТУ, Данные, ДанныеСуммы, Параметры, СтруктураСсылок)
	
	ДокументОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
	ДокументОбъект.ДокументРеализации = ДокументРТУ;
	
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.АгентскиеУслуги.Очистить();
	
	ДокументОбъект.Заполнить(ДокументРТУ);
	
	ВремяДокумента = Документы.КорректировкаРеализации.ВремяДокументаПоУмолчанию();
	
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.Дата        = Данные.ДатаИзменения + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	ДокументОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = СтруктураСсылок.Договор;
	
	Если ДокументОбъект.Услуги.Количество() > 0 Тогда
		
		СтрокаТЧ = ДокументОбъект.Услуги[0];
		СтрокаТЧ.Сумма = ДанныеСуммы.СуммаВыручка;
		
	КонецЕсли;	
	
	Если ДокументОбъект.АгентскиеУслуги.Количество() > 0 Тогда
		
		СтрокаТЧ = ДокументОбъект.АгентскиеУслуги[0];
		СтрокаТЧ.Сумма = ДанныеСуммы.СуммаАгентсие;
		
	КонецЕсли;	
	
	ДокументОбъект.Проведен = Истина;
	
	НачатьТранзакцию();
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение, Параметры.ВыводитьСообщения, Параметры.ОтложенноеПроведение);		
	ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка, СтруктураСсылок.БазаАстра);
		
	ЗафиксироватьТранзакцию();
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция ЗаполнитьДокументСторно(ДокументРТУ, Данные, Параметры, СтруктураСсылок)
	
	Если НЕ ЗначениеЗаполнено(ДокументРТУ) Тогда
		// Нет документа основания.
		// сторнировать нечего
		Возврат Неопределено;
	КонецЕсли;	
	
	ДокументСсылка = НайтиДокументСторно(ДокументРТУ);
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		// уже все отсторнировано;
		Возврат ДокументСсылка;
	Иначе
		
		ДокументОбъект = Документы.КорректировкаРеализации.СоздатьДокумент();
		
	КонецЕсли;	                                                                
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.АгентскиеУслуги.Очистить();
	
	ДокументОбъект.Заполнить(ДокументРТУ);
	
	ВремяДокумента = Документы.КорректировкаРеализации.ВремяДокументаПоУмолчанию();
	
	ДокументОбъект.РучнаяКорректировка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРТУ, "РучнаяКорректировка");
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.Дата        = НачалоДня(Данные.ДатаИзменения)  + 3600 * 13 + 60 * 59 + 59;
	
	Если ДокументОбъект.Услуги.Количество() > 0 Тогда
		
		СтрокаТЧ = ДокументОбъект.Услуги[0];
		СтрокаТЧ.Сумма = 0;
		
	КонецЕсли;	
	
	Если ДокументОбъект.АгентскиеУслуги.Количество() > 0 Тогда
		
		СтрокаТЧ = ДокументОбъект.АгентскиеУслуги[0];
		СтрокаТЧ.Сумма = 0;
		
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Проведение, Параметры.ВыводитьСообщения, Параметры.ОтложенноеПроведение);		
	ДобавитьИзменениеОбъекта(ДокументОбъект.Ссылка, СтруктураСсылок.БазаАстра);
		
	ЗафиксироватьТранзакцию();
	
	СохранитьДатуПоследнегоДокумента(Данные.ДатаИзменения, Данные.ТипПлатежа);
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

#КонецОбласти

#Область Оплаты

Функция СоздатьДокументОплаты(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Если НЕ ЗначениеЗаполнено(ДокРТУ) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	РучнаяКорректировка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокРТУ, "РучнаяКорректировка");
	Если РучнаяКорректировка = Истина Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Данные.ТипПлатежа = "Наличные" Тогда
		ДокОплаты = СоздатьПКО(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	ИначеЕсли Данные.ТипПлатежа = "Эквайринг" Тогда	
		ДокОплаты = СоздатьОплатуКартой(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	ИначеЕсли Данные.ТипПлатежа = "Безналичный" Тогда	
		ДокОплаты = СоздатьПоступлениеНаРС(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	КонецЕсли;	
	
	Возврат ДокОплаты;
	
КонецФункции	

Функция СоздатьПКО(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокРТУ", ДокРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Сделка = &ДокРТУ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	Для каждого СтрокаТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ОсновнаяСтатьяДвиженияДенежныхСредств, ОсновнойЦФО");
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаТЧ.ЦФО = РеквизитыДоговора.ОсновнойЦФО;
	КонецЦикла;	
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись, Параметры.ВыводитьСообщения, Параметры.ОтложенноеПроведение);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьОплатуКартой(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокРТУ", ДокРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Сделка = &ДокРТУ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ОплатаПлатежнойКартой.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	ДокументОбъект.ВидОплаты = ПолучитьВидОплаты(Данные, Параметры, СтруктураСсылок);
	Если ЗначениеЗаполнено(ДокументОбъект.ВидОплаты) Тогда
	
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
		ДокументОбъект.Эквайер = СтруктураРеквизитов.Контрагент;
		ДокументОбъект.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорКонтрагента;
		
	КонецЕсли;	
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись, Параметры.ВыводитьСообщения, Параметры.ОтложенноеПроведение);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьПоступлениеНаРС(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокРТУ", ДокРТУ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Сделка = &ДокРТУ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ПоступлениеНаРасчетныйСчет.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	ДокументОбъект.СчетОрганизации = ПолучитьСчетОрганизации(СтруктураСсылок.Организация, Данные.СчетОрганизации);
	
	Для каждого СтрокаТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ОсновнаяСтатьяДвиженияДенежныхСредств, ОсновнойЦФО");
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаТЧ.ЦФО = РеквизитыДоговора.ОсновнойЦФО;
	КонецЦикла;	
	
	ЗаписатьДокумент(ДокументОбъект, РежимЗаписиДокумента.Запись, Параметры.ВыводитьСообщения, Параметры.ОтложенноеПроведение);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

#КонецОбласти
