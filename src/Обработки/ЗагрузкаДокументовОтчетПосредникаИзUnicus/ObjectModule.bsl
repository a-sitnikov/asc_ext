#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	
	// Запуск через фоновое не работает в режиме разрешений
	// Каталог не обнаружен 'e1cib\tempstorage\dee284a6-d234-4482-b97c-3ab694a1d1dd'
	//ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	//
	//// HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ADODB.Connection
	//Разрешение = РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("ADODB.Connection", "{00000514-0000-0010-8000-00AA006D2EA4}");
	//ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.Информация = Метаданные().Представление();
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить отчеты посредника Юникус";
	НоваяКоманда.Идентификатор = "ЗагрузитьОтчеты";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	
	База = ХранилищеОбщихНастроек.Загрузить("ЗагрузитьДокументыИзUnicus", "База",, "ЗагрузкаДокументовИзUnicus");
	Если НЕ ЗначениеЗаполнено(База) Тогда
		База = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию("Юникус");
	КонецЕсли;
	
	Параметры.Вставить("База",        База);
	Параметры.Вставить("ДатаНач",     ХранилищеОбщихНастроек.Загрузить("ЗагрузкаДокументовИзUnicus", "ДатаПоследнегоДокумента",, "ЗагрузкаДокументовИзUnicus"));
	Параметры.Вставить("ДатаКон",     '2100-01-01');
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ПерезаполнятьДокументы",   Ложь);
	Параметры.Вставить("ПерезаполнятьДоговоры",    Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("ЗагружатьДокументыОплаты", Истина);
	//ЗаписьЖурналаРегистрации("Загрузка отчета UNICUS",
	//	УровеньЖурналаРегистрации.Предупреждение,,, "Параметры: " + вСтроку(ПараметрыКоманды));
	
	Если ИдентификаторКоманды = "ЗагрузитьОтчеты" Тогда
		ЗагрузитьОтчеты(Параметры);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеФункции

Функция ЗаписатьДокумент(ДокОбъект, Режим, Сообщать = Истина)
	
	Результат = Истина;	
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;	
	
	// тк некуда записывать пропущенные документы, то будем просто останавливать обработку
	ДокОбъект.Записать(Режим);
	
	//Попытка
	//	ДокОбъект.Записать(Режим);
	//Исключение
	//	
	//	ОписаниеОшибки = ОписаниеОшибки();
	//	Сообщить(ОписаниеОшибки);
	//	ЗаписьЖурналаРегистрации("Загрузка документов UNICUS",
	//		УровеньЖурналаРегистрации.Ошибка, ДокОбъект.Метаданные(), ДокОбъект.Ссылка, ОписаниеОшибки);
	//		
	//	Результат = Ложь;	
	//	
	//КонецПопытки;	
	
	Если Сообщать Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект);
		Сообщение.КлючДанных = ДокОбъект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ЗначенияОтличаются(Структруа1, Структура2)
	
	Для каждого КлючИЗначение Из Структруа1 Цикл
		
		Если КлючИЗначение.Значение <> Структура2[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти

#Область Отчеты

Процедура ЗагрузитьОтчеты(Параметры, АдресРезультата = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	ДатаКон     = Параметры.ДатаКон;
	Организация = Параметры.Организация;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	
	ТекстЗапроса =
	"SELECT 
	|    TO_CHAR(head.act_id) as ИД,    
	|    head.НомерДок,    
	|    head.ДатаДок,    
	|    head.СК,  
	|    head.СК_Договор,  
	|    tab.SK_INN as СК_ИНН,
	|    tab.SK_KPP as СК_КПП,
	|    TO_NUMBER(tab.COL2) as НомерСтроки,
	|	 tab.AGENT_INN as ОрганизацияИНН,
	|    tab.COL3 as Контрагент,
	|    tab.COL10 as КонтрагентИНН,
	|    tab.COL11 as КонтрагентКПП,
	|    tab.COL4 as Серия,
	|    tab.COL5 as Номер,
	|    TO_NUMBER(tab.COL6, '999999999999.99') as СтраховаяПремия,
	|    tab.COL7 as КВ_руб,
	|    tab.COL8 as КВ,
	|    tab.COL9 as СуммаКПеречислению,
  	|    tab.PAY_ID as ID,
	|	(SELECT 
	|        contract.PRODUCT_NAME
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS PRODUCT_NAME,
    |	(SELECT 
	|		 CASE WHEN contract.INSUR_TYPE = 'пролонгация' 
	|		 	THEN 1
	|			ELSE 0
	|		 END as Пролонгация
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS Пролонгация,
    |	(SELECT 
	|        contract.TS_NEW
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS TS_NEW,
   	|	(SELECT 
	|        contract.TSFO
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS ТипПродажи
	|FROM
	|	(SELECT 
	|   	ACT_ID, 
	|	    COL2 as НомерДок, 
	|   	TO_DATE(COL3, 'DD.MM.YYYY') as  ДатаДок,
	|	    COL4 as СК,
	|	    COL6 as СК_Договор
	|	FROM unicusweb_release.v_asc_act
	|	WHERE
	|		COL1 is NOT NULL
	|		AND TO_DATE(COL3, 'DD.MM.YYYY') BETWEEN &ДатаНач AND &ДатаКон) head
	|	LEFT JOIN unicusweb_release.v_asc_act tab 
	|		ON tab.act_id = head.act_id
	|WHERE
	|	tab.COL1 IS NULL";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.AGENT_INN = '" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН") + "'";
		
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КПП");
		Если ЗначениеЗаполнено(КПП) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|	AND tab.AGENT_KPP = '" + КПП + "'";
			
		КонецЕсли;	
		
	КонецЕсли;	
		
	ТекстЗапроса = ТекстЗапроса + "
	|ORDER BY
	|	ДатаДок, ИД, НомерСтроки";
	
	// Отладочные отборы
	//Доп отбор для тестирования
	// например AND rownum <= 10  - выбираем только первые 10 записей
	Если ЗначениеЗаполнено(Тест_КоличествоСтрок) Тогда
		
		ТекстЗапроса =  
		"SELECT
		| *
		|FROM (
		|" + ТекстЗапроса + "
		|)
		|WHERE
		|	rownum <= " + Формат(Тест_КоличествоСтрок, "ЧГ=0");
		
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "Oracle"));
	
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	ТаблицаДанных = АСЦ_ОбщийМодуль.ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",  Новый Соответствие);
	КэшСообщений.Вставить("Департамент",  Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура", Новый Соответствие);
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	ПредЗначения = Новый Структура("ИД");
	ДокОбъект    = Неопределено;
	
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		Если ЗначенияОтличаются(ПредЗначения, СтрокаТЗ) Тогда
			
			ЗаполнитьЗначенияСвойств(ПредЗначения, СтрокаТЗ);
			
			Если ДокОбъект <> Неопределено Тогда
				ДокОбъект.ЗаполнитьСвязанныеДокументы();
				ЗаписатьДокумент(ДокОбъект, РежимЗаписиДокумента.Запись);
			КонецЕсли;	
			
			ДокОбъект = СоздатьДокументОтчетПосредника(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений);
			
			Если Ложь Тогда
				ДокОбъект = Документы.АСЦ_ОтчетПосредника.СоздатьДокумент();
			КонецЕсли;	
			
			// Неопределено когда документ не перезаполняем
			Если ДокОбъект <> Неопределено Тогда
				
				ДокОбъект.Дата        = СтрокаТЗ.ДатаДок;
				ДокОбъект.Организация = АСЦ_ОбщийМодуль.ПолучитьОрганизациюПоИНН(СтрокаТЗ.ОрганизацияИНН, КэшДанных.Организация);
				
				ТекстОшибки = "";
				ДокОбъект.Контрагент  = АСЦ_ОбщийМодуль.НайтиКонтрагента("", СтрокаТЗ.СК_ИНН, СтрокаТЗ.СК_КПП, ТекстОшибки);
				Если ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда
				
					ДанныеДоговора = Новый Структура;
					ДанныеДоговора.Вставить("Контрагент",    ДокОбъект.Контрагент);
					ДанныеДоговора.Вставить("Организация",   ДокОбъект.Организация);
					ДанныеДоговора.Вставить("Наименование",  СтрокаТЗ.СК_Договор);
					ДанныеДоговора.Вставить("ЦФО",           Неопределено);
					ДанныеДоговора.Вставить("ВидДоговораУХ", Перечисления.ВидыДоговоровКонтрагентовУХ.СКомитентом);
					ДанныеДоговора.Вставить("Дата",          "");
					ДанныеДоговора.Вставить("ДатаНачала",    "");
					ДанныеДоговора.Вставить("СрокДействия",  "");
					ДанныеДоговора.Вставить("СтатьяДДС",     Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплаты по страховой деятельности"));
	
					ДокОбъект.ДоговорКонтрагента = АСЦ_ОбщийМодуль.ПолучитьДоговор(ДанныеДоговора, Ложь);
					
				КонецЕсли;
				
				ДокОбъект.ID_Unicus   = СтрокаТЗ.ИД;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "" + Организация + ": " + Счетчик + " из " + Всего);
		
		Если ДокОбъект <> Неопределено Тогда
			
			// Тут заполнение таб. части
			НоваяСтрока = ДокОбъект.Продажи.Добавить();
			НоваяСтрока.Контрагент         = АСЦ_ОбщийМодуль.НайтиКонтрагента(СтрокаТЗ.Контрагент, СтрокаТЗ.КонтрагентИНН, СтрокаТЗ.КонтрагентКПП, ТекстОшибки);
			Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.ДоговорКонтрагента = АСЦ_ОбщийМодуль.НайтиДоговор(НоваяСтрока.Контрагент, ДокОбъект.Организация, СтрокаТЗ.Серия + СтрокаТЗ.Номер, Перечисления.ВидыДоговоровКонтрагентовУХ.СПокупателем);
			КонецЕсли;	
			
			НаименованиеНоменклатуры = АСЦ_UNICUS_Contracts.ПолучитьНаименованиеноменклатуры(СтрокаТЗ.PRODUCT_NAME, СтрокаТЗ.Пролонгация, СтрокаТЗ.ТипПродажи, СтрокаТЗ.TS_NEW);
			НоваяСтрока.Номенклатура = АСЦ_UNICUS_Contracts.ПолучитьНоменклатуру(НаименованиеНоменклатуры, СтрокаТЗ.PRODUCT_NAME, КэшДанных.Номенклатура);
			НоваяСтрока.СуммаОплаты  = СтрокаТЗ.СтраховаяПремия;
			НоваяСтрока.СуммаКВ      = СтрокаТЗ.КВ_руб;
			НоваяСтрока.id           = СтрокаТЗ.ID;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ДокОбъект <> Неопределено Тогда
		ДокОбъект.ЗаполнитьСвязанныеДокументы();
		ЗаписатьДокумент(ДокОбъект, РежимЗаписиДокумента.Запись);
	КонецЕсли;	
		
КонецПроцедуры	

Функция СоздатьДокументОтчетПосредника(Данные, Параметры, База, КэшДанных, КэшСообщений)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИД", Данные.ИД); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ОтчетПосредника КАК Док
	|ГДЕ
	|	Док.ID_Unicus = &ИД";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Продажи.Очистить();
			ДокументОбъект.Проведен = Ложь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.АСЦ_ОтчетПосредника.СоздатьДокумент();
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции	

#КонецОбласти

