#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Информация = "Загрузка документов из UNICUS";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить реализации";
	НоваяКоманда.Идентификатор = "ЗагрузитьРеализации";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = "Загрузить отчеты посредника";
	НоваяКоманда.Идентификатор = "ЗагрузитьОтчеты";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Ложь;

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	Параметры = Новый Структура;
	
	База = ХранилищеОбщихНастроек.Загрузить("ЗагрузитьДокументыИзUnicus", "База",, "ЗагрузитьДокументыИзUnicus");
	Если НЕ ЗначениеЗаполнено(База) Тогда
		База = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию("Юникус");
	КонецЕсли;
	
	Параметры.Вставить("База",        База);
	Параметры.Вставить("ДатаКон",     ТекущаяДата());
	Параметры.Вставить("ДатаНач",     НачалоДня(ТекущаяДата() - 86400));
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ПерезаполнятьДокументы",   Ложь);
	Параметры.Вставить("ПерезаполнятьДоговоры",    Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("ЗагружатьДокументыОплаты", Истина);
	//ЗаписьЖурналаРегистрации("Загрузка отчета UNICUS",
	//	УровеньЖурналаРегистрации.Предупреждение,,, "Параметры: " + вСтроку(ПараметрыКоманды));
	
	Если ИдентификаторКоманды = "ЗагрузитьРеализации" Тогда
		ЗагрузитьРеализации(Параметры);
		
	ИначеЕсли ИдентификаторКоманды = "ЗагрузитьОтчеты" Тогда
		ЗагрузитьОтчеты(Параметры);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеФункции

Функция ВыполнитьЗапросADO(Соединение, ТекстЗапроса)
	
	НаборЗаписей = Соединение.Execute(ТекстЗапроса);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Счетчик = 0 По НаборЗаписей.Fields.Count - 1 Цикл
		ТаблицаДанных.Колонки.Добавить(НаборЗаписей.Fields(Счетчик).Name);
	КонецЦикла;	
	
	Если НЕ НаборЗаписей.EOF Тогда		

		НаборЗаписей.MoveFirst();
		Пока НЕ НаборЗаписей.EOF Цикл
			
			НоваяЗапись = ТаблицаДанных.Добавить();
			Для каждого Колонка из ТаблицаДанных.Колонки Цикл
				НоваяЗапись[Колонка.Имя] = НаборЗаписей.Fields(Колонка.Имя).Value;
			КонецЦикла;	

			НаборЗаписей.MoveNext();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Close();
	
	Возврат ТаблицаДанных;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокОбъект, Сообщать = Истина)
	
	Если ДокОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДокОбъект.Проведен Тогда
		Режим = РежимЗаписиДокумента.Проведение;
	Иначе
		Режим = РежимЗаписиДокумента.Запись;
	КонецЕсли;	
	
	Попытка
		ДокОбъект.Записать(Режим);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("Загрузка документов UNICUS",
			УровеньЖурналаРегистрации.Ошибка, ДокОбъект.Метаданные(), ДокОбъект.Ссылка, ОписаниеОшибки);
	КонецПопытки;	
	
	Если Сообщать Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект);
		Сообщение.КлючДанных = ДокОбъект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры	

Функция ЗначенияОтличаются(Структруа1, Структура2)
	
	Для каждого КлючИЗначение Из Структруа1 Цикл
		
		Если КлючИЗначение.Значение <> Структура2[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти

#Область ПоискДанных

Функция ПолучитьВидОплаты(Данные, Параметры, СтруктураСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", СтруктураСсылок.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|	И Спр.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	КонецЕсли;
	
	СпрОбъект = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
	СпрОбъект.Наименование = "Эквайринг";
	СпрОбъект.Организация  = СтруктураСсылок.Организация;
	СпрОбъект.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам; //57.03
	СпрОбъект.Контрагент   = Справочники.Контрагенты.ПустаяСсылка();
	СпрОбъект.Записать();
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Реализации

Процедура ЗагрузитьРеализации(Параметры, АдресРезультата = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	ДатаКон     = Параметры.ДатаКон;
	Организация = Параметры.Организация;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	ПерезаполнятьДоговоры  = Параметры.ПерезаполнятьДоговоры;
	ВыводитьСообщения      = Параметры.ВыводитьСообщения;
	ЗагружатьДокументыОплаты = Параметры.ЗагружатьДокументыОплаты;
	
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);
	
	Тест_Договор = "";
	Параметры.Свойство("Тест_Договор", Тест_Договор);
	
	Тест_VIN = "";
	Параметры.Свойство("Тест_VIN", Тест_VIN);
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("НастройкаДепартаменты",  Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("DEPARTMENTS <-> Организации",,, ТипБазы));
	ДопПараметры.Вставить("НастройкаСтатьиДоходов", Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("Номенклатура <-> Статьи доходов",,, ТипБазы));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	ДопПараметры.Вставить("ПерезаполнятьДоговоры",  ПерезаполнятьДоговоры);
	ДопПараметры.Вставить("ВыводитьСообщения",      ВыводитьСообщения);
	
	ТекстЗапроса =
	"SELECT DISTINCT
	|	CASE WHEN tab.INSUR_TYPE = 'пролонгация' 
	|		THEN 1
	|		ELSE 0
	|	END as Пролонгация,
    |   tab.TS_NEW,
 	|	tab.TSFO as ТипПродажи,
    |   tab.product_name as Номенклатура
    |FROM
	|	v_asc_contract tab
    |WHERE 
    |    tab.pay_date BETWEEN &ДатаНач AND &ДатаКон";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "Oracle"));
	
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	ТаблицаДанных = ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Департамент",  Новый Соответствие);
	КэшДанных.Вставить("Страховая",    Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	КэшДанных.Вставить("СведенияОНоменклатуре", Новый Соответствие);
	КэшДанных.Вставить("СтатьиДоходов", Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",  Новый Соответствие);
	КэшСообщений.Вставить("Страховая",    Новый Соответствие);
	КэшСообщений.Вставить("Департамент",  Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура", Новый Соответствие);
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	Для каждого Данные из ТаблицаДанных Цикл
		
		// Номенклатура
		НаименованиеНоменклатуры = АСЦ_UNICUS_Contracts.ПолучитьНаименованиеНоменклатуры(Данные.Номенклатура, Данные.Пролонгация, Данные.ТипПродажи, Данные.TS_NEW);
		Номенклатура = АСЦ_UNICUS_Contracts.ПолучитьНоменклатуру(НаименованиеНоменклатуры, Данные.Номенклатура, КэшДанных.Номенклатура);
		Сообщить(Номенклатура);
		
		//СтруктураСсылок = АСЦ_UNICUS_Contracts.ПолучитьСтруктуруСсылок(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений);
		//Если НЕ ЗначениеЗаполнено(СтруктураСсылок.Организация) Тогда
		//	Продолжить;
		//КонецЕсли;	
		//
		//ДокРТУ = СоздатьДокументРТУ(СтрокаТЗ, ДопПараметры, СтруктураСсылок);
		//
		//Если ЗагружатьДокументыОплаты = Истина Тогда
		//	СоздатьДокументОплаты(СтрокаТЗ, ДопПараметры, СтруктураСсылок, ДокРТУ);
		//КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "Загружено " + Счетчик + " из " + Всего);
			
	КонецЦикла;	
	
КонецПроцедуры	

Функция СоздатьДокументРТУ(Данные, Параметры, СтруктураСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.ПометкаУдаления
	|	И Док.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.РеализацияТоваровУслуг.ВремяДокументаПоУмолчанию();
	
	ДокументОбъект.Организация = СтруктураСсылок.Организация;
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	ДокументОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокументОбъект.ДоговорКонтрагента = СтруктураСсылок.Договор;
	
	ДокументОбъект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДокументОбъект.ВидОперации     = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками; //76.05
	ДокументОбъект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	ДокументОбъект.Услуги.Очистить();
	ДокументОбъект.АгентскиеУслуги.Очистить();
	
	// В некоторых полисах PREMIUM_SUM не заполнено
	// пример 001АТ-17/0015125
	ПолнаяСумма = Данные.PREMIUM_SUM;
	Если НЕ ЗначениеЗаполнено(ПолнаяСумма) Тогда
		ПолнаяСумма = Данные.FULL_PREMIUM;
	КонецЕсли;	
	
	// Расчитаем пропорционально оплате
	СуммаВыручка  = Окр(Данные.СуммаОплаты * Данные.KV_RUB / ПолнаяСумма, 2);
	СуммаАгентсие = Данные.СуммаОплаты - СуммаВыручка;
	
	// Услуги
	Если СуммаВыручка <> 0 Тогда
		
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		НоваяСтрока.Номенклатура = СтруктураСсылок.Номенклатура;
		НоваяСтрока.Содержание   = Данные.VIN;
		НоваяСтрока.Сумма        = СуммаВыручка;
		НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
		НоваяСтрока.СчетДоходов  = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;             //90.01.1
		НоваяСтрока.СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД; //90.02.1
		НоваяСтрока.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;   //90.03
		НоваяСтрока.Субконто     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "НоменклатурнаяГруппа");
		
	КонецЕсли;
	
	
	// АгентскиеУслуги
	Если СуммаАгентсие <> 0 Тогда
		
		Если ЗначениеЗаполнено(СтруктураСсылок.СК) Тогда
			
			НоваяСтрока = ДокументОбъект.АгентскиеУслуги.Добавить();
			НоваяСтрока.Номенклатура = СтруктураСсылок.Номенклатура;
			НоваяСтрока.Содержание   = Данные.VIN;
			НоваяСтрока.Сумма        = СуммаАгентсие;
			НоваяСтрока.СтавкаНДС    = Перечисления.СтавкиНДС.БезНДС;
			НоваяСтрока.Контрагент   = СтруктураСсылок.СК;
			НоваяСтрока.ДоговорКонтрагента = СтруктураСсылок.ДоговорСК;
			НоваяСтрока.СчетРасчетов = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.01.1");
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция СоздатьДокументОплаты(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Если Данные.ТипПлатежа = "Наличные" Тогда
		СоздатьПКО(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	ИначеЕсли Данные.ТипПлатежа = "Эквайринг" Тогда	
		СоздатьОплатуКартой(Данные, Параметры, СтруктураСсылок, ДокРТУ);
		
	КонецЕсли;	
	
	// Загружают из клиент банка
	//СоздатьПоступлениеНаРС(Данные, Параметры, СтруктураСсылок, ДокРТУ);
	
КонецФункции	

Функция СоздатьПКО(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	Для каждого СтрокаТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ОсновнаяСтатьяДвиженияДенежныхСредств, ОсновнойЦФО");
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаТЧ.ЦФО = РеквизитыДоговора.ОсновнойЦФО;
	КонецЦикла;	
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьОплатуКартой(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ОплатаПлатежнойКартой.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	ДокументОбъект.ВидОплаты = ПолучитьВидОплаты(Данные, Параметры, СтруктураСсылок);
	Если ЗначениеЗаполнено(ДокументОбъект.ВидОплаты) Тогда
	
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
		ДокументОбъект.Эквайер = СтруктураРеквизитов.Контрагент;
		ДокументОбъект.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорКонтрагента;
		
	КонецЕсли;	
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

Функция СоздатьПоступлениеНаРС(Данные, Параметры, СтруктураСсылок, ДокРТУ)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Договор", СтруктураСсылок.Договор);
	Запрос.Параметры.Вставить("Дата1",   Данные.Дата);
	Запрос.Параметры.Вставить("Дата2",   КонецДня(Данные.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.ДоговорКонтрагента = &Договор
	|	И НЕ Док.Ссылка.ПометкаУдаления
	|	И Док.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
		Иначе
			Возврат ДокументСсылка;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
	КонецЕсли;
	
	ВремяДокумента = Документы.ПоступлениеНаРасчетныйСчет.ВремяДокументаПоУмолчанию();
	ДокументОбъект.Дата        = Данные.Дата + 3600 * ВремяДокумента.Часы + 60 * ВремяДокумента.Минуты;
	
	ДокументОбъект.Заполнить(ДокРТУ);
	
	Для каждого СтрокаТЧ из ДокументОбъект.РасшифровкаПлатежа Цикл
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ОсновнаяСтатьяДвиженияДенежныхСредств, ОсновнойЦФО");
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = РеквизитыДоговора.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтрокаТЧ.ЦФО = РеквизитыДоговора.ОсновнойЦФО;
	КонецЦикла;	
	
	ДокументОбъект.Проведен = Истина;
	ЗаписатьДокумент(ДокументОбъект, Параметры.ВыводитьСообщения);				
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции	

#КонецОбласти

#Область Отчеты

Процедура ЗагрузитьОтчеты(Параметры, АдресРезультата = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	ДатаКон     = Параметры.ДатаКон;
	Организация = Параметры.Организация;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	
	Тест_КоличествоСтрок = 0;
	Параметры.Свойство("Тест_КоличествоСтрок", Тест_КоличествоСтрок);
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодитель",    Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	
	ТекстЗапроса =
	"SELECT 
	|    TO_CHAR(head.act_id) as ИД,    
	|    head.НомерДок,    
	|    head.ДатаДок,    
	|    head.СК,  
	|    head.СК_Договор,  
	|    tab.SK_INN as СК_ИНН,
	|    tab.SK_KPP as СК_КПП,
	|    TO_NUMBER(tab.COL2) as НомерСтроки,
	|	 tab.AGENT_INN as ОрганизацияИНН,
	|    tab.COL3 as Контрагент,
	|    tab.COL10 as КонтрагентИНН,
	|    tab.COL11 as КонтрагентКПП,
	|    tab.COL4 as Серия,
	|    tab.COL5 as Номер,
	|    TO_NUMBER(tab.COL6, '999999999999.99') as СтраховаяПремия,
	|    tab.COL7 as КВ_руб,
	|    tab.COL8 as КВ,
	|    tab.COL9 as СуммаКПеречислению,
    |	(SELECT 
	|        contract.PRODUCT_NAME
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS PRODUCT_NAME,
    |	(SELECT 
	|		 CASE WHEN contract.INSUR_TYPE = 'пролонгация' 
	|		 	THEN 1
	|			ELSE 0
	|		 END as Пролонгация,
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS Пролонгация,
    |	(SELECT 
	|        contract.TS_NEW
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS TS_NEW,
   	|	(SELECT 
	|        contract.TSFO
	|     FROM    
	|        V_ASC_CONTRACT contract
	|     WHERE
	|        contract.POLICY_NUMBER = CONCAT(tab.COL4, tab.COL5)
	|        AND rownum = 1) AS ТипПродажи
	|FROM
	|	(SELECT 
	|   	ACT_ID, 
	|	    COL2 as НомерДок, 
	|   	TO_DATE(COL3, 'DD.MM.YYYY') as  ДатаДок,
	|	    COL4 as СК,
	|	    COL6 as СК_Договор
	|	FROM v_asc_act
	|	WHERE
	|		COL1 is NOT NULL
	|		AND TO_DATE(COL3, 'DD.MM.YYYY') BETWEEN &ДатаНач AND &ДатаКон) head
	|	LEFT JOIN v_asc_act tab 
	|		ON tab.act_id = head.act_id
	|WHERE
	|	tab.COL1 IS NULL";
	
	//Доп отбор для тестирования
	// например AND rownum <= 10  - выбираем только первые 10 записей
	Если ЗначениеЗаполнено(Тест_КоличествоСтрок) Тогда
		ТекстЗапроса = ТекстЗапроса + " AND rownum <= " + Формат(Тест_КоличествоСтрок, "ЧГ=0");
		ЗаписьЖурналаРегистрации("Загрузка реализаций из Unicus",
			УровеньЖурналаРегистрации.Предупреждение, Метаданные(), , "Кол-во строк: " + Тест_КоличествоСтрок);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.AGENT_INN = '" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН") + "'";
		
	КонецЕсли;	
		
	ТекстЗапроса = ТекстЗапроса + "
	|ORDER BY
	|	ДатаДок, ИД, НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "Oracle"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "Oracle"));
	
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	ТаблицаДанных = ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("Организация",  Новый Соответствие);
	КэшДанных.Вставить("Номенклатура", Новый Соответствие);
	
	КэшСообщений = Новый Структура;
	КэшСообщений.Вставить("Организация",  Новый Соответствие);
	КэшСообщений.Вставить("Департамент",  Новый Соответствие);
	КэшСообщений.Вставить("Номенклатура", Новый Соответствие);
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	ПредЗначения = Новый Структура("ИД");
	ДокОбъект    = Неопределено;
	
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		Если ЗначенияОтличаются(ПредЗначения, СтрокаТЗ) Тогда
			
			ЗаполнитьЗначенияСвойств(ПредЗначения, СтрокаТЗ);
			
			
			ЗаписатьДокумент(ДокОбъект);
			//ЗаполнитьСвязанныеДокументыОтчетПосредника(ДокОбъект);
			
			ДокОбъект = СоздатьДокументОтчетПосредника(СтрокаТЗ, ДопПараметры, База, КэшДанных, КэшСообщений);
			
			Если Ложь Тогда
				ДокОбъект = Документы.АСЦ_ОтчетПосредника.СоздатьДокумент();
			КонецЕсли;	
			
			// Неопределено когда документ не перезаполняем
			Если ДокОбъект <> Неопределено Тогда
				
				ДокОбъект.Дата        = СтрокаТЗ.ДатаДок;
				ДокОбъект.Организация = АСЦ_ОбщийМодуль.ПолучитьОрганизациюПоИНН(СтрокаТЗ.ОрганизацияИНН, КэшДанных.Организация);
				
				ТекстОшибки = "";
				ДокОбъект.Контрагент  = АСЦ_ОбщийМодуль.НайтиКонтрагента("", СтрокаТЗ.СК_ИНН, СтрокаТЗ.СК_КПП, ТекстОшибки);
				Если ЗначениеЗаполнено(ДокОбъект.Контрагент) Тогда
				
					ДанныеДоговора = Новый Структура;
					ДанныеДоговора.Вставить("Контрагент",    ДокОбъект.Контрагент);
					ДанныеДоговора.Вставить("Организация",   ДокОбъект.Организация);
					ДанныеДоговора.Вставить("Наименование",  СтрокаТЗ.СК_Договор);
					ДанныеДоговора.Вставить("ЦФО",           Неопределено);
					ДанныеДоговора.Вставить("ВидДоговораУХ", Перечисления.ВидыДоговоровКонтрагентовУХ.СКомитентом);
					ДанныеДоговора.Вставить("Дата",          "");
					ДанныеДоговора.Вставить("ДатаНачала",    "");
					ДанныеДоговора.Вставить("СрокДействия",  "");
					ДанныеДоговора.Вставить("СтатьяДДС",     Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоНаименованию("Выплаты по страховой деятельности"));
	
					ДокОбъект.ДоговорКонтрагента = АСЦ_ОбщийМодуль.ПолучитьДоговор(ДанныеДоговора, Ложь);
					
				КонецЕсли;
				
				ДокОбъект.ID_Unicus   = СтрокаТЗ.ИД;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "" + Организация + ": " + Счетчик + " из " + Всего);
		
		Если ДокОбъект <> Неопределено Тогда
			
			// Тут заполнение таб. части
			НоваяСтрока = ДокОбъект.Продажи.Добавить();
			НоваяСтрока.Контрагент         = АСЦ_ОбщийМодуль.НайтиКонтрагента(СтрокаТЗ.Контрагент, СтрокаТЗ.КонтрагентИНН, СтрокаТЗ.КонтрагентКПП, ТекстОшибки);
			Если ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.ДоговорКонтрагента = АСЦ_ОбщийМодуль.НайтиДоговор(НоваяСтрока.Контрагент, ДокОбъект.Организация, СтрокаТЗ.Серия + СтрокаТЗ.Номер, Перечисления.ВидыДоговоровКонтрагентовУХ.СПокупателем);
			КонецЕсли;	
			
			НаименованиеНоменклатуры = АСЦ_UNICUS_Contracts.ПолучитьНаименованиеноменклатуры(СтрокаТЗ.PRODUCT_NAME, СтрокаТЗ.Пролонгация, СтрокаТЗ.ТипПродажи, СтрокаТЗ.TS_NEW);
			НоваяСтрока.Номенклатура = АСЦ_UNICUS_Contracts.ПолучитьНоменклатуру(НаименованиеНоменклатуры, СтрокаТЗ.PRODUCT_NAME, КэшДанных.Номенклатура);
			НоваяСтрока.СуммаОплаты  = СтрокаТЗ.СтраховаяПремия;
			НоваяСтрока.СуммаКВ      = СтрокаТЗ.КВ_руб;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ДокОбъект.ЗаполнитьСвязанныеДокументы();
	ЗаписатьДокумент(ДокОбъект);
		
КонецПроцедуры	

Функция СоздатьДокументОтчетПосредника(Данные, Параметры, База, КэшДанных, КэшСообщений)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИД", Данные.ИД); 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ОтчетПосредника КАК Док
	|ГДЕ
	|	Док.ID_Unicus = &ИД";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДокументСсылка = Результат.Выгрузить()[0][0];
		
		Если Параметры.ПерезаполнятьДокументы = Истина Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Продажи.Очистить();
			ДокументОбъект.Проведен = Ложь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		ДокументОбъект = Документы.АСЦ_ОтчетПосредника.СоздатьДокумент();
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции	

#КонецОбласти

