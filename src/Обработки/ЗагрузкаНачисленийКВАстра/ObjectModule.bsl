#Область ОписаниеОбработки

Функция СведенияОВнешнейОбработке() Экспорт

	//ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.1.3.1");
	//ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	
	// HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ADODB.Connection
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаСозданиеCOMКласса("ADODB.Connection", "{00000514-0000-0010-8000-00AA006D2EA4}");
	ПараметрыРегистрации.Разрешения.Добавить(Разрешение);
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	ПараметрыРегистрации.Информация = Метаданные().Представление();
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = Метаданные().Представление() + " - Открыть форму";
	НоваяКоманда.Идентификатор = Метаданные().Имя + "Форма";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	// Для запуска задания по каждой базе по отдельному расписанию
	МассивБаз = ПолучитьМассивБаз();
	Счетчик   = 0 ;
	Для каждого База из МассивБаз Цикл
		
		Счетчик = Счетчик + 1;
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = "Загрузка начислений КВ (" + База + ")";
		НоваяКоманда.Идентификатор = "ЗагрузитьДокументы" + Счетчик;
		НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
		НоваяКоманда.ПоказыватьОповещение = Ложь;
		
	КонецЦикла;

	Возврат ПараметрыРегистрации;

	Возврат ПараметрыРегистрации;

КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт 
	
	НомерБазы = Число(Прав(ИдентификаторКоманды, 1));
	
	Параметры = Новый Структура;
	Параметры.Вставить("База", ПолучитьБазу(НомерБазы));
	
	// начало пред. месяца
	ДатаНач = НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1);
	ДатаНач = Макс(ДатаНач, '2018-01-01');
	
	Параметры.Вставить("ДатаНач",     ДатаНач);
	Параметры.Вставить("ДатаКон",     КонецДня(ТекущаяДата()));
	Параметры.Вставить("ПерезаполнятьДокументы",   Ложь);
	Параметры.Вставить("ВыводитьСообщения",        Ложь);
	Параметры.Вставить("ОтложенноеПроведение",     Истина);
	
	ЗагрузитьДокументы(Параметры);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеФункции

Функция ПолучитьМассивБаз()
	
	МассивБаз = Новый Массив;
	МассивБаз.Добавить("ASTRA Объединенная Ауди (Тест)");
	МассивБаз.Добавить("ASTRA ШкодаC и ДЦ ЭЛА (Тест)");
	МассивБаз.Добавить("ASTRA Инфинити-Ленинский");
	МассивБаз.Добавить("ASTRA Внуково - Обручева");
	МассивБаз.Добавить("ASTRA Порше");
	МассивБаз.Добавить("ASTRA Химки (Тест)");
	
	Возврат МассивБаз;
	
КонецФункции

Функция ПолучитьБазу(НомерБазы)
	
	Если ЗначениеЗаполнено(НомерБазы) Тогда
		МассивБаз = ПолучитьМассивБаз();
		База = Справочники.ВнешниеИнформационныеБазы.НайтиПоНаименованию(МассивБаз[НомерБазы - 1]);
	Иначе
		База = Неопределено;
	КонецЕсли;	
	
	Возврат База;
	
КонецФункции	

Функция ЗаписатьДокумент(ДокОбъект, Режим, Сообщать = Истина, ОтложенноеПроведение = Ложь)
	
	Результат = Истина;	
	
	Если ДокОбъект = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;	
	
	// тк некуда записывать пропущенные документы, то будем просто останавливать обработку
	Если ОтложенноеПроведение Тогда
		
		НачатьТранзакцию();
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Запись = РегистрыСведений.ОтложенныеДвиженияДокументов.СоздатьМенеджерЗаписи();
		Запись.Документ      = ДокОбъект.Ссылка;
		Запись.УзелОбмена    = ПланыОбмена.Полный.ЭтотУзел();
		Запись.ДатаДокумента = ДокОбъект.Дата;
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Иначе	
		ДокОбъект.Записать(Режим);
	КонецЕсли;	
	
	Если Сообщать Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект);
		Сообщение.КлючДанных = ДокОбъект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	
	
Функция ЗначенияОтличаются(Структруа1, Структура2)
	
	Для каждого КлючИЗначение Из Структруа1 Цикл
		
		Если КлючИЗначение.Значение <> Структура2[КлючИЗначение.Ключ] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

#КонецОбласти

#Область ПолучениеДанных

Функция ПолучитьТекстЗапроса(ДатаНач, ДатаКон, Параметры) Экспорт
	
	ТекстЗапроса =
	"SELECT //TOP
	|   CAST(tab.CarSale_ID as VARCHAR(36)) as РТУ_ГУИД
	|	,tab.CarSaleNumber as РТУ_Номер
	|   ,tab.SaleDate as РТУ_Дата
	|   ,CAST(tab.Project_ID as VARCHAR(36)) as Project_ID
	|   ,tab.ProjectName
	|   ,CAST(tab.Center_ID as VARCHAR(36)) as ДЦ_ГУИД
	|   ,tab.CenterName as ДЦ
	|   ,tab.Department_ID
	|   ,tab.DepartmentName
	|   ,CAST(tab.Firm_ID as VARCHAR(36)) as Организация_ГУИД
	|   ,tab.FirmName as Организация 
	|   ,tab.CFR_ID
	|   ,SUBSTRING(tab.CFRName, 1, 2) БУ
	|   ,tab.Cars_ID
	|   ,tab.VIN
	|   ,tab.CarMarkName
	|   ,tab.CarModelName
	|   ,CAST(tab.Client_ID as VARCHAR(36)) as Контрагент_ГУИД 
	|   ,tab.ClientName as Контрагент
	|   ,CAST(tab.Bank_ID as VARCHAR(36)) as Комитент_ГУИД
	|   ,tab.BankName as Комитент
	|   ,tab.BankINN as КомитентИНН
	|   ,tab.BankKPP as КомитентКПП
	|   ,tab.CreditSumma as СуммаКредита
	|   ,tab.FullCreditSumma as ПолнаяСуммаКредита
	|   ,tab.CreditDealDate
	|   ,COALESCE(tab.CreditPayDate, tab.CreditDealDate, tab.SaleDate) as ДатаКВ
	|FROM 
	|	[uho].[VW_CarSale] as tab 
	|WHERE
	|	tab.SaleDate >= &Дата010118
	|	AND tab.SaleDate BETWEEN &ДатаНач AND &ДатаКон
	|	AND tab.FullCreditSumma > 0";
	
	Если Параметры.Свойство("ОтборОрганизация") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.Firm_ID = '" + Параметры.ОтборОрганизация.УникальныйИдентификатор() + "'";
		
	КонецЕсли;	
		
	Если Параметры.Свойство("ОтборДЦ") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	AND tab.Center_ID = '" + Параметры.ОтборДЦ.УникальныйИдентификатор() + "'";
		
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
	|ORDER BY
	|	РТУ_Дата";
	
	// Отладочные отборы
	Если Параметры.Свойство("Тест_КоличествоСтрок") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//TOP", "TOP " + Формат(Параметры.Тест_КоличествоСтрок, "ЧГ=0"));
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//TOP", "");
	КонецЕсли;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата010118", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра('2018-01-01', "SQLOLEDB"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНач", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаНач, "SQLOLEDB"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаКон", ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра(ДатаКон, "SQLOLEDB"));
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ПолучитьТаблицуДанных(База, ДатаНач, ДатаКон, Параметры)
	
	ТекстЗапроса = ПолучитьТекстЗапроса(ДатаНач, ДатаКон, Параметры);
	СтрокаСоединения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "СтрокаПодключения");
	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	Возврат АСЦ_ОбщийМодуль.ВыполнитьЗапросADO(Соединение, ТекстЗапроса);
	
Конецфункции	

Функция ПолучитьТаблицуДанныхТест(Знач Макет = Неопределено) Экспорт
	
	// Для тестирования разных ситуаций подготовим таблицу вручную
	Если Макет = Неопределено Тогда
		Макет = ПолучитьМакет("ТестовыеДанные");
	КонецЕсли;	
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Счетчик = 2 По Макет.ШиринаТаблицы Цикл
		
		Тип = Макет.Область(1, Счетчик).Текст;
		Имя = Макет.Область(2, Счетчик).Текст;
		Если Тип = "Дата" Тогда
			Тип = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ИначеЕсли Тип = "Число" Тогда	
			Тип = Новый ОписаниеТипов("Число");
		Иначе
			Тип = Неопределено;
		КонецЕсли;
		
		ТаблицаЗначений.Колонки.Добавить(Имя, Тип);
		
	КонецЦикла;	
	
	Для СчетчикСтрок = 3 По Макет.ВысотаТаблицы Цикл
		
		// В первой колонке пометка
		Пометка = Макет.Область(СчетчикСтрок, 1).Текст;
		Если НЕ ЗначениеЗаполнено(Пометка) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		Для каждого Колонка из ТаблицаЗначений.Колонки Цикл
			
			СчетчикКолонок = ТаблицаЗначений.Колонки.Индекс(Колонка) + 2;
			Значение = Макет.Область(СчетчикСтрок, СчетчикКолонок).Текст;
			
			Если ТипЗнч(НоваяСтрока[Колонка.Имя]) = Тип("Дата") Тогда
				НоваяСтрока[Колонка.Имя] = Дата(Значение);
			ИначеЕсли ТипЗнч(НоваяСтрока[Колонка.Имя]) = Тип("Число") Тогда
				НоваяСтрока[Колонка.Имя] = Число(Значение);
			Иначе
				НоваяСтрока[Колонка.Имя] = Значение;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТаблицаЗначений;
	
Конецфункции	

#КонецОбласти

#Область Документы

Функция ПолучитьСтруктуруСсылок(Данные, Параметры, База) Экспорт
	
	СтруктураСсылок = Новый Структура;
	
	//ГУИД = Новый УникальныйИдентификатор(Данные.РТУ_ГУИД);
	//СтруктураСсылок.Вставить("РТУ", Документы.РеализацияТоваровУслуг.ПолучитьСсылку(ГУИД));
	
	// Организация
	ГУИД = Новый УникальныйИдентификатор(Данные.Организация_ГУИД);
	СтруктураСсылок.Вставить("Организация", Справочники.Организации.ПолучитьСсылку(ГУИД));
	
	ГУИД =Новый УникальныйИдентификатор(Данные.ДЦ_ГУИД);
	СтруктураСсылок.Вставить("ДЦ", Справочники.Организации.ПолучитьСсылку(ГУИД));
	
	// Комитент
	ПараметрыКомитент = Новый Структура;
	ПараметрыКомитент.Вставить("ГУИД",         Данные.Комитент_ГУИД);
	ПараметрыКомитент.Вставить("Наименование", Данные.Комитент);
	ПараметрыКомитент.Вставить("ИНН",          Данные.КомитентИНН);
	ПараметрыКомитент.Вставить("КПП",          Данные.КомитентКПП);
	ПараметрыКомитент.Вставить("ЮрФизЛицо",    Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	СтруктураСсылок.Вставить("Комитент", АСЦ_ПоискОбъектов.ПолучитьКонтрагента(ПараметрыКомитент, Параметры, Параметры.НастройкаКонтрагенты, Ложь));
	
	// Контрагент
	ПараметрыКонтрагент = Новый Структура;
	ПараметрыКонтрагент.Вставить("ГУИД",         Данные.Контрагент_ГУИД);
	ПараметрыКонтрагент.Вставить("Наименование", Данные.Контрагент);
	ПараметрыКонтрагент.Вставить("ИНН",          "");
	ПараметрыКонтрагент.Вставить("КПП",          "");
	ПараметрыКонтрагент.Вставить("ПаспортСерия", "");
	ПараметрыКонтрагент.Вставить("ПаспортНомер", "");
	ПараметрыКонтрагент.Вставить("ПаспортДата",  "");
	
	СтруктураСсылок.Вставить("Контрагент", АСЦ_ПоискОбъектов.ПолучитьКонтрагента(ПараметрыКонтрагент, Параметры, Параметры.НастройкаКонтрагенты, Ложь));
	
	Возврат СтруктураСсылок;
	
КонецФункции	

Процедура ЗагрузитьДокументы(Параметры, АдресРезультата = Неопределено, Знач ТаблицаДанных = Неопределено) Экспорт
	
	База        = Параметры.База;
	ДатаНач     = Параметры.ДатаНач;
	ДатаКон     = Параметры.ДатаКон;
	ПерезаполнятьДокументы = Параметры.ПерезаполнятьДокументы;
	ОтложенноеПроведение   = Параметры.ОтложенноеПроведение;
	ВыводитьСообщения      = Параметры.ВыводитьСообщения;
	
	ТипБазы   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "ТипБД"); 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("КонтрагентРодительФЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Физические лица"));
	ДопПараметры.Вставить("КонтрагентРодительЮЛ",   Справочники.Контрагенты.НайтиПоНаименованию("1 Юридические лица"));
	ДопПараметры.Вставить("ПерезаполнятьДокументы", ПерезаполнятьДокументы);
	ДопПараметры.Вставить("ОтложенноеПроведение",   ОтложенноеПроведение);
	ДопПараметры.Вставить("ВыводитьСообщения",      ВыводитьСообщения);
	ДопПараметры.Вставить("База",                   База);
	ДопПараметры.Вставить("СвойствоДЦ",             ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ДЦ"));
	ДопПараметры.Вставить("СвойствоVIN",            ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "VIN"));
	ДопПараметры.Вставить("СвойствоIDПроекта",      ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ID_Проекта"));
	ДопПараметры.Вставить("НастройкаКонтрагенты",   Справочники.СоответствиеВнешнимИБ.НайтиПоНаименованию("Контрагенты", Истина,, ТипБазы));
	
	ДлительныеОперации.СообщитьПрогресс(0, "Получение данных из Astra");
	
	Если ТаблицаДанных = Неопределено Тогда
		ТаблицаДанных = ПолучитьТаблицуДанных(База, ДатаНач, ДатаКон, Параметры);
	КонецЕсли;	
	//ТаблицаДанных = ПолучитьТаблицуДанныхТест();
	
	Всего   = ТаблицаДанных.Количество();
	Счетчик = 0;
	
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		СтруктураСсылок = ПолучитьСтруктуруСсылок(СтрокаТЗ, ДопПараметры, База);
		
		//СоздатьДокументРТУ(СтруктураСсылок, СтрокаТЗ, ДопПараметры);
		СоздатьДокументНачислениеКВ(СтруктураСсылок, СтрокаТЗ, ДопПараметры);
		
		Счетчик = Счетчик + 1;
		ПроцентВыполнения = Окр(100 * Счетчик / Всего, 2);
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, "Загружено " + Счетчик + " из " + Всего);
		
	КонецЦикла;	
		
КонецПроцедуры	

Процедура СоздатьДокументРТУ(СтруктураСсылок, Данные, Параметры)
	
	Если ОбщегоНазначения.СсылкаСуществует(СтруктураСсылок.РТУ) Тогда
		Если Параметры.ПерезаполнятьДокументы Тогда
			ДокОбъект = СтруктураСсылок.РТУ.ПолучитьОбъект();
		Иначе	
			Возврат;
		КонецЕсли;	
	Иначе	
		ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ДокОбъект.УстановитьСсылкуНового(СтруктураСсылок.РТУ);
	КонецЕсли;	
	
	ДокОбъект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
	ДокОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокОбъект.Организация = СтруктураСсылок.Организация;
	ДокОбъект.Дата        = Данные.РТУ_Дата;
	ДокОбъект.Номер       = Прав(Данные.РТУ_Номер, 11);
	ДокОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	НачатьТранзакцию();
	ДокОбъект.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоДЦ;
	Запись.Значение = СтруктураСсылок.ДЦ;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоVIN;
	Запись.Значение = Данные.VIN;
	Запись.Записать();
	
	Запись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	Запись.Объект   = ДокОбъект.Ссылка;
	Запись.Свойство = Параметры.СвойствоIDПроекта;
	Запись.Значение = Данные.Project_ID;
	Запись.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Если Параметры.ВыводитьСообщения Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект.Ссылка);
		Сообщение.КлючДанных = СтруктураСсылок.РТУ;
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьДокументНачислениеКВ(СтруктураСсылок, Данные, Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ГУИД", Данные.РТУ_ГУИД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АСЦ_ПлановоеНачислениеКВ КАК Док
	|ГДЕ
	|	Док.ВнешнийГУИДРеализации = &ГУИД
	|	И НЕ Док.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокКВСсылка = Результат.Выгрузить()[0][0];
		Если Параметры.ПерезаполнятьДокументы Тогда
			ДокОбъект = ДокКВСсылка.ПолучитьОбъект();
		Иначе	
			Возврат;
		КонецЕсли;	
	Иначе	
		ДокОбъект = Документы.АСЦ_ПлановоеНачислениеКВ.СоздатьДокумент();
	КонецЕсли;
	
	ДокОбъект.ВидОперации = Справочники.АСЦ_ВидыОперацийПлановоеНачислениеКВ.КВБанков;
	ДокОбъект.ДЦ          = СтруктураСсылок.ДЦ;
	ДокОбъект.VIN         = Данные.VIN;
	ДокОбъект.Дата        = Данные.Дата;
	ДокОбъект.ДатаКредитнойСделки = Данные.ДатаКВ;
	ДокОбъект.Сумма       = Данные.СуммаКредита;
	ДокОбъект.Комитент    = СтруктураСсылок.Комитент;
	ДокОбъект.Контрагент  = СтруктураСсылок.Контрагент;
	ДокОбъект.ВнешнийГУИДРеализации = Данные.РТУ_ГУИД;
	ДокОбъект.РеализацияОрганизация = СтруктураСсылок.Организация;
	ДокОбъект.ВалютаДокумента = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Данные.БУ = "БУ" Тогда
		ДокОбъект.Статья  = Справочники.СтатьиДоходовИРасходов.НайтиПоНаименованию("КВ банков а/м с пробегом");
	Иначе	
		ДокОбъект.Статья = Справочники.СтатьиДоходовИРасходов.НайтиПоНаименованию("КВ банков новые а/м");
		ДокОбъект.ТипАвто = Истина;
	КонецЕсли;	
	
	СтруктураКВ = РегистрыСведений.АСЦ_ПлановыеПроцентыКВ.ПолучитьСтруктуруПроцентаКВ(ДокОбъект.Комитент, ДокОбъект.ДЦ, ДокОбъект.Дата);
	ДокОбъект.Организация = СтруктураКВ.Организация;
	ДокОбъект.ПроцентКВ   = СтруктураКВ.ПроцентКВ;
	ДокОбъект.СуммаКВ     = Окр(ДокОбъект.Сумма * СтруктураКВ.ПроцентКВ / 100, 2);
	
	ДокОбъект.Записать();
	
	Если Параметры.ВыводитьСообщения Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Строка(ДокОбъект.Ссылка);
		Сообщение.КлючДанных = ДокОбъект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

