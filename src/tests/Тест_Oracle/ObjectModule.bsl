Перем КонтекстЯдра;
Перем Ожидаем;
Перем Утверждения;
Перем ГенераторТестовыхДанных;
Перем ЗапросыИзБД;
Перем УтвержденияПроверкаТаблиц;

#Область ЮнитТестирование

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.Добавить("DUAL");
	НаборТестов.Добавить("ПараметрДата");
	НаборТестов.Добавить("СтруктураADO");
	
КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	
КонецПроцедуры

Функция РазрешенСлучайныйПорядокВыполненияТестов() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

Процедура DUAL() Экспорт
	
	Структура = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Данные");
	ТекТаблицаВИБ = УправлениеСоединениямиВИБУХ.ПолучитьДанныеИзТаблицы(Структура.ВИБ, Структура.Таблица1);
	Утверждения.ПроверитьРавенство(ТекТаблицаВИБ.Количество(), 1, "В таблице должна быть одна запись");	
	
КонецПроцедуры

Процедура ПараметрДата() Экспорт
	
	Текст = ИнтеграцияСВнешнимиСистемамиУХ.АСЦ1_асцПолучитьТекстПараметра('2017-02-01 20:30:40', "Oracle");
	Утверждения.ПроверитьРавенство(Текст, "TO_DATE('01-02-2017 20:30:40', 'DD-MM-YYYY HH24:MI:SS')", "Не верный параметр");	
	
КонецПроцедуры

Процедура СтруктураADO() Экспорт
	
	Структура = ГенераторТестовыхДанных.СоздатьДанныеПоМакетам(ЭтотОбъект, "Данные");
	Таблицы = УправлениеСоединениямиВИБУХ.ПолучитьСтруктуруADO(Структура.ВИБ.СтрокаПодключения);
	
	Утверждения.ПроверитьБольше(Таблицы.Количество(), 0, "В таблице должны быть записи");	
		
КонецПроцедуры
