{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;
&НаКлиенте
Перем ЗапросыИзБД;
&НаКлиенте
Перем УтвержденияПроверкаТаблиц;

&НаКлиенте
Перем Форма;

#Область ЮнитТестирование

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин(""УтвержденияBDD"");
	Утверждения = КонтекстЯдра.Плагин(""БазовыеУтверждения"");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин(""СериализаторMXL"");
	ЗапросыИзБД = КонтекстЯдра.Плагин(""ЗапросыИзБД"");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин(""УтвержденияПроверкаТаблиц"");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	//ТАГ_АУД
	НаборТестов.Добавить(""Тест_104_АСП_Групповое"");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	Попытка
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСерверебезКонтекста
Функция ВСписок(Парам1, Парам2 = Неопределено)
	
	Список = Новый СписокЗначений;
	Список.Добавить(Парам1);
	
	Если Парам2 <> Неопределено Тогда
		Список.Добавить(Парам2);
	КонецЕсли;	
	
	Возврат Список;
	
КонецФункции	

&НаКлиентеНаСерверебезКонтекста
Процедура ОчиститьСтроки(Строки, МассивКолонок)
	
	Для каждого Строка из Строки Цикл
		
		Для каждого Колонка из МассивКолонок Цикл
			Строка[Колонка.Имя] = 0;
		КонецЦикла;	
		
		ОчиститьСтроки(Строка.ПолучитьЭлементы(), МассивКолонок);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_104_АСП_Групповое() Экспорт
	
	Макет = ПолучитьМакет(""Данные"");
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить(""ВидОтчета"",                   СтруктураДанных.ВидОтчета);
	СтруктураПараметров.Вставить(""СценарийОтбор"",               ВСписок(СтруктураДанных.Сценарий));
	СтруктураПараметров.Вставить(""ОрганизацияОтбор"",            ВСписок(СтруктураДанных.Организация));
	СтруктураПараметров.Вставить(""ПериодОтчетаОтбор"",           ВСписок(СтруктураДанных.Период1, СтруктураДанных.Период2));
	СтруктураПараметров.Вставить(""РучнойВыборПериодов"",         1);
	СтруктураПараметров.Вставить(""ГруппироватьПоИерархииСтрок"", Истина);
	СтруктураПараметров.Вставить(""ГруппироватьСтроки"",          Истина);
	
	Форма = ОткрытьФорму(""Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма"", СтруктураПараметров);
	Форма.УровеньТочности = 5;
	Форма.тестИнициализацияОтчетов();
	
	МассивКолонок = Форма.тестПолучитьМассивКолонок();
	ОчиститьСтроки(Форма.ТабДерево.ПолучитьЭлементы(), МассивКолонок);
	
	ТабОригинал = ПолучитьМакет(""Результат"");
	Форма.тестЗаполнитьДокументПоМакету(Форма, ТабОригинал, МассивКолонок);
	Форма.ТекущийЭлемент = Форма.Элементы[МассивКолонок[МассивКолонок.Количество() - 1].Имя];
	Форма.Элементы.ТабДерево.ТекущаяСтрока = 3;
	Форма.тестДействияФормыПоПравилуОбработки();
	
	Форма.ВыводитьВДеревоЧисло = 0;
	Форма.тестВыводитьВДеревоЧислоПриИзменении();
	
	Форма.тестКоманднаяПанельРедактированиеЗаписать();

	ТабДокумент = Форма.тестТабДокСПоказателями();
	УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабОригинал, ТабДокумент,, ""Не совпал результат"");
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьОбласть(ТабОригинал, НомерСтроки)
	
	Возврат ТабОригинал.ПолучитьОбласть(НомерСтроки, 1,,);
	
КонецФункции	

&НаСервере
Функция ПолучитьМакет(ИмяМакета = ""Данные"")
	
	ОбработкаОбъект = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	
КонецФункции
	",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",c7e622d1-7d5d-457b-bb8c-9c2ec69b0fde}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}