&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем ГенераторТестовыхДанных;
&НаКлиенте
Перем ЗапросыИзБД;
&НаКлиенте
Перем УтвержденияПроверкаТаблиц;

&НаКлиенте
Перем Форма;

#Область ЮнитТестирование

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	ГенераторТестовыхДанных = КонтекстЯдра.Плагин("СериализаторMXL");
	ЗапросыИзБД = КонтекстЯдра.Плагин("ЗапросыИзБД");
	УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин("УтвержденияПроверкаТаблиц");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	//ТАГ_АУД
	НаборТестов.Добавить("Тест_104_АСП_Групповое");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	
	Попытка
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
	Исключение
	КонецПопытки;	
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСерверебезКонтекста
Функция ВСписок(Парам1, Парам2 = Неопределено)
	
	Список = Новый СписокЗначений;
	Список.Добавить(Парам1);
	
	Если Парам2 <> Неопределено Тогда
		Список.Добавить(Парам2);
	КонецЕсли;	
	
	Возврат Список;
	
КонецФункции	

&НаКлиентеНаСерверебезКонтекста
Процедура ОчиститьСтроки(Строки, МассивКолонок)
	
	Для каждого Строка из Строки Цикл
		
		Для каждого Колонка из МассивКолонок Цикл
			Строка[Колонка.Имя] = 0;
		КонецЦикла;	
		
		ОчиститьСтроки(Строка.ПолучитьЭлементы(), МассивКолонок);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Тест_104_АСП_Групповое() Экспорт
	
	Макет = ПолучитьМакет("Данные");
	СтруктураДанных = ГенераторТестовыхДанных.СоздатьДанныеПоТабличномуДокументу(Макет,,, Истина);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОтчета",                   СтруктураДанных.ВидОтчета);
	СтруктураПараметров.Вставить("СценарийОтбор",               ВСписок(СтруктураДанных.Сценарий));
	СтруктураПараметров.Вставить("ОрганизацияОтбор",            ВСписок(СтруктураДанных.Организация));
	СтруктураПараметров.Вставить("ПериодОтчетаОтбор",           ВСписок(СтруктураДанных.Период1, СтруктураДанных.Период2));
	СтруктураПараметров.Вставить("РучнойВыборПериодов",         1);
	СтруктураПараметров.Вставить("ГруппироватьПоИерархииСтрок", Истина);
	СтруктураПараметров.Вставить("ГруппироватьСтроки",          Истина);
	
	Форма = ОткрытьФорму("Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма", СтруктураПараметров);
	Форма.УровеньТочности = 5;
	Форма.тестИнициализацияОтчетов();
	
	МассивКолонок = Форма.тестПолучитьМассивКолонок();
	ОчиститьСтроки(Форма.ТабДерево.ПолучитьЭлементы(), МассивКолонок);
	
	ТабОригинал = ПолучитьМакет("Результат");
	Форма.тестЗаполнитьДокументПоМакету(Форма, ТабОригинал, МассивКолонок);
	Форма.ТекущийЭлемент = Форма.Элементы[МассивКолонок[МассивКолонок.Количество() - 1].Имя];
	Форма.Элементы.ТабДерево.ТекущаяСтрока = 3;
	Форма.тестДействияФормыПоПравилуОбработки();
	
	Форма.ВыводитьВДеревоЧисло = 0;
	Форма.тестВыводитьВДеревоЧислоПриИзменении();
	
	Форма.тестКоманднаяПанельРедактированиеЗаписать();

	ТабДокумент = Форма.тестТабДокСПоказателями();
	УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТабОригинал, ТабДокумент,, "Не совпал результат");
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьОбласть(ТабОригинал, НомерСтроки)
	
	Возврат ТабОригинал.ПолучитьОбласть(НомерСтроки, 1,,);
	
КонецФункции	

&НаСервере
Функция ПолучитьМакет(ИмяМакета = "Данные")
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	
КонецФункции
	