
&Вместо("ADO_ПодготовитьТаблицуПолейДляЗапроса")
Функция АСЦ1_асцADO_ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаИспользованияПолейЗапроса.Поле,
	|	ПравилаИспользованияПолейЗапроса.Синоним,
	|	ПравилаИспользованияПолейЗапроса.АналитикаОперанда,
	|	ПравилаИспользованияПолейЗапроса.СоздаватьНовые,
	|	ПравилаИспользованияПолейЗапроса.РазделятьПоОрганизациям,
	|	ПравилаИспользованияПолейЗапроса.ОбновлятьРеквизитыПриИмпорте,
	|	ПравилаИспользованияПолейЗапроса.КодАналитики,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия,
	|	ПравилаИспользованияПолейЗапроса.ТаблицаАналитикиВИБ,
	|	ПравилаИспользованияПолейЗапроса.СпособЗаполнения,
	|	ПравилаИспользованияПолейЗапроса.ФиксированноеЗначение
	|ПОМЕСТИТЬ ПравилаИспользованияПолейЗапроса
	|ИЗ
	|	&ПравилаИспользованияПолейЗапроса КАК ПравилаИспользованияПолейЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИспользованияПолейЗапроса.Поле,
	|	ПравилаИспользованияПолейЗапроса.Синоним,
	|	ПравилаИспользованияПолейЗапроса.АналитикаОперанда,
	|	ПравилаИспользованияПолейЗапроса.СоздаватьНовые,
	|	ПравилаИспользованияПолейЗапроса.РазделятьПоОрганизациям,
	|	ПравилаИспользованияПолейЗапроса.ОбновлятьРеквизитыПриИмпорте,
	|	ПравилаИспользованияПолейЗапроса.КодАналитики КАК КодАналитики,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия,
	|	ПравилаИспользованияПолейЗапроса.СпособЗаполнения,
	|	ПравилаИспользованияПолейЗапроса.ФиксированноеЗначение,
	|	ПравилаИспользованияПолейЗапроса.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБПравило,
	|	ЕСТЬNULL(НастройкиСоответствия.РеквизитОбъектаКонсолидации, НЕОПРЕДЕЛЕНО) КАК РеквизитКонсолидации,
	|	ЕСТЬNULL(НастройкиСоответствия.РеквизитОбъектаВнешнейИБ, НЕОПРЕДЕЛЕНО) КАК РеквизитВИБ,
	|	ЕСТЬNULL(НастройкиСоответствия.НеИспользоватьДляСинхронизации, ИСТИНА) КАК НеИспользоватьДляСинхронизации,
	|	НастройкиСоответствия.ТипОбъектаКонсолидации,
	|	НастройкиСоответствия.ИмяОбъектаМетаданных,
	|	НастройкиСоответствия.ТаблицаАналитики КАК ТаблицаАналитики,
	|	НастройкиСоответствия.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБРеквизит,
	|	НастройкиСоответствия.ПолеДопРеквизитов,
	|	НастройкиСоответствия.НастройкаСоответствияРеквизит КАК НастройкаСоответствияРеквизит
	|ИЗ
	|	ПравилаИспользованияПолейЗапроса КАК ПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПолейДляИмпорта.РеквизитОбъектаКонсолидации КАК РеквизитОбъектаКонсолидации,
	|			ТаблицаПолейДляИмпорта.РеквизитОбъектаВнешнейИБ КАК РеквизитОбъектаВнешнейИБ,
	|			ТаблицаПолейДляИмпорта.НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	|			ТаблицаПолейДляИмпорта.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	|			ТаблицаПолейДляИмпорта.Ссылка.Владелец КАК Ссылка,
	|			ТаблицаПолейДляИмпорта.ТипОбъектаКонсолидации КАК ТипОбъектаКонсолидации,
	|			ТаблицаПолейДляИмпорта.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|			ТаблицаПолейДляИмпорта.ТаблицаАналитики КАК ТаблицаАналитики,
	|			ТаблицаПолейДляИмпорта.ПолеДопРеквизитов КАК ПолеДопРеквизитов,
	|			ТаблицаПолейДляИмпорта.ИспользованиеКонсолидация КАК ИспользованиеКонсолидация,
	|			ТаблицаПолейДляИмпорта.ИспользованиеВИБ КАК ИспользованиеВИБ,
	|			ТаблицаПолейДляИмпорта.ИерархияКонсолидации КАК ИерархияКонсолидации,
	|			ТаблицаПолейДляИмпорта.ИерархияВИБ КАК ИерархияВИБ,
	|			ТаблицаПолейДляИмпорта.НастройкаСоответствия КАК НастройкаСоответствияРеквизит
	|		ИЗ
	|			Справочник.СоответствиеПолейДляОбменаВИБ.ТаблицаПолейДляИмпорта КАК ТаблицаПолейДляИмпорта
	|		ГДЕ
	|			ТаблицаПолейДляИмпорта.Ссылка.Владелец В(&МассивНастроек)) КАК НастройкиСоответствия
	|		ПО ПравилаИспользованияПолейЗапроса.НастройкаСоответствия = НастройкиСоответствия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАналитики";
	
	Запрос.УстановитьПараметр("ПравилаИспользованияПолейЗапроса",ПравилаИспользованияПолей);
	Запрос.УстановитьПараметр("МассивНастроек",ПравилаИспользованияПолей.ВыгрузитьКолонку("НастройкаСоответствия"));
	
	РабочаяТаблицаПолей=ПравилаИспользованияПолей.СкопироватьКолонки();
	РабочаяТаблицаПолей.Колонки.Добавить("УровеньВложенности",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	РабочаяТаблицаПолей.Колонки.Добавить("НастройкаСоответствияРеквизит",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	РабочаяТаблицаПолей.Колонки.Добавить("РеквизитАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		
	Результат=Запрос.Выполнить().Выбрать();
	                                                                                           
	Пока Результат.Следующий() Цикл
		
		СтрокаТаблицы=РабочаяТаблицаПолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Результат);
		///+++Хижинков А.В. 27.10.2017 исправил. было ИмяТаблицыПравило=ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьИмяСвязаннойТаблицы(Результат.ТаблицаАналитикиВИБПравило);
		ИмяТаблицыПравило=УправлениеОтчетамиУХ.ПолучитьИмяСвязаннойТаблицы(Результат.ТаблицаАналитикиВИБПравило);
		
		Если ЗначениеЗаполнено(Результат.НастройкаСоответствия) Тогда
						
			ИмяТаблицыРеквизит=УправлениеОтчетамиУХ.ПолучитьИмяСвязаннойТаблицы(Результат.ТаблицаАналитикиВИБРеквизит);
			
			СтрокаТаблицы.Поле="["+ИмяТаблицыРеквизит+"]."+Результат.РеквизитВИБ;
			
			Если ИмяТаблицыПравило=ИмяТаблицыРеквизит Тогда // берем путь из источника
				
				СтрокаТаблицы.ТаблицаАналитикиВИБ=Результат.ТаблицаАналитикиВИБПравило;
				
			Иначе // Ссылочные реквизиты
				
				СтрокаТаблицы.ТаблицаАналитикиВИБ=Результат.ТаблицаАналитикиВИБПравило+Результат.ТаблицаАналитикиВИБРеквизит;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы.Поле="["+ИмяТаблицыПравило+"]."+Результат.Поле;
			СтрокаТаблицы.ТаблицаАналитикиВИБ=Результат.ТаблицаАналитикиВИБПравило;
			
		КонецЕсли;
		
		Если СтрНайти(Результат.КодАналитики,"Аналитика")>0
			ИЛИ СтрНайти(Результат.КодАналитики,"ТаблицаADO")>0 Тогда
			
			Если Результат.РеквизитКонсолидации="EnumRefValue" Тогда
				РабочийРеквизитВыгрузки="";
			Иначе
				РабочийРеквизитВыгрузки=СтрЗаменить(Результат.РеквизитКонсолидации,".EnumRefValue","");
			КонецЕсли;
			
			СтрокаТаблицы.Синоним = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Результат.КодАналитики+?(ЗначениеЗаполнено(РабочийРеквизитВыгрузки),"vzv"+СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"),""),,,Ложь);
			
		ИначеЕсли Результат.КодАналитики="Значение" Тогда
			
			СтрокаТаблицы.Синоним="Значение";
			
		Иначе
			
			СтрокаТаблицы.Синоним=ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СтрокаТаблицы.Поле,,,Ложь);
			
		КонецЕсли;
			
		СтрокаТаблицы.ТаблицаАналитики=Результат.ТаблицаАналитики;
		СтрокаТаблицы.РеквизитАналитики = Результат.РеквизитКонсолидации;

		СтрокаТаблицы.РеквизитАналитикиВИБ=Сред(Результат.РеквизитВИБ,2,СтрДлина(Результат.РеквизитВИБ)-2);
		
		Если Не ЗначениеЗаполнено(Результат.КодАналитики) Тогда
			СтрокаТаблицы.КодАналитики=ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Результат.Синоним,,,Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаОперанда) Тогда
			СтрокаТаблицы.АналитикаОперанда=Результат.ИмяОбъектаМетаданных;
		КонецЕсли;
		
		Если СтрокаТаблицы.КодАналитики="АналитикаВалюта" Тогда
			СтрокаТаблицы.ИндексАналитики=-1;
		ИначеЕсли СтрНайти(СтрокаТаблицы.КодАналитики,"Аналитика")>0 Тогда
			СтрокаТаблицы.ИндексАналитики=Число(СтрЗаменить(СтрокаТаблицы.КодАналитики,"Аналитика",""));
		КонецЕсли;
		
		СтрокаТаблицы.КодАналитики=СтрокаТаблицы.КодАналитики+Результат.ПолеДопРеквизитов;
		
		МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(СтрокаТаблицы.КодАналитики);
		
		СтрокаТаблицы.УровеньВложенности=МассивПутей.Количество();
				
	КонецЦикла;
	
	РабочаяТаблицаПолей.Сортировать("ИндексАналитики ВОЗР, УровеньВложенности ВОЗР");
	
	Возврат РабочаяТаблицаПолей;
	
КонецФункции // ПодготовитьТаблицуПолейДляЗапроса()

&Вместо("ADO_ПолучитьТаблицуДанныхПоЗапросу")
Функция АСЦ1_асцADO_ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса, ПроверочнаяТаблица = Неопределено, ДополнительныеСвойстваИмпорта = Неопределено) Экспорт
		
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ТаблицаАналитикиВИБ");
	ТаблицаПолей.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПолей.Колонки.Добавить("ПоляТаблицы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаПолей.Колонки.Добавить("ДанныеСвязаннойТаблицы");
	ТаблицаПолей.Колонки.Добавить("ДанныеОтбора",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаПолей.Колонки.Добавить("ДлинаПути",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0));
	ТаблицаПолей.Колонки.Добавить("СпособВычисленияПараметра");
	ТаблицаПолей.Колонки.Добавить("ЕстьОтбор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТипыПолучателей = Новый Соответствие;
	
	Для Каждого ТекПравило ИЗ СтруктураЗапроса.СтруктураПолей Цикл
		
		Для Каждого СтрПоле ИЗ ТекПравило.Значение Цикл
			
			Если СтрПоле.КодАналитики="Значение" ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
				Продолжить;
			КонецЕсли;
			
			РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей(СтрПоле.ТаблицаАналитикиВИБ,ТаблицаПолей);
			
			Если ОбщегоНазначенияУХ.СписокЗначенийНайтиПоПредставлению(РабочаяСтрока.ПоляТаблицы,"["+СтрПоле.Синоним+"]")=Неопределено Тогда
				РабочаяСтрока.ПоляТаблицы.Добавить(СтрПоле.Поле,"["+СтрПоле.Синоним+"]");
			КонецЕсли;
			
			ЦелевойТип = Неопределено;
			Если ЗначениеЗаполнено(СтрПоле.ТаблицаАналитики) Тогда
				
				Если Лев(СтрПоле.ТаблицаАналитики, СтрДлина("Перечисление.")) = "Перечисление." Тогда
					ЦелевойТип = Новый ОписаниеТипов("Строка");
				Иначе
					ТаблицаАналитика = Метаданные.НайтиПоПолномуИмени(СтрПоле.ТаблицаАналитики);
					Если НЕ ТаблицаАналитика = Неопределено Тогда
						
						Если СтрЧислоВхождений(СтрПоле.РеквизитАналитики, ".") < 2 Тогда
							
							Точка = СтрНайти(СтрПоле.РеквизитАналитики, ".");
							Если Точка = 0 Тогда
								РеквизитАналитики = СтрПоле.РеквизитАналитики;
							Иначе
								РеквизитАналитики = Сред(СтрПоле.РеквизитАналитики, Точка + 1);
							КонецЕсли;
							
							МетаданныеРеквизита=ОбщегоНазначенияУХ.ПолучитьРеквизитОбъекта(ТаблицаАналитика,РеквизитАналитики);
							
							Если НЕ МетаданныеРеквизита=Неопределено Тогда
								
								ЦелевойТип=МетаданныеРеквизита.Тип;
								
							КонецЕсли;
								
							//
							//Попытка
							//	МетаданныеРеквизита = ТаблицаАналитика.СтандартныеРеквизиты[РеквизитАналитики];
							//	ЦелевойТип = МетаданныеРеквизита.Тип;
							//Исключение
							//	Попытка
							//		МетаданныеРеквизита = ТаблицаАналитика.Реквизиты[РеквизитАналитики];
							//		ЦелевойТип = МетаданныеРеквизита.Тип;
							//	Исключение
							//	КонецПопытки;
							//КонецПопытки;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЦелевойТип = Неопределено Тогда
					Если ЦелевойТип.Типы().Количество() = 1 Тогда
						ТипыПолучателей.Вставить(СтрПоле.Поле, ЦелевойТип.Типы()[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРесурсов=Новый Структура;
	
	Если СтруктураЗапроса.Свойство("ТаблицаОперандов") Тогда 
		
		Для Каждого СтрОперанд ИЗ СтруктураЗапроса.ТаблицаОперандов Цикл
			
			РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей("({["+СтруктураЗапроса.ТаблицаADO.Имя+"]})",ТаблицаПолей);
			
			Если ОбщегоНазначенияУХ.СписокЗначенийНайтиПоПредставлению(РабочаяСтрока.ПоляТаблицы,"["+СтрОперанд.Код+"]")=Неопределено Тогда
				РабочаяСтрока.ПоляТаблицы.Добавить(СтрОперанд.Ресурс,"["+СтрОперанд.Код+"]",Истина);
				СтруктураРесурсов.Вставить(СтрОперанд.Код,СтрОперанд.Ресурс);
			КонецЕсли;
			
			ТипыПолучателей.Вставить(СтрОперанд.Ресурс, КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(СтрОперанд.ТипЗначенияПоказателя).Типы()[0]);
			
		КонецЦикла;
			
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("СтруктураРесурсов",СтруктураРесурсов);
		
	Для Каждого СтрокаПараметр ИЗ СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
		
		ДанныеОтбора=СтрокаПараметр.УточнениеСпособаОпределения;
		
		РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей(СтрокаПараметр.ТаблицаАналитикиВИБ,ТаблицаПолей);
		РабочаяСтрока.ЕстьОтбор=Истина;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
								
			РабочаяСтрока.ДанныеОтбора.Добавить(СтрокаПараметр.ЗначениеИзКонтекста);		
		
		ИначеЕсли ТипЗнч(ДанныеОтбора)=Тип("СписокЗначений") Тогда
			
			Для Каждого Отбор ИЗ ДанныеОтбора Цикл
				
				РабочаяСтрока.ДанныеОтбора.Добавить(Отбор.Значение);
				
			КонецЦикла;
			
		Иначе
			
			СписокОтбора=ПолучитьСписокОтбора(СтрокаПараметр);
			
			Для Каждого Отбор ИЗ СписокОтбора Цикл
				
				РабочаяСтрока.ДанныеОтбора.Добавить(Отбор.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПолей.Сортировать("ДлинаПути Возр");
	
	Если ТаблицаПолей.Количество()=0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
		
	ВыбранныеТаблицы=Новый ТаблицаЗначений;
	ВыбранныеТаблицы.Колонки.Добавить("ИмяТаблицы");
	ВыбранныеТаблицы.Колонки.Добавить("КоличествоВыборок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	
	ТаблицаСоединений=Новый ТаблицаЗначений;
	ТаблицаСоединений.Колонки.Добавить("ИмяЛевойТаблицы");
	ТаблицаСоединений.Колонки.Добавить("ИмяПравойТаблицы");
	ТаблицаСоединений.Колонки.Добавить("УсловиеСвязи");
	
	ТекстПоля="";
	ТекстОтбор="";
	ТекстПроверка="";
	
	СтрПерваяТаблица=ТаблицаПолей[0];
	
	ТекстВыборки="["+СтрПерваяТаблица.ИмяТаблицы+"] AS ["+СтрПерваяТаблица.ИмяТаблицы+"]";
	
	ФункцииПриведения = Новый Соответствие;
	//+++Хижинков А.В. 20.01.2017 добавил условие для формирования корректного SQL запроса(
	
	//АСЦ Ситников++
	СтрокаПодключения = СтруктураЗапроса.ВИБ.ВИБ.СтрокаПодключения;
	Если СтрНайти(СтрокаПодключения, "SQLOLEDB") > 0 Тогда
		ТипSQL = "SQLOLEDB"; // MSSql
	ИначеЕсли СтрНайти(СтрокаПодключения, "Oracle") > 0 Тогда	
		ТипSQL = "Oracle";
	Иначе	
		ТипSQL = "";
	КонецЕсли;
	//АСЦ Ситников--
	ЭтоSQL = (ТипSQL = "SQLOLEDB" 
	     ИЛИ ТипSQL = "Oracle");
	Если ЭтоSQL Тогда
		ФункцииПриведения.Вставить(Тип("Булево"), "(");
		ФункцииПриведения.Вставить(Тип("Строка"), "((");
		ФункцииПриведения.Вставить(Тип("Число"), "(");
		ФункцииПриведения.Вставить(Тип("Дата"), "(");
		
	Иначе
		ФункцииПриведения.Вставить(Тип("Булево"), "CBool(");
		ФункцииПриведения.Вставить(Тип("Строка"), "Trim(CStr(");
		ФункцииПриведения.Вставить(Тип("Число"), "CDbl(");
		ФункцииПриведения.Вставить(Тип("Дата"), "CDate(");
	КонецЕсли;
	//+++)Хижинков А.В. 20.01.2017 добавил условие для формирования корректного SQL запроса
	ПравыеСкобки = Новый Соответствие;
	ПравыеСкобки.Вставить(Тип("Булево"), ")");
	ПравыеСкобки.Вставить(Тип("Строка"), "))");
	ПравыеСкобки.Вставить(Тип("Число"), ")");
	ПравыеСкобки.Вставить(Тип("Дата"), ")");
	
	ТипыКолонокРезультата = Новый Соответствие;
	
	Для Каждого СтрПоле ИЗ СтрПерваяТаблица.ПоляТаблицы Цикл
		
		ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
		
		Если ТипПолучателя = Неопределено Тогда
			ТипПолучателя = Тип("Строка");
		КонецЕсли;
		
		ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
		
		ФункцияПриведения = ФункцииПриведения[ТипПолучателя];
		ПраваяСкобка = ПравыеСкобки[ТипПолучателя];
		
		Если ТипПолучателя = Тип("Число") Тогда
			
			ТекстПоляИсточника = "CASE WHEN " + СтрПоле.Значение + " IS NULL THEN  0 ELSE " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + " END";
			
		Иначе
			
			ТекстПоляИсточника = "CASE WHEN " + СтрПоле.Значение + " IS NULL THEN NULL ELSE " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + " END";
			
		КонецЕсли;
		
		ТекстПроверка=ТекстПроверка+?(ПустаяСтрока(ТекстПроверка),""," AND ")+СтрПоле.Значение+" IS NULL";			
		ТекстПоля=ТекстПоля+","+ТекстПоляИсточника+" AS "+СтрПоле.Представление;
								
	КонецЦикла;
	
	ТекущийОтбор="";
	МассивСоответствий=Новый Массив;
	
	Для Каждого СтрОтбор ИЗ СтрПерваяТаблица.ДанныеОтбора Цикл
				
		Если ТипЗнч(СтрОтбор.Значение)=Тип("Структура") И СтрОтбор.Значение.Свойство("Интервал") Тогда // 
			
			//АСЦ Ситников++
			//ТекущийОтбор=ПолучитьСтрокуОтбораПоДате(СтрПерваяТаблица.ИмяТаблицы,СтрОтбор.Значение);
			ТекущийОтбор=АСЦ1_асцПолучитьСтрокуОтбораПоДате(СтрПерваяТаблица.ИмяТаблицы,СтрОтбор.Значение, ТипSQL);
			//АСЦ Ситников--
			
			Если Не ПустаяСтрока(ТекущийОтбор) Тогда
				
				ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ТекущийОтбор+")";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрОтбор.Значение)=Тип("Соответствие") Тогда
			
			МассивСоответствий.Добавить(СтрОтбор.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоответствий.Количество()>0 Тогда
		
		ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+АСЦ1_асцПолучитьТекстОтбораПоСписку(СтрПерваяТаблица.ИмяТаблицы,МассивСоответствий, ТипSQL)+")";
		
	КонецЕсли;
	
	// Пристыковываем таблицы с отбором по inner join
	
	СтрокиСОтбором=ТаблицаПолей.Скопировать(Новый Структура("ЕстьОтбор",Истина));
	СтрокиСОтбором.Сортировать("ДлинаПути Возр");
	
	Для Каждого Строка ИЗ СтрокиСОтбором Цикл
		
		Если Строка.ДлинаПути=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ПОЛЯ ТАБЛИЦЫ
		
		РабочийПсевдоним=ПолучитьРабочийПсевдонимТаблицы(Строка.ИмяТаблицы, ВыбранныеТаблицы);
		
		Для Каждого СтрПоле ИЗ Строка.ПоляТаблицы Цикл
			
			ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
			
			Если ТипПолучателя = Неопределено Тогда
				ТипПолучателя = Тип("Строка");
			КонецЕсли;
			
			ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
			
			ФункцияПриведения = ФункцииПриведения[ТипПолучателя];
			ПраваяСкобка = ПравыеСкобки[ТипПолучателя];
			
			ТекстПоляИсточника = "CASE WHEN " + СтрПоле.Значение + " IS NULL THEN  NULL ELSE " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + " END";
			ТекстПроверка=ТекстПроверка+?(ПустаяСтрока(ТекстПроверка),""," AND ")+СтрПоле.Значение+" IS NULL";
							
			ТекстПоля=ТекстПоля+","+ТекстПоляИсточника+" AS "+СтрПоле.Представление;	
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ СОЕДИНЕНИЯ ТАБЛИЦЫ
		
		ИмяЛевойТаблицы="["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
		Для Каждого КлючИЗначение ИЗ Строка.ДанныеСвязаннойТаблицы Цикл
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПравойТаблицы=КлючИЗначение.Ключ;
			
			МассивПутей=ТаблицаСоединений.НайтиСтроки(Новый Структура("ИмяЛевойТаблицы,ИмяПравойТаблицы",ИмяЛевойТаблицы,ИмяПравойТаблицы));
			
			Если МассивПутей.Количество()=0 Тогда
				
				ТекстСоединение="";
				
				Если КлючИЗначение.Ключ="["+Строка.ИмяТаблицы+"]" Тогда
					
					ПсевдонимСоединения=РабочийПсевдоним;
					ИмяТаблицы=Строка.ИмяТаблицы;
					
				Иначе
					
					ИмяТаблицы=Сред(ИмяПравойТаблицы,2,СтрДлина(ИмяПравойТаблицы)-2);
					ПсевдонимСоединения=ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы);
					
				КонецЕсли;
				
				ТекстВыборки="("+ТекстВыборки+" INNER JOIN "+КлючИЗначение.Ключ+" AS ["+ПсевдонимСоединения+"] ON "+СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,КлючИЗначение.Значение)+")";
				
				НоваяСтрока=ТаблицаСоединений.Добавить();
				НоваяСтрока.ИмяЛевойТаблицы=ИмяЛевойТаблицы;
				НоваяСтрока.ИмяПравойТаблицы=ИмяПравойТаблицы;	
				
			КонецЕсли;
			
			ИмяЛевойТаблицы=ИмяПравойТаблицы;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ОТБОРЫ ТАБЛИЦЫ
		
		МассивСоответствий=Новый Массив;
		
		Для Каждого СтрОтбор ИЗ Строка.ДанныеОтбора Цикл
			
			Если ТипЗнч(СтрОтбор.Значение)=Тип("Структура") И СтрОтбор.Значение.Свойство("Интервал") Тогда // 
				
				//АСЦ Ситников++
				//ТекущийОтбор=ПолучитьСтрокуОтбораПоДате(РабочийПсевдоним,СтрОтбор.Значение);
				ТекущийОтбор=АСЦ1_асцПолучитьСтрокуОтбораПоДате(РабочийПсевдоним,СтрОтбор.Значение, ТипSQL);
				//АСЦ Ситников--
				
				Если Не ПустаяСтрока(ТекущийОтбор) Тогда
					
					ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ТекущийОтбор+")";
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрОтбор.Значение)=Тип("Соответствие") Тогда
				
				МассивСоответствий.Добавить(СтрОтбор.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСоответствий.Количество()>0 Тогда
			
			ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+АСЦ1_асцПолучитьТекстОтбораПоСписку(РабочийПсевдоним,МассивСоответствий,ТипSQL)+")";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пристыковываем таблицы без отбора по left join
	
	СтрокиБезОтбора=ТаблицаПолей.Скопировать(Новый Структура("ЕстьОтбор",Ложь));
	СтрокиБезОтбора.Сортировать("ДлинаПути Возр");
	
	Для Каждого Строка ИЗ СтрокиБезОтбора Цикл
		
		Если Строка.ДлинаПути=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ПОЛЯ ТАБЛИЦЫ
		
		РабочийПсевдоним=ПолучитьРабочийПсевдонимТаблицы(Строка.ИмяТаблицы, ВыбранныеТаблицы);
		
		Для Каждого СтрПоле ИЗ Строка.ПоляТаблицы Цикл
			
			ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
			
			Если ТипПолучателя = Неопределено Тогда
				ТипПолучателя = Тип("Строка");
			КонецЕсли;
			
			ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
			
			ФункцияПриведения = ФункцииПриведения[ТипПолучателя];
			ПраваяСкобка = ПравыеСкобки[ТипПолучателя];
			
			ТекстПоляИсточника = "CASE WHEN " + СтрПоле.Значение + " IS NULL THEN  NULL ELSE " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + " END";
			ТекстПроверка=ТекстПроверка+?(ПустаяСтрока(ТекстПроверка),""," AND ")+СтрПоле.Значение+" IS NULL";
							
			ТекстПоля=ТекстПоля+","+ТекстПоляИсточника+" AS "+СтрПоле.Представление;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ СОЕДИНЕНИЯ ТАБЛИЦЫ
		
		ИмяЛевойТаблицы="["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
		Для Каждого КлючИЗначение ИЗ Строка.ДанныеСвязаннойТаблицы Цикл
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПравойТаблицы=КлючИЗначение.Ключ;
			
			МассивПутей=ТаблицаСоединений.НайтиСтроки(Новый Структура("ИмяЛевойТаблицы,ИмяПравойТаблицы",ИмяЛевойТаблицы,ИмяПравойТаблицы));
			
			Если МассивПутей.Количество()=0 Тогда
				
				ТекстСоединение="";
				
				Если КлючИЗначение.Ключ="["+Строка.ИмяТаблицы+"]" Тогда
					
					ПсевдонимСоединения=РабочийПсевдоним;
					ИмяТаблицы=Строка.ИмяТаблицы;
					
				Иначе
					
					ИмяТаблицы=Сред(ИмяПравойТаблицы,2,СтрДлина(ИмяПравойТаблицы)-2);
					ПсевдонимСоединения=ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы);
					
				КонецЕсли;
				
				ТекстВыборки="("+ТекстВыборки+" LEFT JOIN "+КлючИЗначение.Ключ+" AS ["+ПсевдонимСоединения+"] ON "+СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,КлючИЗначение.Значение)+")";
				
				НоваяСтрока=ТаблицаСоединений.Добавить();
				НоваяСтрока.ИмяЛевойТаблицы=ИмяЛевойТаблицы;
				НоваяСтрока.ИмяПравойТаблицы=ИмяПравойТаблицы;
				
			КонецЕсли;
			
			ИмяЛевойТаблицы=ИмяПравойТаблицы;
			
		КонецЦикла;
				
	КонецЦикла;
	
	ТекстЗапроса="SELECT "+Сред(ТекстПоля,2)+" FROM "+ТекстВыборки;
	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстЗапроса=ТекстЗапроса+" WHERE ("+ТекстОтбор+" AND NOT ("+ТекстПроверка+"))";
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+"WHERE NOT ("+ТекстПроверка+")";
		
	КонецЕсли;
		
	СтруктураЗапроса.Вставить("ТаблицаПолей",ТаблицаПолей);
	
	//АСЦ Ситников++
	Если ТипSQL = "Oracle" Тогда
		// SELECT "Поле" FROM "Таблица"
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[", """");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "]", """");
		// Oracle не понимает AS в разделе FROM
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " AS ", " ");
	КонецЕсли;	
	//АСЦ Ситников--
	
	Возврат ADO_ПолучитьДанныеИзЗапроса(ТекстЗапроса, СтруктураЗапроса, ТипыКолонокРезультата, ДополнительныеСвойстваИмпорта);
 	
КонецФункции // ADO_ПолучитьТаблицуДанныхПоЗапросу() 

&Вместо("ПолучитьСписокОтбора")
Функция АСЦ1_асцПолучитьСписокОтбора(СтрокаПараметр)
	
	ПараметрыВычисления=СтрокаПараметр.УточнениеСпособаОпределения;
	СписокОтбора=Новый СписокЗначений;
	
	Если ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(СтрокаПараметр.ЗначениеИзКонтекста)) Тогда  //+++Хижинков А.В. 31.01.2017 поставил ТипЗнч
		
		ДанныеОтбора=Новый Соответствие;
		//ДанныеОтбора.Вставить(СтрокаПараметр.ИмяПараметра,СтрокаПараметр.ЗначениеИзКонтекста);
		//+++Хижинков А.В. 31.01.2017 исправил имя параметра (
		ДанныеОтбора.Вставить(?(ЗначениеЗаполнено(СтрокаПараметр.ПолеБД),СтрокаПараметр.ПолеБД,СтрокаПараметр.ИмяПараметра),СтрокаПараметр.ЗначениеИзКонтекста);
		//+++)Хижинков А.В. 31.01.2017 исправил имя параметра 

		СписокОтбора.Добавить(ДанныеОтбора);
		
	ИначеЕсли ТипЗнч(ПараметрыВычисления)=Тип("Структура") И ПараметрыВычисления.Свойство("ДанныеСинхронизации") Тогда
		
		СписокСинхронизации=ПараметрыВычисления.ДанныеСинхронизации;
		ТекТаблицаАналитики=СписокСинхронизации[0].ТаблицаАналитики;
		
		Если ТипЗнч(СтрокаПараметр.ЗначениеИзКонтекста)=Тип("СписокЗначений") Тогда
			
			Для Каждого Элемент Из СтрокаПараметр.ЗначениеИзКонтекста Цикл
				
				ДанныеОтбора=Новый Соответствие;
				
				Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
					
					ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(Элемент.Значение,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ДанныеОтбора.Вставить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,ЗначениеРеквизита);
					
				КонецЦикла;
				
				СписокОтбора.Добавить(ДанныеОтбора);
				
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПараметр.ЗначениеИзКонтекста) Тогда
			
			ДанныеОтбора=Новый Соответствие;
			
			Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
				
				ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(СтрокаПараметр.ЗначениеИзКонтекста,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ДанныеОтбора.Вставить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,ЗначениеРеквизита);
				
			КонецЦикла;
			
			СписокОтбора.Добавить(ДанныеОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокОтбора;
		
КонецФункции // ПолучитьСписокОтбора() 

Функция АСЦ1_асцПолучитьТекстОтбораПоСписку(ИмяТаблицы,МассивСоответствий, ТипSQL = "")  //+++Ситников А.В. 21.11.2017 заменил ЭтоSQL на ТипSQL = ""
	
	ТекстОтборСписок="";
	
	Для Каждого Соответствие ИЗ МассивСоответствий Цикл
		
		ТекстОтборСтрока="";
		
		Для Каждого КлючИЗначение ИЗ Соответствие Цикл
			
			ТекстОтборСтрока=ТекстОтборСтрока+" AND (["+ИмяТаблицы+"]."+КлючИЗначение.Ключ+"="+АСЦ1_асцПолучитьТекстПараметра(КлючИЗначение.Значение,ТипSQL)+")"; //+++Ситников А.В. 21.11.2017 добавил параметр SQL 
			
		КонецЦикла;
		
		ТекстОтборСтрока=Сред(ТекстОтборСтрока,6);
		
		ТекстОтборСписок=ТекстОтборСписок+" OR ("+ТекстОтборСтрока+")";
		
	КонецЦикла;
	
	Возврат "("+Сред(ТекстОтборСписок,5)+")";
	
КонецФункции // ПолучитьТекстОтбораПоСписку() 
		
Функция АСЦ1_асцПолучитьТекстПараметра(ЗначениеПараметра, ТипSQL = "") Экспорт//+++Ситников А.В. 21.11.2017 заменил ЭтоSQL на ТипSQL = ""
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Число") Тогда
		
		Возврат ЗначениеПараметра;
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Строка") Тогда
		
		Возврат "'"+ЗначениеПараметра+"'";
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Дата") Тогда
		//+++Хижинков А.В. 31.01.2017 добавил для SQL баз(
		Если ТипSQL = "SQLOLEDB" Тогда
			Возврат "CONVERT(datetime, '"+Формат(ЗначениеПараметра,"ДФ=""М/д/гггг ЧЧ:мм:сс""")+"')";
		ИначеЕсли ТипSQL = "Oracle" Тогда
			Возврат "TO_DATE('" + Формат(ЗначениеПараметра, "ДФ=""дд-ММ-гггг ЧЧ:мм:сс""") + "', 'DD-MM-YYYY HH24:MI:SS')";  //АСЦ Ситников++
		Иначе
			Возврат "#"+Формат(ЗначениеПараметра,"ДФ=""М/д/гггг ЧЧ:мм:сс""")+"#";
		КонецЕсли;
		//+++)Хижинков А.В. 31.01.2017 добавил для SQL баз
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Булево") Тогда
		
		Если ЗначениеПараметра=Истина Тогда
			
			Возврат "True"
			
		Иначе
			
			Возврат "False";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьТекстПараметра() 

Функция АСЦ1_асцПолучитьСтрокуОтбораПоДате(ИмяТаблицы,СтруктураОтбора, ТипSQL = "")//+++Ситников А.В. 27.11.2017
	
	ПолеОтбора=СтруктураОтбора.ИмяПоля;
	
	Если СтруктураОтбора.Свойство("ДатаНач") И СтруктураОтбора.Свойство("ДатаКон") Тогда
		
		ТекущийОтбор="((["+ИмяТаблицы+"]."+ПолеОтбора+">="+АСЦ1_асцПолучитьТекстПараметра(СтруктураОтбора.ДатаНач, ТипSQL)+") AND (["+ИмяТаблицы+"]."+ПолеОтбора+"<="+АСЦ1_асцПолучитьТекстПараметра(СтруктураОтбора.ДатаКон, ТипSQL)+"))"; 
		
	ИначеЕсли СтруктураОтбора.Свойство("ДатаНач") Тогда
		
		ТекущийОтбор="(["+ИмяТаблицы+"]."+ПолеОтбора+">="+АСЦ1_асцПолучитьТекстПараметра(СтруктураОтбора.ДатаНач, ТипSQL)+")";
		
	ИначеЕсли СтруктураОтбора.Свойство("ДатаКон") Тогда
		
		ТекущийОтбор= "(["+ИмяТаблицы+"]."+ПолеОтбора+"<="+АСЦ1_асцПолучитьТекстПараметра(СтруктураОтбора.ДатаКон, ТипSQL)+")";
		
	Иначе
		
		ТекущийОтбор="";
		
	КонецЕсли;
	
	Возврат ТекущийОтбор;
	
КонецФункции // ПолучитьСтрокуОтбораПоДате()

// Функция подгототавливает структура для выполнения запроса при обращении к регистру бухгалтерии, накопления 
// для ВИБ 1С: Предприятие 8 и 7.7.
&Вместо("ПодготовитьСтруктуруЗапроса")
Функция АСЦ1_асцПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос,ПроизвольныйЗапрос=Ложь) Экспорт
	
	Если  КонтекстОтчета.База=Неопределено Тогда
		
		Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
			
			ПараметрыПодключения=Новый Структура("Организация,Проект,ПериодОтчета,Сценарий,ВидОтчета,ПравилоОбработки,ИмяФайла");
			
			ЗаполнитьЗначенияСвойств(ПараметрыПодключения,КонтекстОтчета);
						
			База=УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(КонтекстОтчета.ИспользуемаяИБ,ПараметрыПодключения);
			
			Если База=Неопределено Тогда
				
				ОбновитьПовторноИспользуемыеЗначения();
				База=УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(КонтекстОтчета.ИспользуемаяИБ,ПараметрыПодключения);
				
			КонецЕсли;
						
		Иначе
			
			ПараметрыПодключения=Неопределено;
			База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(КонтекстОтчета.ИспользуемаяИБ, 1);
			
			Если База=Неопределено Тогда
				
				ОбновитьПовторноИспользуемыеЗначения();
				База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(КонтекстОтчета.ИспользуемаяИБ, 1);
				
			КонецЕсли;
			
		КонецЕсли;
			
	Иначе
		
		База=КонтекстОтчета.База;
		
	КонецЕсли;
	
	Если НЕ (КонтекстОтчета.ИспользуемаяИБ.ИспользоватьWS 
		ИЛИ КонтекстОтчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 
		ИЛИ КонтекстОтчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO
		ИЛИ База=Неопределено) Тогда
		
		Если ПроизвольныйЗапрос Тогда
			ПостроительЗапросаВИБ = База.NewObject("Запрос");
		Иначе
			ПостроительЗапросаВИБ = База.NewObject("ПостроительЗапроса");
		КонецЕсли;
		
	Иначе
		ПостроительЗапросаВИБ = Неопределено;
	КонецЕсли;
	
	Если СтрЗапрос.СтруктураЗапроса=Неопределено Тогда
		СтруктураЗапроса=Новый Структура;
	Иначе	
		СтруктураЗапроса=СтрЗапрос.СтруктураЗапроса;
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("ОбъектЗапрос",ПостроительЗапросаВИБ);
	СтруктураЗапроса.Вставить("ТекстЗапроса",СтрЗапрос.ТекстЗапроса);
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		СтрЗначения=УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр);
		//+++Хижинков А.В. 30.10.2017 Добавил условие для проверки операндов(
		Если ТипЗнч(КонтекстОтчета) = Тип("Структура") И КонтекстОтчета.Свойство("ТолькоПроверка") И КонтекстОтчета.ТолькоПроверка Тогда
			СтрокаПараметр.ЗначениеИзКонтекста = СтрокаПараметр.ЗначениеДляПроверки;
		КонецЕсли;
		//+++)Хижинков А.В. 30.10.2017 Добавил условие для проверки операндов
		
		//АСЦ Ситников++
		// Ошибочно вместо имени поля подставляется имя параметра
		Если СтрокаПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов
			И ТипЗнч(СтрокаПараметр.ЗначениеИзКонтекста) = Тип("Структура")
			И СтрокаПараметр.ЗначениеИзКонтекста.Свойство("ИмяПоля") Тогда
			СтрокаПараметр.ЗначениеИзКонтекста.ИмяПоля = СтрокаПараметр.ПолеБД;
		Конецесли;	
		//АСЦ Ситников--
		
	КонецЦикла;
	
	СтруктураЗапроса.Вставить("ТаблицаВычисленияПараметров",ТекПравилаВычисленияПараметров);
	СтруктураЗапроса.Вставить("ВИБ",Новый Структура("ВИБ,ТипПодключения",КонтекстОтчета.ИспользуемаяИБ,1));
	СтруктураЗапроса.Вставить("ПроизвольныйЗапрос",ПроизвольныйЗапрос);
	СтруктураЗапроса.Вставить("ПланСчетов",СтрЗапрос.ПланСчетов);		
	
	СтруктураЗапроса.Вставить("Организация");
	СтруктураЗапроса.Вставить("Проект");
	СтруктураЗапроса.Вставить("ПериодОтчета");
	СтруктураЗапроса.Вставить("Сценарий");
	СтруктураЗапроса.Вставить("ВидОтчета");
	СтруктураЗапроса.Вставить("ПравилоОбработки");
	
	ЗаполнитьЗначенияСвойств(СтруктураЗапроса,КонтекстОтчета);
	
	Если СтрЗапрос.СтруктураЗапроса.Свойство("СтрокаСоединения") Тогда
		
		СтруктураЗапроса.Вставить("СтрокаСоединения",СтрЗапрос.СтруктураЗапроса.СтрокаСоединения);
		
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("База",База);
		
	Возврат СтруктураЗапроса;
	
КонецФункции

&Вместо("ADO_ПолучитьДанныеИзЗапроса")
Функция АСЦ1_асцADO_ПолучитьДанныеИзЗапроса(ТекстЗапроса, СтруктураЗапроса, ТипыКолонокРезультата, ДополнительныеСвойстваИмпорта = Неопределено)
	
	Попытка	
		
		Соединение=СтруктураЗапроса.База;
		
		ТаблицаДанных=Новый ТаблицаЗначений;
		
		мНаборЗаписей = Соединение.Execute(ТекстЗапроса);
		
		ДанныеПреобразования=Новый Соответствие;
		
		ОграниченияСтрок = Новый Соответствие;
		
		ТекстГруппировки="";
		ТекстЗначения="";
		
		Для Каждого Поле ИЗ мНаборЗаписей.Fields Цикл
						
			ТипКолонки = ТипыКолонокРезультата[Поле.Name];
			
			Если ТипКолонки = Неопределено Тогда
				ТипКолонки = УправлениеСоединениямиВИБУХ.ВернутьНаименованиеТипа(Поле.Type, Поле.DefinedSize, 18, 5);
			Иначе
				Типы = Новый Массив;
				Типы.Добавить(ТипКолонки);
				ТипКолонки = Новый ОписаниеТипов(Типы);
			КонецЕсли;
			
			ТаблицаДанных.Колонки.Добавить(Поле.Name, ТипКолонки);
			
			Если ТипКолонки = Новый ОписаниеТипов("Строка") Тогда
				ОграниченияСтрок.Вставить(Поле.Name, 0);
			КонецЕсли;
			
			Если ТипКолонки=Новый ОписаниеТипов("Число") И СтруктураЗапроса.СтруктураРесурсов.Свойство(Поле.Name) Тогда
				
				ТекстЗначения=ТекстЗначения+?(ЗначениеЗаполнено(ТекстЗначения),",","")+Поле.Name;
				
			Иначе
				
				ТекстГруппировки=ТекстГруппировки+?(ЗначениеЗаполнено(ТекстГруппировки),",","")+Поле.Name;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		//ЕстьПреобразованиеТипов=(ДанныеПреобразования.Количество()>0);
		
		//Попытка
		
		Индекс=1;
		
		Пока НЕ мНаборЗаписей.EOF Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			
			Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
				
				Попытка
					
					Value = мНаборЗаписей.Fields(Колонка.Имя).Value;
					Если НЕ Value = NULL Тогда
						Если ТипыКолонокРезультата[Колонка.Имя] = Тип("Булево") И ТипЗнч(Value) = Тип("Число") Тогда
							Value = ?(Value = 0, Ложь, Истина);
						ИначеЕсли НЕ ОграниченияСтрок[Колонка.Имя] = Неопределено Тогда
							Длина = СтрДлина(Value);
							Если Длина > ОграниченияСтрок[Колонка.Имя] Тогда
								ОграниченияСтрок.Вставить(Колонка.Имя, Длина);
							КонецЕсли;
						КонецЕсли;
						
						НоваяСтрока[Колонка.Имя] = Value;
												
					КонецЕсли;
					
				Исключение
					
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ИнтеграцияСВнешнимиСистемамиУХ.ADO_ПолучитьДанныеИзЗапроса",,, "Системная ошибка. Подробности в полном протоколе.", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				КонецПопытки;
					
				//КонецЕсли;
				
			КонецЦикла;
			
			Индекс=Индекс+1;
			мНаборЗаписей.MoveNext();
			
		КонецЦикла;
				
		мНаборЗаписей.Close();
		
		Для Каждого ЭлементОграниченияСтрок Из ОграниченияСтрок Цикл
			Колонка = ТаблицаДанных.Колонки[ЭлементОграниченияСтрок.Ключ];
			Колонка.Имя = "vzv" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
			НоваяКолонка = ТаблицаДанных.Колонки.Добавить(ЭлементОграниченияСтрок.Ключ, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(?(ЭлементОграниченияСтрок.Значение = 0, 1, ЭлементОграниченияСтрок.Значение))));
			ТаблицаДанных.ЗагрузитьКолонку(ТаблицаДанных.ВыгрузитьКолонку(Колонка), НоваяКолонка);
			ТаблицаДанных.Колонки.Удалить(Колонка);
		КонецЦикла; 
		
		ТаблицаДанных.Свернуть(ТекстГруппировки,ТекстЗначения);
		
	Исключение
		
		ТекстОшибки="";
		
		Если СтруктураЗапроса.Свойство("СтрокаСоединения") Тогда
			
			ТекстОшибки = ПроверитьИсточникADO(СтруктураЗапроса, ДополнительныеСвойстваИмпорта);
			
		КонецЕсли;
		
		ЕстьКритичныеОшибки = Истина;
		Если (ДополнительныеСвойстваИмпорта <> Неопределено) 
			И ПропуститьОшибкиОтсутствияТаблиц(ДополнительныеСвойстваИмпорта) Тогда 
			ЕстьКритичныеОшибки = Ложь; 
		КонецЕсли;
		
		Если ЕстьКритичныеОшибки Тогда
		
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ИнтеграцияСВнешнимиСистемамиУХ.ADO_ПолучитьДанныеИзЗапроса.1011",,,ТекстОшибки,
															ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())+"
															|"+ТекстЗапроса);
			ВызватьИсключение;
		
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ТаблицаДанных;
	
КонецФункции


&Вместо("ТрансформироватьВнешниеДанные")
Функция АСЦ1_асцТрансформироватьВнешниеДанные(ЗНАЧ КонтекстОтчета,ТаблицаДанных,ПравилаИспользованияПолей) Экспорт
	
	Если ТипЗнч(КонтекстОтчета)=Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
		КонтекстОтчета=КонтекстОтчета.ДанныеОбъекта;
	КонецЕсли;
	
	Если НЕ КонтекстОтчета.Свойство("Загрузка") Тогда
		КонтекстОтчета.Вставить("Загрузка",Истина);
	КонецЕсли;
	
	Если ПравилаИспользованияПолей.Колонки.Найти("СпособЗаполнения")=Неопределено Тогда
		
		ПравилаИспользованияПолей.Колонки.Добавить("СпособЗаполнения");
		ПравилаИспользованияПолей.Колонки.Добавить("ФиксированноеЗначение");
		
	КонецЕсли;
	
	Если ТаблицаДанных.Количество()=0 Тогда
		УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно(ТаблицаДанных,ПравилаИспользованияПолей,КонтекстОтчета);
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	ЕстьНастройкиСоответствия=Ложь;
	
	Для Каждого Строка ИЗ ПравилаИспользованияПолей Цикл
		
		Если ЗначениеЗаполнено(Строка.НастройкаСоответствия) Тогда
			
			ЕстьНастройкиСоответствия=Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьНастройкиСоответствия Тогда
		
		УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно(ТаблицаДанных,ПравилаИспользованияПолей,КонтекстОтчета);
		Возврат ТаблицаДанных;
		
	КонецЕсли;
		
	РежимРасшифровки = ?(ЗначениеЗаполнено(РежимРасшифровки), РежимРасшифровки, Ложь);
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураПодчиненныхРеквизитов=Новый Структура;
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(ТаблицаДанных,ПравилаИспользованияПолей);
		
	Результат=ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ПравилаИспользованияПолей,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,КонтекстОтчета);
		
	Если Результат=Ложь Тогда
		
		ФлагОшибкиИмпорта=Истина;
		Возврат Ложь;
		
	КонецЕсли;
	
	Если КонтекстОтчета.Свойство("ТолькоПроверка") Тогда // Новые элементы не создаем
		
		//ОчиститьСлужебныеДанные(Результат,ПравилаИспользованияПолей);     //+++Хижинков А.В. 31.10.2017 закомментировал
		Возврат Результат;
		
	КонецЕсли;
		 
	 ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										Результат,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										РежимРасшифровки,
										ПравилаИспользованияПолей);
										
	////////////////////////////////////////////////////////////////////////////////////
	// Определим необходимость проверки и дополнительного запроса в случае использования
	// таблицы синхронизации ВИБ.
	
	УправлятьНСИ=КэшируемыеПроцедурыУХ.ИспользоватьУправлениеНСИ();
	
	Если УправлятьНСИ И КонтекстОтчета.Свойство("ИспользуемаяИБ") И КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации Тогда
		
		СтруктураОшибок=Новый Структура;
		
		ПроверитьИСинхронизироватьТаблицуРезультатов(Результат,СтруктураКлючевыхРеквизитов,ПравилаИспользованияПолей,СтруктураОшибок);
		
		Если СтруктураОшибок.Количество()>0 Тогда
			
			ТекстОшибки="При импорте данных обнаружены несинхронизированные элементы справочников.";
			
			Для Каждого КлючИЗначение ИЗ СтруктураОшибок Цикл
				
				ТекстОшибки=ТекстОшибки+Символы.ПС+КлючИЗначение.Ключ+" ("+СтруктураКлючевыхРеквизитов[КлючИЗначение.Ключ][0]+"):";
				
				Для Каждого Элемент ИЗ КлючИЗначение.Значение Цикл
					
					ТекстОшибки=ТекстОшибки+Символы.ПС+Элемент;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ТекстОшибки=ТекстОшибки+Символы.ПС+"Необходимо провести синхронизацию и выполнить загрузку данных заново.";
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ТрансформироватьВнешниеДанные.1",,,ТекстОшибки);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Важное);
			
			ФлагОшибкиИмпорта=Истина;
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
						
	//////////////////////////////////////////////////////////////////////////////////////			
				
	Если КонтекстОтчета.Свойство("ДляАналитическихОтчетов") Тогда
		
		ОпределитьКолонкуДанных(Результат,ПравилаИспользованияПолей);			
		ОчиститьСлужебныеДанные(Результат,ПравилаИспользованияПолей);
		
	КонецЕсли;
	
	Возврат Результат;
				
КонецФункции // ТрансформироватьВнешниеДанные()



