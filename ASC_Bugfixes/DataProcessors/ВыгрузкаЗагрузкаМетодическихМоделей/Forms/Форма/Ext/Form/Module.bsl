
&Вместо("ОтобратьДанныеДляВыгрузки")
Процедура АСЦ1_ОтобратьДанныеДляВыгрузки()
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
    ДеревоМетаданных = РеквизитФормыВЗначение("Объект.ДеревоМетаданных");
	ПостроительОтчета = Новый ПостроительОтчета;
	Группа = Объект.ГруппаОтчетов;
	
	Для Каждого Строка ИЗ ДеревоМетаданных.Строки Цикл 
		
		ОчиститьОтборыСервер(Строка);
		
	КонецЦикла;
	
	Если Объект.ВидыОтчетовДляВыгрузки.Количество()=0 Тогда
		
		ЗначениеВРеквизитФормы(ДеревоМетаданных,"Объект.ДеревоМетаданных");
		Возврат;
		
	КонецЕсли;
	
	//Виды отчетов
	
	СписокВидовОтчетов=Новый СписокЗначений;
	СписокВидовОтчетов.ЗагрузитьЗначения(Объект.ВидыОтчетовДляВыгрузки.Выгрузить().ВыгрузитьКолонку("ВидОтчета"));
	
	Для Каждого ВидОтчета ИЗ СписокВидовОтчетов Цикл
		
		ПолучитьРекурсивныйСписокВидовОтчетов(ВидОтчета.Значение,СписокВидовОтчетов);
		
	КонецЦикла;
	
	СписокСИерархией=СписокВидовОтчетов.Скопировать();
	
	ПолучитьПолнуюИерархию(СписокСИерархией,СписокВидовОтчетов);
	
	СтрВидОтчета=ДеревоМетаданных.Строки.Найти(Метаданные.Справочники.ВидыОтчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрВидОтчета=Неопределено Тогда
		
		СтрВидОтчета.Выгружать=1;
		
		НЭлементОтбора = СтрВидОтчета.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокСИерархией;
			
		ВыделитьПодчиненные(ДеревоМетаданных,СтрВидОтчета);
		
	КонецЕсли;	
		
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК Ссылка,
	|	ПравилаОбработки.ТипБД КАК ТипБД
	|ПОМЕСТИТЬ ПравилаОбработки
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец В(&СписокСИерархией)
	|	И НЕ ПравилаОбработки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК ИсточникДанных
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаОбработки КАК ПравилаОбработки
	|		ПО ИсточникиДанныхДляРасчетов.НазначениеРасчетов = ПравилаОбработки.Ссылка
	|ГДЕ
	|	НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка КАК ПравилоОбработки
	|ИЗ
	|	ПравилаОбработки КАК ПравилаОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаОбработки.ТипБД КАК ТипБД
	|ИЗ
	|	ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	НЕ ПравилаОбработки.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ПустаяСсылка)";
				 
	Запрос.УстановитьПараметр("СписокСИерархией",СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// Источники данных для расчетов
	
	СписокИсточников=Новый СписокЗначений;
	СписокИсточников.ЗагрузитьЗначения(РезЗапроса[1].Выгрузить().ВыгрузитьКолонку("ИсточникДанных"));
	
	СтрИсточники=ДеревоМетаданных.Строки.Найти(Метаданные.Справочники.ИсточникиДанныхДляРасчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрИсточники=Неопределено Тогда
		
		СтрИсточники.Выгружать=1;
		НЭлементОтбора = СтрИсточники.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокИсточников;
			
	КонецЕсли;
		
	/////////////////////////////////////////////////////////////////////////////////////////
	// Процедуры расчетов
	
	СписокПравил=Новый СписокЗначений;
	СписокПравил.ЗагрузитьЗначения(РезЗапроса[2].Выгрузить().ВыгрузитьКолонку("ПравилоОбработки"));
		
	СтрПроцедурыРасчетов=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.ПроцедурыРасчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрПроцедурыРасчетов=Неопределено Тогда
		
		СтрПроцедурыРасчетов.Выгружать=1;
		НЭлементОтбора = СтрПроцедурыРасчетов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НазначениеРасчетов");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокПравил;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////
	// Типы баз данных
	
	СписокБаз=Новый СписокЗначений;
	СписокБаз.ЗагрузитьЗначения(РезЗапроса[3].Выгрузить().ВыгрузитьКолонку("ТипБД"));
		
	СтрТипыБД=ДеревоМетаданных.Строки.Найти(Метаданные.Справочники.ТипыБазДанных.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрТипыБД=Неопределено Тогда
		// АСЦ Ситников++
		// Если мы выгружаем типы БД, то потом такие данные не загружаются.
		// пока просто пропускаем их, типы БД выгрузим отдельно через Выгрузку-ЗагрузкуXML
		//СтрТипыБД.Выгружать=1;
		//НЭлементОтбора = СтрИсточники.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка");
		//НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		//НЭлементОтбора.Использование  = Истина;
		//НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		//НЭлементОтбора.ПравоеЗначение = СписокБаз;
		//
		//ВыделитьПодчиненные(ДеревоМетаданных,СтрТипыБД);
		// АСЦ Ситников--	
	КонецЕсли;

	//////////////////////////////////////////////////////////////////
	// РеквизитыИсточниковДанныхДляФормул
	
	СтрРеквизитыИсточников=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.РеквизитыИсточниковДанныхДляФормул.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрРеквизитыИсточников=Неопределено Тогда
		
		СтрРеквизитыИсточников.Выгружать=1;
		НЭлементОтбора = СтрРеквизитыИсточников.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НазначениеРасчетов");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокПравил;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////
	// ТаблицаЗависимостейПоказателей
	
	СтрЗависимости=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.ТаблицаЗависимостейПоказателей.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не СтрЗависимости=Неопределено Тогда
		
		СтрЗависимости.Выгружать=1;
		НЭлементОтбора = СтрЗависимости.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("НазначениеРасчетов");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокПравил;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////
	// НастройкаОбработкиОтчетов
	
	СтрНастройки=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкаОбработкиОтчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	СтрНастройки.Выгружать=1;
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ШаблонДокументаБД");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	НЭлементОтбора.ПравоеЗначение = СписокВидовОтчетов;
	
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Организация");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НЭлементОтбора.ПравоеЗначение = Справочники.Организации.ПустаяСсылка();
	
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Сценарий");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НЭлементОтбора.ПравоеЗначение = Справочники.Сценарии.ПустаяСсылка();
	
	НЭлементОтбора = СтрНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ПериодОтчета");
	НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НЭлементОтбора.Использование  = Истина;
	НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НЭлементОтбора.ПравоеЗначение = Справочники.Периоды.ПустаяСсылка();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Настройки бланков сводных таблиц
	Запрос.Текст="ВЫБРАТЬ
	             |	БланкиОтчетов.Ссылка
	             |ИЗ
	             |	Справочник.БланкиОтчетов КАК БланкиОтчетов
	             |ГДЕ
	             |	БланкиОтчетов.РежимСводнойТаблицы = ИСТИНА
	             |	И БланкиОтчетов.Владелец В(&СписокСИерархией)
	             |	И БланкиОтчетов.ПометкаУдаления = ЛОЖЬ";
				 
	Запрос.УстановитьПараметр("СписокСИерархией",СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();

	СписокБланковСт=Новый СписокЗначений;
	СписокБланковСт.ЗагрузитьЗначения(РезЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));

	
	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиСтруктурыБланка.Имя,"ПолноеИмяМетаданных",Истина);
	
	СтрокиОтбора=ДеревоМетаданных.Строки.НайтиСтроки(Новый Структура("ПолноеИмяМетаданных", Метаданные.РегистрыСведений.НастройкиСтруктурыБланка.Имя),Истина);
	Для Каждого нСтр Из СтрокиОтбора Цикл	
		   Если нСтр.Родитель.ПолноеИмяМетаданных = "РегистрыСведений" Тогда
			
			нСтр.Выгружать=1;
			НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
			НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			НЭлементОтбора.Использование  = Истина;
			НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
			
		КонецЕсли;	
	КонецЦикла;
	
	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиПараметровАналитик.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;

	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиСоставаАналитикиБланков.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("БланкОтчета");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;
	
	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиМасштабаВремени.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;

	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.СохраненныеМакетыБланков.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Бланк");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокБланковСт;
		
	КонецЕсли;

	
	//Ракурсы
	Запрос.Текст="ВЫБРАТЬ
	             |	ВидыОтчетов.Ссылка
	             |ПОМЕСТИТЬ ОтчетыРакурсы
	             |ИЗ
	             |	Справочник.ВидыОтчетов КАК ВидыОтчетов
	             |ГДЕ
	             |	ВидыОтчетов.Ссылка В(&СписокСИерархией)
	             |	И ВидыОтчетов.ОбъектДляСогласованияЗначений = ЗНАЧЕНИЕ(Перечисление.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс)
	             |	И ВидыОтчетов.ПометкаУдаления = ЛОЖЬ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОбластиДанныхВидовОтчетов.Ссылка
	             |ИЗ
	             |	ОтчетыРакурсы КАК ОтчетыРакурсы
	             |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиДанныхВидовОтчетов КАК ОбластиДанныхВидовОтчетов
	             |		ПО ОтчетыРакурсы.Ссылка = ОбластиДанныхВидовОтчетов.Владелец
	             |ГДЕ
	             |	ОбластиДанныхВидовОтчетов.ПометкаУдаления = Ложь";
				 
	Запрос.УстановитьПараметр("СписокСИерархией",СписокСИерархией);
	
	РезЗапроса=Запрос.ВыполнитьПакет();

	СписокНастроекРакурсов=Новый СписокЗначений;
	СписокНастроекРакурсов.ЗагрузитьЗначения(РезЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));

	нСтр=ДеревоМетаданных.Строки.Найти(Метаданные.РегистрыСведений.НастройкиСоставаОбластейВидовОтчетов.Имя,"ПолноеИмяМетаданных",Истина);
	
	Если Не нСтр=Неопределено Тогда
		
		нСтр.Выгружать=1;
		НЭлементОтбора = нСтр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("КлючОбласти");
		НЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НЭлементОтбора.Использование  = Истина;
		НЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НЭлементОтбора.ПравоеЗначение = СписокНастроекРакурсов;
		
	КонецЕсли;

	
	
	ЗначениеВРеквизитФормы(ДеревоМетаданных,"Объект.ДеревоМетаданных");
	
	
	
КонецПроцедуры

